%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.1
%%For: Vcana12
%%CreationDate: 12/2/2021
%%BoundingBox: 0 0 2226 580
%%HiResBoundingBox: 0 0 2225.1428 579.1735
%%CropBox: 0 0 2225.1428 579.1735
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.1.0 x90 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c004 79.164570, 2020/11/18-15:51:46        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Letter C Modern Logo</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Endemiq LABS</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>logo</rdf:li>
               <rdf:li>template</rdf:li>
               <rdf:li>business</rdf:li>
               <rdf:li>corporate</rdf:li>
               <rdf:li>identity</rdf:li>
               <rdf:li>branding</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>alphabet</rdf:li>
               <rdf:li>letter</rdf:li>
               <rdf:li>modern</rdf:li>
               <rdf:li>minimal</rdf:li>
               <rdf:li>letter c</rdf:li>
               <rdf:li>negative space</rdf:li>
               <rdf:li>insurance</rdf:li>
               <rdf:li>youth</rdf:li>
               <rdf:li>people</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:CreatorTool>Adobe Illustrator 25.1 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-12-01T17:59:16+05:30</xmp:CreateDate>
         <xmp:ModifyDate>2021-12-01T17:59:16+05:30</xmp:ModifyDate>
         <xmp:MetadataDate>2021-12-01T17:59:16+05:30</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>68</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgARAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qx/zj568veUrAXerT&#xA;kO9Rb2kYDTykfyJUbeLEge+QnMRG6vn3zZ+fPnnW5Gg0pho1kxIRLb4rhgenKYitf9QLmHPUn3BQ&#xA;CTQYb9Rv9UnNxrF9PdysasZJGlcnxZ3LZpNT2rW0N/Mu/wBH2GZb5TXkE+03R9LgIaK2jDdmYcyP&#xA;kWqc0ebtDOf4iPdt9z0WDsrTR/gB9+/3s10Xz35n0jgtveNLbpQC2n/eR0HYV3Uf6pGS0/a+pxHa&#xA;Rl/W3ZZ+yNNkFcIj/V2eo+UvzJ0rXHW0uV+pai2yxMaxyH/Ifbf/ACT+OdV2f21jznhl6Z/Yfd+p&#xA;5btDsXJgHFH1Q+0e/wDWzDN06V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxVIvOvm2y8raBPqtyObj93awDYyzMDxT5bVJ8AchkyCIsq+UfMetat5i1abVNUlM11Mf&#xA;kqIPsoi/sqvYfxzVTyGRssUV5V8n675h1A2WjWpmkTa5uD8MUQPZ3Ow/WewzXTGTUS4YDZ6HSYse&#xA;mhx5PqP4r9b2PRP+cf7aKJG1fVXeU05xWiBVB7gPJyLfPgMyIdgg/XL5fj9CZ9vEfRH5/j9Kcy/k&#xA;joCpS0v7qN+zS+nIPuVY/wBeDJ7OYiPTKQ+R/UnH7R5QfVGJ+Y/Ww7zL+XOvaJG1xxF5Yru1xCDV&#xA;R4uh3X57j3zQ63sbNgHF9UO8fpDvtF2zhznh+mfcf0FioJBBBoR0Oah272T8tPPD6tD+idRk5ahA&#xA;tYZm6zRjrXxde/iN/HO27E7UOYeHM+scj3j9bxXbfZYwnxID0HmO4/qZ5nQvPOxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV87/nX5gk1fzW1hG9bPSR6KKOhmNDK3zrR&#xA;P9jmr1eS5V3MSxLyv5XvNf1u20u0ISWc7yHoiDdpN+vBd6d+mYhgZ+kdW/S8InxS5R3/AFfa+ovL&#xA;nlzSfLukwaXpcIhtoRueru37Tu37TN3P8M3WHDHHHhiuXLLJLikkvmb80fKXl+4NrcTPdXaGktva&#xA;KJGQ+DlmRAfblXI5NRCGx5tNpRpn55eULuZYrmO6seRp6sqK0Y8KmNmb/hchHWQPktvQIJ7e6t0m&#xA;gkSa3mXlHIhDIynuCNiMydiEvH/zP8mRaTcrqunxhLC6bjLCo+GKU77eCt+B+jOK7c7NGGXiQHol&#xA;07j+ovbdh9pHNHw5n1x694/WGIaJdXdrrFncWhIuY5kMXHcklgONO/LpTNLpckoZYyj9Vh3Oqxxn&#xA;ilGX00X0nnqD5g7FVk88MELzTyLFDGpeSVyFVVAqSzHYAYqwOT8/PyhRL2QeZIJYdOMS3k8MVxNE&#xA;hncxx/vI43RgWHVSadTtirMNC8waJr+mx6not9BqNhL9i5t3WRCR1UlejDuDuMVS7zd+YHkzyfbR&#xA;3HmXV7fTElr6KSsTK9OvCJA0jAd6LiqWab+cv5Y6jrEOjW3mC3Gp3ENtcW9tOJLcyR3kCXNvwM6R&#xA;qxeKVW4g8t6EV2xVF+ePzN8k+RY7STzTqJ06O+MgtX+r3E4YxceYJgjl4n94PtUr26HFWO6h/wA5&#xA;Ifkvp9+bC88xiK5UIWX6pesoEiq6HmsBWhVweuKsqj8/+TpdCi1621SK60iduEd3ah7heXEuQwhV&#xA;2XiqktyHw03pirF7/wD5yK/JywW1a88wej9ciM9uGs76rRrI8RYqICV+OJh8VOnhirrX/nIv8m7q&#xA;C9ng8w8otOt0vL1jZ3y+nBJNFbq9GgBNZbmMUG+9elTirLfKPnTy35v0k6t5duze6eJWg9cxTQ/v&#xA;EALALOkbftDelMVTHVtUsNI0q81XUJfQsNPglurybiz8IYUMkjcUDM3FVJooJxVhUH58/lTP5fvf&#xA;MMWts+jafLDBeXYs73iklxX0hx9Dkwbid1BA74qyjyp5t8u+bNEh1vy9erf6ZOXWOdVeP4o2KsrJ&#xA;IqOpBHRlGKpLB+b/AOXU3nNvJcerV8zLM1ubA29yv71EMjL6rRCH7Ck150OKozzj+ZPkXyZGj+Zt&#xA;Zt9OaUFooXLPM6jqywxh5WHuFxVD6T+bP5darrz+X7LXbc60hVfqMoeCRi6h1EYmWMSEqwNEriq7&#xA;zj+aHk/yfd29prtzJBPcxtNEFid14KaVLgcASdlBNSdhiqd6vr2laPo02talP9X023jEs85R24ox&#xA;ABKoGbv4Yqg/KXnfyx5uspr7y9eG9tbeUwSymKaGkgANAJkjLCh6jbFWP+bfz1/Kryjrcuh+YNdF&#xA;nqkCo81sLa7mKiRQ6VaGKRKlSDSuKs4t7iG5t4riBxJBMiyRSLuGRhVWHsQcVfKV/LJe31xeSktL&#xA;cyvK5PUs7Fj+vOflOySwTryH5iTy15ih1KWIy25VobhEpz9N6brXaoIB98s0+bglZSHpXm/839IO&#xA;jSQeX5ZJNQuV4rPwaMQBvtNVgCXA6U+dczs2sjw+nmkl84ax520uwv3tWSS4lQ0ndKUDdxUnc+OY&#xA;2PSymLQIr7zzp5egtVmjmNw7gFYIx8Yr/NWgWmCOlmTVUvCWT/l7/wA5KQeWIbiyu9NuLzT3o9vG&#xA;sqho5K/Fx5CgVu/v9ObDT4pQFE2GQDKb7/nLTyff2klpeeWbue2lFJInliIPf8D0yzLijkiYyFxL&#xA;biySxyEompBI9I/5yC/LLSr0Xtr5VvjcIaxNLcI4Q/5IO1fc75gafsjT4Z8cY7+e9OdqO1tRlhwS&#xA;lt5bWyP/AKHC8t/9S9ef8jYs2braT3yZ/wA5QeTvMev2miz2F1pk19IsFrPKY5IjK5oiOVIZeTUA&#xA;2O/WmK0wT/nMvzvq8cmj+RtNkdIr6L69qMcZoZlaQxW8bb/Z5xuaHqaeGKGdeS/+cX/y90ryRJom&#xA;s20t/qGpxQnWLv15Iz60VXUQiNlVVjdjx2Nf2q4qxr8nfyY/MD8sPzA1vUG1GP8AwFFHLzEjhpbu&#xA;JUMkLiJfhjkiJ+Jmp+0AKNXFXl/5Y+U7j8+PzW1jW/Nk8/6Jtl+tzQI9GCSSFba0Rt+EYUN0328W&#xA;rir0/wD5yF/5x28s3HlS48zeV7WS01zSLe2j+rRvLKlxa2kUdtHEEYuVeOGNeJXrx+Lc8gq8U/M/&#xA;zTq2p/ll5N0/X5lvtV0mXVNPNyGMjcUFjJEzS04yMsbGMlWNRQkk9FX0JefkR+WGv/lfBrN3pAj1&#xA;ybQ4Lk6nFLMsomSzVlfjz9M9OhWmKvn78nNblbyT5w8v3Mkn6KvJdPl+rxuVAkaV0YqAVJJAU05f&#xA;EUUe+KvSPJh/5x5t/wAv9Em/MdLZtSRJ4bZwL+cG3iu5xH/vODtz9Tdhua4qu/MKy/IZ/wAnPOWp&#xA;flrbRpfJbWEV1cRx30dbefVLc0H1oKrBng/Z8MVZz/zh5JNL+UsryszsdUufiYkkgRxDqcVej/mx&#xA;/wCSs85f9sPUv+oOTFXxt+V6fWfy51I3l4sNjFr+mpdRzHkJrWSyvoZrdOTRpyaOU05OtOoPKmKv&#xA;UfyL1TTPyx8zyeWr3zBBLonmSRJ9MimDLJymVFtpwYhLEPUo0UhZwOQWhqCuKsM1LW4NF/5yx1TV&#xA;rgFrfTLm+vHXkOkGnySN16VCYq78k/y7f86fPWveZ/PE811ZWjJJcQq7Rmaa4LelDyB5JFGiH4VN&#xA;QOIBpir0388/+cYbXXUXXvIkBtvMnqxi6tWnIinjoI+atK37tolAPwmhFduVMVeX/wDOT1v5v0my&#xA;8iaZ5l1EXutW2mSrfXUDP6cjpLxViW4lmCEKzkfEanvir6F/PR+H5Aa09OXGxtDxJIB/fQ7HiQd/&#xA;Y4qwb/nDbU1h/LTX7m9mK2thfOzPIxKxxR2yO1K9ABXFXzxqenav+Y1/5/8APYqE00DUZI+tFuLp&#xA;Io4q77Rwcz1/YxV9b/8AOLnnMeZfyl0+CV+V7oTHS7gE1PCEBoDQ9vRZV+YOKvKXkKOyMKMpII9x&#xA;nOmNMEVpGn32r6jDp9hF611OaIg2G25JPYAbnJQxmRoKyXzN+WfmTy/px1G4MFzapQTtbsxMdSAC&#xA;wdU2qeoy/LpJQF8008G8w+TNYfV7i4s4xcQXMjShgyqVLnkQwYjoTmXh1UOEA7EMhJbdfl5qcdqk&#xA;kEyT3BA9SD7FD4KzGh+mmGOtiTvsF4lTQfyk/MLX55YNI0k3MkKh5R69ugVSaD4pJFX6K5kY80Z8&#xA;im07/wChcPzn/wCpe/6fLH/qvlq27/oXD85/+pe/6fLH/qvitpV5m/Jj8yvLGjy6xrmj/U9NgZFl&#xA;n+s2stDIwRfhild92PhiqR+So1l85aDE1Qr6jaKSOtDOgwJe+f8AOWmmXmmX+lecLaO8CPavplzc&#xA;WcvpKvBnniWc8WPFmclRuNjUV4nCxeveUvzd8l+YPJY80tqMNja20KvqyXDembWUijRvz4n7fwrT&#xA;7XbFWHfl5+f+k/mV5r1fyjZ6TO2nPDM1tqqV4fVgojJuY34GMuzfDxLVqAQN8VeYfkz55tfy5/ND&#xA;UfKHmY3llamL6gJryRpY45Yp/wDR+EaKQscvqNRlNKsD74q9R/5yM/Nryz5f8jX2hw6hHJr+t2wS&#xA;yt4W5lYJes8hQPxRkBCbfETttUhV8seYfL+q6X+WflC+1UJC+vXmq39iJUpJ6CrZRIeVKhZKu3xM&#xA;F40YHxVfXN5+ZvkLSfymjXUNbsLa8XQo1OmJcRtcCRrRVESwcmlJ5MF3HzxV8g+Qk1Cy/L/zhrkM&#xA;CyQWz6dDzmQtF6rySkDoQSoFfY0xV9Dflrpf5T+YPyv0LVfzJlsPrk5nitptVvBaF4o52YRoC9uG&#xA;jQv8KhaKCKYqifzJ0z8jtE/KzzgnleTT5bi9t7R7+2sL0XVxKkd3B6ZoZZmWjTJ8fGg5AkEbFVW/&#xA;5xh83eU9K/K5E1PUtO0f1tSuVtY57iO39UKsQ5KJmVmO4B98Veg+bfO3kTW/Ivmm307XtP1MJo1/&#xA;Lcw2N1DdSCAW7h39OFyxHbFXxe17En5N6o9hD9VEXmXTvTYGsorYX+0jUSrruD8IHhir1jVfyvk8&#xA;4f8AOMnlTzDp0Zk8x+XLSaWLj9uazWeX1IdtyUA5oPYgfaxVgPkKxfz1+YWiaxM/q3GtrdaTr3M1&#xA;43j6dNEszdTwuYhz/wBdZB0AxV6J/wA4+/mPY+UfOur+UPM73mn/AFhYbaCTUpDJ6VxaSSosJ4rx&#xA;jDo+2/Gq7UBAxVLv+chNY1ryn5r1WW087F7rVyz2+iW01x6lnDIEcGQo3ppyCgorLXeooN8Veefm&#xA;X5Z862/kPyLqvmWW4uJNVW9khlumaSSJZJI3hikeU1HOP94vJuh9sVe+/mv+cHkfVvyNntNOvluN&#xA;S1CK2tYbT0i4WeFraWVZWZfR4Isicm5FTUAVrirzHyrrsnlT/nGfzJPxMH+LtWnsdL4lhS3EKxyy&#xA;1ABKD02jr4/diqF/L7Tvza0z8tJYPJXlj9LaV5xW6OqTzxepW2Ba0ihDCSL4l4SsTT9oUxVMP+cR&#xA;/Ml95Z/M/VPJeqo9q+qxyQSWsnwtHfWBZuJB6Hh6qn3pirLvzL0mTRPOeo23HjBPIbq2NKAxzHlR&#xA;fZWqv0Zp9Rj4ZliW/wAtfNtp5e81217ekLZSq1vcykV9NJKfvPYKwBY/y1w6aXDNQ+mJoba7tnhl&#xA;VZradCroaMro4oR7gg5tiLZPGPNX5HarFcyXHlyZLi1Ylls5m4SpU/ZV2+FgPFiD881+TRG/SxpJ&#xA;9N/JXzzc3AS7jhsIf2ppJVk2/wAlYi9T86ZCOjmeey09o8oeUdM8r6WLGyq8jnnc3L05yvSlTToo&#xA;/ZXt86k7DFiEBQZMS/OHz1LpFimj6ZcGLU7v4p5IzR4oPYj7LOentX2zH1ebhFDmgl5H5Z8z63pO&#xA;t213a3UpYyqJYi7FZVLbq4PWuYGPJKMrDF7P+e3lrVfMf5X6xp2lQtcX49GeG2QVeQQTLI6qO7cF&#xA;NB3O2btm+Tfyv8jea9U8/wCjQW+mXC/U76Ce8llieNIY4ZVkcyMwAX4V2HUnYYpfcur6PpesadPp&#xA;uq2sd7YXK8ZraZQ6MK1Gx7gioPUHcYoecSf844flyNF1XRbH67p2nay8TX0VvMhZ1gdZFj9SaOV+&#xA;HNeW56k0ptRVl/kf8vfKHkjSzp3lvT0soZCGuJd3mmcCnKSRqs3sOg7AYql/nn8oPIPnaeG61zTg&#xA;9/AVMd9CfTm+H7Icj4ZAK7BwadsVSa6/5x4/Le/8yw6/q0E+qS2sFta2lhcyJ9TijtIVhjCxRpHy&#xA;BCcmDkgk9KUAVTP8xvyf8r+fv0R+lpru0GiGU2IsGhi4mYRg/wB5FLTiIhx40p16gEKsL1P/AJxI&#xA;/LXU9RN7d6hrDVWNDbie3EfGKNYlG1vz6ICfi64qz/Sfyo8j6R5ZtvLem6eLfS7a5S8CA8nkuEP9&#xA;5Kz8jIWGx5dthQAYqxjVf+cb/IWp6dFp1xcagtrCwaNI5IFC0lnloo9Eqq/6W68VAHHjt8KkKpda&#xA;f84p/l3axapBFqGr/V9XhW3uoTNbcQqTxzgrS3B5coQu5Pwk/PFW5/8AnFX8vZdG0/SBqGrR2mmz&#xA;TXERSW1DvJcFCxcm2PT0hTjT9VFUz0T/AJxz8h6LHqMdhcahGmp281pcD1Yfhint5bchKQjjxWdi&#xA;B05UJBoMVStv+cUvy4/wvceW1vdVjsbm+h1KSVZbYS+rbwywIoJt+PDjcNUca179aqvS/JPlHTfJ&#xA;/lbT/LemSTTWOnI0cElyytKQztIeZRY1O7nooxVh/lX/AJx/8jeVvO1x5t0WW9t57lpHbSy8LWK+&#xA;pU0SMxeovBjySkm3T7O2Kpn51/Jf8vPOOoR6lrGmj9JRlCbyA+m8gQjaUUKSfCOFXUkL0I2xVLl/&#xA;5x9/LqXzhL5s1SCfWdUcxNGl+6PbxmCNY4+MMaRKwVUFA/IfhRVlnnPyP5Z856FJofmGzF3YOQ6C&#xA;pR45FBCyRutCrCvb5HbFXms//OKX5dXNrZWl7qGr3kFjczXaLNPbszmZIYzHJILcSMipbIF+KtNq&#xA;0pRVlXnL8lfJfmnRNE0OdZtO0ry/IJdPtLH0Vj2XgFdZopwy0+knqcVZZ5c0Kx8v6Dp+h2HL6npt&#xA;vHawGQguyxKFDOVCgs1KtQDfFXnmo/8AOOXkm9/MX/H6X+qWetfXIr8RW0tuLf1ouP7DwSPxcpVx&#xA;z3qe2Kpl+cfkSXzHoi32nx89X00M0UairTQnd4hTcttVPpHfMfUYuMbcwgvmhpuqsPZlP4gjNbTF&#xA;6H+Wn513vlaOPRdbjkv9CXaznU1nt1/kHI0dF/l2I7bUGZmLUUKLK3uujfmF5K1mFZbDWLZqivpS&#xA;OIZR845OD/hmVHLE9U2mN15h0G0QvdalawKN6yTRr1+ZyRnEcyrAPN3526VaRPbeXl+vXZFBduCs&#xA;Ce4BozkfQPc5iZdYBtHdBLxS9vbu+u5by8lae5nYvLK5qzMc1pJJssXoX5O+SJdT1RNdvYyNOsH5&#xA;W3IbSzr0p/kxnc+9B45l6TDxHiPIJAe8ZtGTsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdiryX80vySi1yWbWvLnC21Z6vc2bfDFcN15KeiSHvX4WPWm5ONl0/FuOaCH&#xA;z1q2n6po97JYataSWlyn24JlKn2YV6jwYbZhmBHNDVo8bEBGqf5Ts33d8rkEJvbZUVRKqzsFUFmY&#xA;0VRuST2GRV6P5H/J7VNUlivdcRrHTRRhAfhnlHhTrGp7k7+A75mYdIZby2CQHudlZWljaRWdnEsF&#xA;tAoSKJBQKozZgACgyVsKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxVJPNv+Df0af8V/UfqPxcPr/p0rTf0/U35U/l3yMqrdXgvmT/oWv1T9T/SNf2v0b6vGtf8A&#xA;l82+7bMaXhoU9E/5Un9YT/lI/ToOP1r0PSp/sN/uyo+D1XZ7T5O/5VjzH+GvqX1nfj/y0+9PW/fU&#xA;zIxeF/DShmGZCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:d1121df9-9f1f-b441-9dc7-0328e952280b</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:d1121df9-9f1f-b441-9dc7-0328e952280b</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:B73FE67640C6E7119010918B04C99031</stRef:instanceID>
            <stRef:documentID>xmp.did:B73FE67640C6E7119010918B04C99031</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0C86A02719DEE611A6DCAA24376D76ED</stEvt:instanceID>
                  <stEvt:when>2017-01-19T14:30:30+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0F86A02719DEE611A6DCAA24376D76ED</stEvt:instanceID>
                  <stEvt:when>2017-01-19T15:17:28+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1186A02719DEE611A6DCAA24376D76ED</stEvt:instanceID>
                  <stEvt:when>2017-01-19T15:20:46+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1CBA012F5CB9E711B078CA4E4AEC789B</stEvt:instanceID>
                  <stEvt:when>2017-10-26T14:48:55+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1DBA012F5CB9E711B078CA4E4AEC789B</stEvt:instanceID>
                  <stEvt:when>2017-10-26T14:59:13+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:848A85697ABFE711949EE44D97AA0575</stEvt:instanceID>
                  <stEvt:when>2017-11-02T11:27:14+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A9D0A1309DBFE711A8E4C197C0EAB7AE</stEvt:instanceID>
                  <stEvt:when>2017-11-02T14:12:30+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:94630A1FA9BFE71186ECCDDA44A1B87B</stEvt:instanceID>
                  <stEvt:when>2017-11-02T16:13:25+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:95630A1FA9BFE71186ECCDDA44A1B87B</stEvt:instanceID>
                  <stEvt:when>2017-11-02T16:20:54+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:97630A1FA9BFE71186ECCDDA44A1B87B</stEvt:instanceID>
                  <stEvt:when>2017-11-02T16:41:48+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BE8FEFEDE4BFE7119619E0FE2D5A9782</stEvt:instanceID>
                  <stEvt:when>2017-11-02T22:46:02+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C38FEFEDE4BFE7119619E0FE2D5A9782</stEvt:instanceID>
                  <stEvt:when>2017-11-02T23:34:24+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C48FEFEDE4BFE7119619E0FE2D5A9782</stEvt:instanceID>
                  <stEvt:when>2017-11-02T23:38:38+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C68FEFEDE4BFE7119619E0FE2D5A9782</stEvt:instanceID>
                  <stEvt:when>2017-11-02T23:59:02+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C78FEFEDE4BFE7119619E0FE2D5A9782</stEvt:instanceID>
                  <stEvt:when>2017-11-03T00:14:16+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A475C949F1BFE7119619E0FE2D5A9782</stEvt:instanceID>
                  <stEvt:when>2017-11-03T00:25:07+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:115115FF3FC0E71188C3AB5AF8A37402</stEvt:instanceID>
                  <stEvt:when>2017-11-03T09:37:55+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:145115FF3FC0E71188C3AB5AF8A37402</stEvt:instanceID>
                  <stEvt:when>2017-11-03T10:26:40+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:155115FF3FC0E71188C3AB5AF8A37402</stEvt:instanceID>
                  <stEvt:when>2017-11-03T10:49:07+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:175115FF3FC0E71188C3AB5AF8A37402</stEvt:instanceID>
                  <stEvt:when>2017-11-03T11:07:19+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1EF487BC13C2E71185EADF82B10CEA57</stEvt:instanceID>
                  <stEvt:when>2017-11-06T10:39:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:20F487BC13C2E71185EADF82B10CEA57</stEvt:instanceID>
                  <stEvt:when>2017-11-06T11:19:03+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:21F487BC13C2E71185EADF82B10CEA57</stEvt:instanceID>
                  <stEvt:when>2017-11-06T11:33:10+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5F64A28DF5C2E711A9759C01F69A7D85</stEvt:instanceID>
                  <stEvt:when>2017-11-07T09:29:21+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6164A28DF5C2E711A9759C01F69A7D85</stEvt:instanceID>
                  <stEvt:when>2017-11-07T10:21:36+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B73FE67640C6E7119010918B04C99031</stEvt:instanceID>
                  <stEvt:when>2017-11-11T00:57:45+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d1121df9-9f1f-b441-9dc7-0328e952280b</stEvt:instanceID>
                  <stEvt:when>2021-12-01T17:59:16+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2500.000000</stDim:w>
            <stDim:h>835.071429</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Captureit</stFnt:fontName>
                  <stFnt:fontFamily>Capture it</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>Version 1.6 Aug 5, 2009, initial release</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>capture-it_[allfont.net].ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -579.174 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 579.174 li
2225.14 579.174 li
2225.14 0 li
cp
clp
289.584 579.174 mo
314.543 579.174 338.919 576.019 362.281 570.035 cv
241.893 569.401 141.209 485.739 114.463 373.386 cv
114.141 372.052 113.833 370.71 113.535 369.366 cv
110.294 351.295 118.692 332.411 135.708 323.172 cv
156.959 311.632 183.535 319.501 195.066 340.744 cv
213.938 375.48 250.149 397.057 289.584 397.057 cv
340.469 397.057 383.183 361.459 394.208 313.853 cv
396.019 306.052 397.006 297.935 397.006 289.587 cv
397.006 281.294 396.031 273.225 394.239 265.466 cv
383.258 217.813 340.517 182.164 289.584 182.164 cv
250.128 182.164 213.919 203.737 195.079 238.464 cv
183.542 259.709 156.974 267.585 135.725 256.064 cv
118.787 246.871 110.381 228.12 113.492 210.129 cv
113.88 208.367 114.288 206.609 114.708 204.864 cv
141.875 92.8968 242.535 9.68198 362.757 9.269 cv
339.248 3.21047 314.713 0 289.584 0 cv
129.907 0 0 129.908 0 289.587 cv
0 449.266 129.907 579.174 289.584 579.174 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.662287 .494423 .918395 .484993 cmyk
f
114.708 204.864 mo
115.557 202.09 116.691 199.362 118.125 196.712 cv
122.913 187.891 128.381 179.592 134.337 171.745 cv
133.965 171.745 li
169.66 124.72 226.125 94.2802 289.584 94.2802 cv
364.346 94.2802 431.42 135.935 464.634 202.983 cv
476.19 226.313 504.474 235.853 527.801 224.303 cv
551.127 212.745 560.673 184.466 549.113 161.131 cv
511.045 84.277 442.936 29.9603 362.757 9.269 cv
242.535 9.68198 141.875 92.8968 114.708 204.864 cv
0 .693263 1 9.15541e-05 cmyk
f
549.11 418.149 mo
560.673 394.82 551.134 366.538 527.808 354.978 cv
504.506 343.419 476.206 352.947 464.638 376.28 cv
431.437 443.276 364.355 484.893 289.584 484.893 cv
242.805 484.893 199.83 468.349 166.16 440.821 cv
166.569 440.821 li
147.114 424.991 130.538 405.357 118.136 382.53 cv
116.528 379.569 115.334 376.498 114.463 373.386 cv
141.209 485.739 241.893 569.401 362.281 570.035 cv
442.668 549.451 510.966 495.106 549.11 418.149 cv
.578485 .340734 .903502 .150881 cmyk
f
506.916 229.208 mo
489.562 229.208 472.859 219.588 464.634 202.983 cv
431.42 135.935 364.346 94.2802 289.584 94.2802 cv
226.125 94.2802 169.66 124.72 133.965 171.745 cv
133.965 171.745 li
133.965 171.745 li
134.337 171.745 li
128.381 179.592 122.913 187.891 118.125 196.712 cv
116.691 199.362 115.557 202.09 114.708 204.864 cv
141.875 92.8968 242.535 9.68198 362.757 9.269 cv
362.757 9.269 li
362.757 9.269 li
442.936 29.9603 511.045 84.277 549.113 161.131 cv
552.455 167.876 554.033 175.035 554.024 182.083 cv
554.003 199.417 544.384 216.086 527.801 224.303 cv
521.077 227.632 513.945 229.208 506.916 229.208 cv
level3{
gsave
clp
[-439.316 0 0 -439.316 554.024 119.239 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1
"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1
"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1
"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1"Le=1
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~"Le=1"h4L3#e9m8$Fg$9$b63;%CuK>&%_cA&\@uD'>"2F(:sMJ(VKbM)8,tO)SH(Q*52@T*khRW+MRj[
+M[p\,/4'^,es?b-,9He-c#`i.Dc#m.`22p.`),p/AhDu/].N"0>mf'0Z3o)0uX)-1;j,.1W9;229#S6
2TGb:2obk=362%A3QM.C43.@G4NIIJ4idRM50!UP5K<^S5f`mV6-'!Y6-0'\6HB*^6cf9b7*,Be7EPQi
7EGKi7`kZm7`kZp8'1cs8BLm"8]h!%9$.*(9?I3+9ZmB/:!<Q4:<WZ7:Wrc;:Wi];:s/f?;9JoB;Tf#F
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.5 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-439.316 0 0 -439.316 554.024 119.239 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-
!sA`2#7(VC$4@7O%M'*_&el&r()If*)&aG6*?H:E+!;^N,:"N\-7:2j.4H\q.kE5'/h\k30JP:;1,CaE
2)R9M2`E]U3BB5`4?Pbi5!D1q5X7S"5s[h(6UO706psI477B[87n6*@8P)NH91qrP9heAX:/4S\:f("d
~>
<~[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM
[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM[C*EM
[C3NQ\$riU\%&rY\[f8]\[f8^]=Y\e]=beh]Y2"m^:q=q^:q=r^VIY$_83t(_83t)_SX1-_o'C0_o0L4
`Pog8`l?$<`l?$<`l?$<`Poj:`l?'>a2c6@a2c9BaN2HDaN2HDaN2HDaN2HDaiV]Jb0%lLb0%iJaiVZH
~>
255 <~zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz!!**$!<N<(!WiE*!s8W."9er4"U5/9#7(VC$4@4M$k3XU
%hK9a&ebom'c%Q$(`=20)B0Y:*ZlLI+X/-V,pk#h.P!&$/M8\10etOA2)[BQ3B9,^4?btp5sn%/7Rp!@
8kViP:Jand<)cju=BSg3~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
362.281 570.035 mo
362.281 570.035 li
241.893 569.401 141.209 485.739 114.463 373.386 cv
115.334 376.498 116.528 379.569 118.136 382.53 cv
130.538 405.357 147.114 424.991 166.569 440.821 cv
166.16 440.821 li
166.16 440.821 li
199.83 468.349 242.805 484.893 289.584 484.893 cv
364.355 484.893 431.437 443.276 464.638 376.28 cv
472.87 359.676 489.57 350.064 506.918 350.064 cv
513.948 350.064 521.088 351.645 527.808 354.978 cv
544.392 363.197 554.007 379.867 554.025 397.201 cv
554.032 404.248 552.453 411.406 549.11 418.149 cv
510.966 495.106 442.668 549.451 362.281 570.035 cv
level3{
gsave
clp
[-439.562 0 0 -439.562 554.025 460.05 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+
QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+
QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+
QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+QWiZ+
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~QWiZ+Qs8o0QsAu2QsJu3QsT,7R9o28R:#;<R:,>=RUPPARUYSCS71hGRptbGS7CtKS7M"MSRh.PSRq1R
SS%1RSS.:USnI@WSnRIZT5!X^T5![aTPEjdTPEpfTka!hU206mU299oUMT?pU2KEtUMfKuUMoX%Ui5[&
UN#^)UN,^*UiGj-VK)'/VK)*2V/u'3VK;*4VKD37Vf_<:V0;6<VK_E@VK_KCVg.WFVg7`JVg7ZJW-[lO
W-[lOW-dlOW-doRWI4#TWdX5YW.*uWWIF,[Wdj5]Wdj8`WIX/_We'AdWe';dX+BJhXF]PiX+KGiX+KJl
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.5 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-439.562 0 0 -439.562 554.025 460.05 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&
QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&
QC!r)Q^=&*Q^F/-R$a8/R@0J3S"#n:S"#n;S=H+>S=H+?SXl=CSt;OGT:_aKTV8'QTq\9UU8"BVU8+KY
USFQXUSFW]V5:#bV5:#bVP^5eV5:#bVP^5fVP^8hVl-GjVl-JlWMukqW2Q\pWMukrWMukrWiE,#X/i8#
~>
<~=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1
=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1
=^#!5>?kE=?!U`B?=.&I?t!JP@:<SR@UinX@q9+]AS,OdAnPaiBP;'nBk_9qBkhBuCMR^%D/F--DJj?1
Df9T6E,]c8E,]f;EcQ5BF)uGGG'8%PGB\:VG^+LZH$O^^H?spbI!g?jI=6QnIXZcrJ:N0#J:N0#JUrB'
~>
<~l07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hs
l07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Hs
l0@U#lg*j$lg*m&lg*m&lg*m'mHs<.mHs<.mHs<-lg*m&lg*m&lg4!)m-X6/mdBQ4n*]W3mdBN2n*f]4
mdKW4mdBN2n*f`5mHj3+m-O**m-O--mdBN2md9E/mHs<-m-O*)lg*m%l07Hrkih6nkND$jk3(pjk2k^d
~>
<~/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'
/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'
/1iG+/h\n50etL?1c7-K2E*TT3&ru[3]fGe4[)(q5X@\&6UX=27Rp!@8P)KG92&#R:/=Y^;,U:j<)lt#
='&L,>$>*5>?kH??XR;N@Uiq[AnPdjBkhF"D/O92E,]f:EcZ>FG'A1VH@($fIXcluJV&N-KnY89LPUeE
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
289.584 579.174 mo
129.907 579.174 0 449.266 0 289.587 cv
0 129.908 129.907 0 289.584 0 cv
314.713 0 339.248 3.21047 362.757 9.269 cv
242.535 9.68198 141.875 92.8968 114.708 204.864 cv
114.288 206.609 113.88 208.367 113.492 210.129 cv
113.067 212.589 112.857 215.063 112.854 217.524 cv
112.839 233.069 121.103 248.128 135.725 256.064 cv
142.357 259.66 149.507 261.366 156.558 261.366 cv
172.095 261.366 187.143 253.078 195.079 238.464 cv
213.919 203.737 250.128 182.164 289.584 182.164 cv
340.517 182.164 383.258 217.813 394.239 265.466 cv
396.031 273.225 397.006 281.294 397.006 289.587 cv
397.006 297.935 396.019 306.052 394.208 313.853 cv
383.183 361.459 340.469 397.057 289.584 397.057 cv
250.149 397.057 213.938 375.48 195.066 340.744 cv
187.137 326.138 172.098 317.855 156.566 317.855 cv
149.509 317.855 142.348 319.566 135.708 323.172 cv
121.118 331.094 112.864 346.106 112.85 361.617 cv
112.848 364.196 113.073 366.789 113.535 369.366 cv
113.833 370.71 114.141 372.052 114.463 373.386 cv
141.209 485.739 241.893 569.401 362.281 570.035 cv
338.919 576.019 314.543 579.174 289.584 579.174 cv
level3{
gsave
clp
[-3.54642e-14 579.174 -579.174 -3.54642e-14 198.503 0 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~NDJ^VNDJ^VN_nmYN_ns[O&5$]O&G0`O&P9cOAb<cO]1QhOAtHgO]:TjP#^]kP?-imP?-ooPZR&rPZ[,u
Q!!9"Q!*B%Q<EK'Q<WZ,Q<``.QX&o2QsK)6QsT,7R9o8:RU>M@RUGM@RpkbERptbGS7CtKS7M"MS7D%O
S7V%PSS%:USS.:USnIFYSnRR]T5!^`T5!ddTPEpfTPO!jTks-mU2BBrU2KEtUMfU#UMo^'Ui5d)UN,g-
UiGj-UiPs1V/u'3Uic!5V023:V0;6<VK_NCVg.`IVg7`JVg7fNW-[lOW-[rRW-doRW."#WW.+)ZWIF,[
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~NDJ^VN_nmYO&5$]O&G0`O&P9cOAk?dOAtHgO]:TjP#^]kP?-imPZR&rPZR)tQ!!9"Q!*B%Q<EK'Q<``.
Q<``.QX&o2QsK)6QsK,8Qsf8<R:,D?RUPPARpkbERptbGS7CtKS7M"MSRh.PSRq1RSS%:USS.:USnIFY
SnRIZT5!^`T5![aTPEpfTka*kU206mU299oUMTErU2KEtUMfU#UMo^'Ui5d)Ui>g*UiGj-UiPs1V/u'3
V/u06Uic!5V023:V0;6<VK_NCVK_KCVg.`IVg7`JVg7fNW-[lOW-[rRW-doRVg[rUW."#WW.+)ZWIF,[
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.5 ]
/Encode [1 0 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.54642e-14 579.174 -579.174 -3.54642e-14 198.503 0 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~W2QYmVl-GjVl-GjVl$>gVP^5eV50o_Unjf^Una][USFTZUS=KWU7n9STqJ'NT:_aISt;OESXl=AS=H+=
S"#n:S"#n:R[T\6R@0J2R$a5,Q^=#(Q'IW"Q'ISuPa%AqPEV/mP*1riOH>QcOH>NaNfK-[NfK*YNK&mU
N/`gWNfK-[NfT6^O-#HcOcklkPEV2pPa%DtQ'IW"Q'R`&Q^=&*Q^F/.R@9S5R[]e9S"-"=S=H+>S=Q4A
SXl@DSt;RHTV/!PTqS3TU8"BVU8"EXUSFTZUSFW\Unjf^Unjf^V5:#bVP^5fVP^8hVl-GjVl-GjVl-Jl
~>
<~I=6NlI=-BfH?jd]H$FRYG^"@TG'.qLFE;MDEcH)<E,]`5DJj?/D/F-+Chmg$C2%BqBP;'lB4bafAn>Oa
@q0"Y@q/tW@:<PO?XI,G?!U`A>[1K;>?b96=BJ[-='&I)<`W4#<E3!t;c?Un;GpCj;Gp@g:JXb^:JX_\
:/=Y]:Jand;GpCk;c?Uo<)lq!<`W7&='/R,=BSj4>?b<:>[1N>?XI/J?smAN@:E\U@q0"ZA7]=aAnGXf
B4kmkBP;*oBk_<sCMR^$Ci+$+DJj?0Df9T6EH-#>EcQ5BFEDYJG'8%PGB\:VG^+LZH$O^^H[L3gI=6Nl
~>
<~l0@U#lg4!+n*f]5nF5o8nF5r8mHs<.mHs</n*f`6nF5r;naZ/=n*f`6mdBN2mdKW5mdBN2mHj3+mHs9,
mI0K1mHs<.mI'E0mI'E0m-O**m-O*)lK[["l07Hskih3mkih6nkND'nl07HtlKRNrkih3mkih6nk2tgg
k2tghkND$lkih6okiq?rki_-lkNM-nkiq?rl0@R!lKdg'm-X3-m-O**m-O--mHs<.mHs<.mHs<.m-O**
m-O*+mHs</n*oi9n*f`6n*f`7naZ/>nF5o8n*f`5mdT`6mHs<.mI0N4n*oi8n*oi8mdKW4m-O**lg*m%
~>
<~H[C'aG]n1MEcH)<Df0E.CM@HpAn>L_@UWVM?!LT;>$4p-<E)mp;Gg7d:JOVX91_]G7n,p86pj:,5sR\"
5!;"j4?GSb3&``R2)R3H1,:R=0J>%2/M/M(.Olkr-n$Jk-7'o_,U=TZ+sJ0R+<VaJ+!2OF*?6";)]K\6
)B0V8*?H7D+!;[L+X/*T,:"N\-7:/h-n-Sp.P!)&/M8Y/0JP:;1c7-K2E!HP3'')^4?Yhk5<qJ"5sdq,
6psI57n?3C8kViO9hnJ[:f1+g;cHat='&L->?kH??=$uI@Uiq[AnPdjBkhF"D/O92EH-#?FEMbNG^4U^
~>
]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
318.29 263.797 mo
381.427 248.536 li
381.427 330.637 li
361.596 325.847 li
294.154 309.552 li
287.146 322.118 273.71 330.637 258.286 330.637 cv
235.623 330.637 217.246 312.249 217.246 289.577 cv
217.246 286.44 217.598 283.389 218.269 280.455 cv
222.419 262.191 238.76 248.536 258.286 248.536 cv
264.636 248.536 270.641 249.971 275.996 252.552 cv
283.617 256.197 289.927 262.132 294.059 269.457 cv
294.164 269.62 li
318.29 263.797 li
cp
.700771 .669001 .648768 .74377 cmyk
ef
651.44 329.83 mo
349.021 329.83 li
328.576 329.83 312.003 313.257 312.003 292.812 cv
312.003 286.362 li
312.003 265.917 328.576 249.344 349.021 249.344 cv
651.44 249.344 li
671.884 249.344 688.457 265.917 688.457 286.362 cv
688.457 292.812 li
688.457 313.257 671.884 329.83 651.44 329.83 cv
cp
ef
607.971 376.152 mo
607.971 289.991 li
607.971 269.547 624.545 252.973 644.989 252.973 cv
651.44 252.973 li
671.884 252.973 688.457 269.547 688.457 289.991 cv
688.457 376.152 li
688.457 396.597 671.884 413.17 651.44 413.17 cv
644.989 413.17 li
624.545 413.17 607.971 396.597 607.971 376.152 cv
cp
ef
.749721 .679194 .670497 .901457 cmyk
%ADOBeginSubsetFont: Captureit Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Captureit def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 76 /L put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 117 /u put
def
/FontBBox {-114 -204 1091 909} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
11 dict dup begin
/.notdef <1C60D8A8C9B76427DF872117CC495F65FC880C37821B4DAF044488
FFF9AF268C17D609D4661B2FBDB3E74F6C29F58D403FB2A78CAD781AE8E854B8
587284D70E582501E0BC0ABB3DA683F5D3374998F7822E50DDE33A3594CE97AA
4C825F9A743DC4A7B00A330C6D82DB5405A6C285760A1B377C69075CA095324D
D29735517DAE56716B59602CE1F92F78CB76EE8FA0BDC4FF3ABB101A40221547
60BBF8E4BF5B9C7EADC26EF21445AFB355FA763258BC89D167A2ED74BAA39907
DD7FAE6B43A04F5986618B5C226A1E3ABF6AABDB7C059DDB8D0B35714FD7520D
97F44D429660AB5B97A2BE06C1CBEC4F0C13DD01C5DC70080D756D15B2BB114C
6916CBCE3F6A1F511CD165CEE28CBEA21A308BF17CAE0125BB5534A2A1D5111F
A65F093CEC84ADD97FDC529BF3F501DC3EE0AEBE476A8DB5F78D58D78D973979
CBDEEAB8DDB1C8137D03C882C9D6D99C57026C13BC4AC295E15C309B65EF8B87
BBCA882277889B9AAD0382BCD70E658A9FC212D2A2A3F3D605DE2ACE968B587F
C78112AC5BD4AFD02E4F4665C90EFDF55160E3317BA0B99E3AB98A80FAC27AFE
1D0DAC3BFBB1153AB0783CB02B42264A508DBC716202A8E5E76E7A2CCF689B37
179C58D91DA753DEFD0FFDC409097A59AEB39CF0E96DFA69705730753CA41B25
5B7D52D6AF98DCA14DF9C12B2FA84635108F070B9B786F8807DFFA2F7E7E70EB
E5C5F8E6058505BEC230CC24471A4F3CF59572A0E20B2D57F46F542F054192CC
976B88C93ECC4265BD9AECE2F8B18001FEA0C58D07CF7AEE2FB100D51C64BEB2
F098E48ED286B53F95C133056C6A656784C2CE612EC80736A939642B1F13F0EA
E07A16A101B75128DE3BCA3BB24C957048A8406E177EC5DEB6DB3EE84EDCFEB0
CCF5F942737B477953506ED5EA673EDE9CE3458E267F0E7AB4D3ED3ECFDC6111
DC36FF34A2233E8895D17E9A9A15AF22A964B4AB8A8AF729EED055534BC6FC12
51F4D669A1C23BCDEF77ECB702C766372F43FAB14EA3CAAB76EA4951F309AFD0
17C90CE7A3F7323B1837740B3A45B52C59BFCCB7400CB3385C26F95DECC2674A
A2DCD06481BD823AF1DF59F29651DD84F8C3E9AD0646C0B1E3E9E2D3E47DD777
2406D4004E82C1D779AAFD98076E5F1B50FB975DBEE0A871FEB33F4299897073
6508BA4A8FD121C9AC6AA8D0AB5EA56A8CDAAF532B6630B9B6BAAA411E32D1EA
484C130D9ABF95D5F39713A69D842310BD243E845A64A123AE8C66A7A82EC210
3051785FD52463EB69F8A3EFA23046E39F00F57B385F627981D0232ECC6E2225
1556EADC6F8D819240C66FA06626F7182F6397A2CC2C95D270672A8ED34E542B
F1E79DD8DB7DA7DB73AED98F71685D0352DB0BED4059565B5D2FB98E4C7A56E2
6999EB1117385E0A95A8F3E9D3B659D3803939F753C5ED64BF312C367A1C4240
547FDEE07CCC266EBB25830165EBE4B0BFE064E8DC1F66665209B8C0D3B0FAB5
F55BE8B34EAFEB80D9D14C59C29E77ACB6A646544D5675A43A9FA2530AA67A37
DA7F7C71DAEE050823D879A6B26C1CC37EB520B798A1EF36627B76B63D8948D0
FB04741495C91D24D3CE2B4344A228F3856C832CFA9D5D5046D8A88EBF84D34B
0AE83B0BB253EA2BF573C3424096DA16595158530789AB76596FF0007E10C059
F3A3372D14D36199C9C38BF7BB1FEC0F8417844FC7605814E879B4464B8EE9A8
88E359DFE881BF0EEE12E963BE25DD0F38C9B2E985A363945ECA3CB70EFA9FEB
B288685238AF504525A16A301CC0F54876100D03DEDF921D8024E7609CC5BF49
42A268B3448AC0FCAF174673CCC66DA102616F3C2E64D19C097A211BBC0EA0D6
2D380A217DF85C389D943D676A9A175EC4D34DB21C71C100B3EDF62DE2E7DD3E
4724DFEF3FA94E597B46FC81C785076E8482D650EE4431FF82AFFD54A812AB05
38A6DD7941195A2320F938F6D6E7DAEDF95A6E90B165073A90BD965471ACF789
1B05A1C865591F0FE1B3CF54D6735E88CDB0974979587ABE464B3D4085842E85
99C3FC5EB378EAD032C63D3FD9A8A5837AED774B8ADDCA9BA217314F0DC92C2D
4EABB22FEE8B0E2AB43880B29BC93A585EA487AECD3B624F70C231551ED7C4AD
7099E84E29F168644B8370C34E6765494A1EB68C1FF92378A1D4446E1D03A02A
3593F1478DDFC043CDE8F9A7DE492CAAFAF6D77507512990C129DDDBDCF24B07
AA53A5B0FC622ACCAF3BDAE3C3D046CD96FC6E651CF9100808F74A04FA39DEC8
F19DE072212233E8C4594C8122BC51C20AFA55453022FD7D5BBF1BAD04A317B8
287B198065D1391DC2C8C0C50698688E8E0AA978819C9AB924B3C125A30297A5
25AA88C5> |-
/C <1C60D8A8C9B653D76D5A4753BD7B4F4438B37670DB39C76FD98C0A1398AB
580AFD1C784E3F10BD39BD32B5874AC2C6A841E70A1CE425EE580E4AD16A5ACA
A32955A8D37D5A1CE5B4821A5115AD1E58F281BC4150B7EEFE6EC9EDA6F38A1A
A7B51E7CEEECAEE9C779E55500B6112FA973901C8B21AD186C4D3FDF3B91D882
2A4BAA601F1A3AB9ECD691A5D5FA59AF7FBAAAD0303202553F8D93EA8524126F
4F79CECE22AB1C65900EB52D01196E383F5903CB422A28F0048EA80A0662527E
9D59C4AFC54A912AB8B2452DB655FA4B71673928C60DC8A2DAE706AAE8FE84DE
119E96A0E7CF52FD66DF509DAED07AB8A46795DC5591B6B4B439ADEFABE2285C
5BDAE50FFBD3D776468BB8DF69285CCBEB5E45CDF2D940095904D1EEFA8CADFE
D5DEB33F19E147D560D2AD52A8ADDB358509FAACFFAC74AB8974796E5FF9E85B
4A27CF5100D3044D259F3624D13D2E43E2F3F51DF9ED704ABA618455B3598AEB
B0D4813D3CC1A2AB3AA1073FF77849B569249F73C93F79ABADD7D86406F00E16
D9E4EED2A600FD4FD0595A90FEE3714A79EB426DE0BC61CCB0E20B438FFBFDB7
3AE092BAF0D413A2558216E4DE712DA3A3ADEC743012F926D6876EAF307C4B5D
9D382035A80B80F8244AEB80242566BCAB902B497A491DF56B96B78D707F433B
CC961ACB57DF7EB1D387CC1EAF3E60F735B574468F323E9BE7F09D651652E722
99FFFF03FDB988321DA018DA588FBCA60E1B1707EFEA9D2F0BE5DE520538DA3F
553150264C9C5018DE219326C19C5E4B1A3FA02432DDD5EE47D1E5A842136B59
97630C09058569DF75292B4EBF7C72BF6112851FD68949AABC4C142490A64E91
43D24196425851B4DF24C68B1E065600821DECB3A867B96E3173950F7EEEF916
F89BB6A5D03C491334B709E15A8B5EC5FA64588702341FCB51A94D7E27E8357C
4EB51065FA6AA1DB74ADCE27650A5FA4AAC99BB1C30BED30BC6D29722A9149BD
BEDDB7640D84F47DDA93FD04CA80309551AF1BFCBAEADCA73A00B7F2C8EBE889
77911B474927E662C5966F114D3127FF8CF1723CE257F5F1AF8C6E64DB3847BD
A3B8FD33300F5C6B0AB7FC1AF9EFFCA0CED134E18689D0FD144E7EFE8EABDF27
843BE5FC7F6B1810BAB56E4E5BA1DC1759B2079050E30E2A19021027309F9E55
6C7C0436C71362AD86245AD7A64E86739649B99E36D739EC52AE347078E159F1
20A9F0355CAC413DC301307DBAB74DE4F8FE1EDF81366B59B58C0AB0B9C7AED7
B3DA8EE4573516B1F89321A90CD877E0A9EFA38AE2903EDFA413EB8E4F9CAB76
B54698C430C8E877C4C907D8F153E5DC7B86C41E38C09DEC1AF8336CAC532DE8
78624D155D49EF36612D963669A10FF8FD3CE4CA89406BFFF1304B301BFEEB8F
DB793A6E820DE45F53C9D7EB804CF86C306F6E9A78FBD70977A5F475BD439A05
DE0232ED96157DBEB8AB47CBCF217DE592B4216D4D199A885815C208B8F492F4
29F68415C55FE1CC06F4ED326771FF6D876109D855879E8C83E48520E699D02E
C806EEA5E00AC54EC94CB7594021FDA7993E355E93DF54E0A7F8D81A947D38AE
7DC2D23FB39FA6C4378E577D246364AD53DA514D35140FC7DF1F0891C05B8B61
195F081C7B6DEF4E92E565FB9274CC12EEDDAA04C0448148384B7AD68EF3A51F
79CC4CE62FB505BB906153B77B26EF95FDB04DEDC037F34B2877FCD95646D535
AEDA90A1B04CE3CC538495D0DC667B2E2EDD5DAF936E86DE6E7F48F297997FC9
7509B5B164FA7985A6864B38B78E7EBC151AAB11AD2312B27AF4973CCE9DF844
F31DFAE10F795FC9C35AB323E2855AF1D814731DCDC0A94D490CC8B4F75A3A71
B3B2EA438C0DA0BC147E6FCC3A001A6F53EE1CCB9593E4DCD0AC19EB83C1581F
790EFEF112ED17697E4374DB4B5367156847F9C1D4EF1C8208B3751272738B47
9F888CD2527632381E596BFC380512B174F90794E5E556BDB0447502C7023947
EB8228190FA5446CBA338B25B2B6D30004FCC099B44A1D93BD788438C3E23CB9
52E678CE22CBD58ADAAABB4227810223B94D9A6EE825986751B0938EC69C7ADF
B39C9093AE7E7470279E59F0F911C06FACBBF0F62DCDBCB7AE51189C8DFB30B6
4B9AF59EC96E55C0C96E85687F53358057C22218804451534B5489B56D5191CC
B9F88D13A45DB93EB684E7E3B30E8CCF07D7AC877C154C91FCD9DB3742C4E02F
ACB2AC9CE275394ADE700931CAE2B48086C4FB69A3876216485AA98AF79D222A
A810370CE5497B8088EA7D1BBAD9D44601BBF88E752DBB1344C24FB2D02D70AB
7B7467FBEDBFDB1C5DBA8EC83AC2F0ABEFC7D5DE6373621548AC8E2D97048207
323093268777AEAD2D1AC68C03F14AF4020CB46155458BD43DC85ED8DB941F3B
26C1ED72D6CC79DAC220F59D7DBEEE94B23DB51C1519319A8CA30E75E0F63B54
02B96FE684860760F4CE3A3BA84049F7B6D8A25ACA0B665E68F21772FDEF941A
B1889E79CD29EAA9C25A3D757FBBD48C283224AA0E8449044BB2185C0E89987A
A206CCF872862F59CFEFB3DAA578BDFC2A6A7B4C8C7490DCEA2A6FC34A184562
2E99CD683432DAD568CC662F5E90C943549734CB4AE8557288BF9EF32481B109
653DF6A28559950990DC586F1641312366A487F6516BC925A679097B6D6CA987
A895AD1E5DFF4440C8F8E314B885D6AAF39F39B36B2B222DBECFE20FA5FCAECC
F9A89607A8C2A5E91CD49DBC843C6B86379783E7A3211A5FA28804339171D00A
A3A9D9CC2715872B9E20BF4E4AE782122A8F13E40BB18A64894C0C2A91FED2F7
A30DB4FD4F7DB0E952D8DED1625EBFFF08E930E18B8DD7C71D30B691A85F> |-
/L <1C60D8A8C9B7E897ECB468C24CD9F23A781BAF3A285EF16B3EBAE30FAF3A
CD8C75C3FF8336A36FC9CF4900957DFC3A7BEAD511AAE4FB7E05C0FA480717C2
AA899B89B8166474F8551E3D0D64643528BD0DFB9081C88164C16462A043F937
4ED7444DB06BC28875C3594B215D8419D31B6F27EE5432B58C2F70B1439E62AA
B0F001DB4FB8AA297DC3F5FAB67C739F5BD323F2737B597A074172E9AAC7C473
4516199E38952B3E16CD8F3AF319E7A3994FA931DCC31D6ECE61A153E6D39BD6
D30E86829E9B9933C94F2724BF21A7F78E5C1D1D6EBA8A07B20AC811C51415D8
78E7588EE6E187AFF2E348B51B41A367630B5BF404303314548ECAB0F9CA75F2
F161B3ADAE79CEC75C3304BBEE236BF5D9B3151C703B258851A36840928E03E9
E31CAB7FE8CA8FAA13432DD1DF8C742C6A62AF92F5BB707B10606FCAAE5B6EFE
0C8D922E30AA80B4F5D25B0313688AA7DF2DAC6AB0EBD74A2C8E2BB63D602D01
25AF563C6F75B741D3F4B114F9A5D7DD9E7D6389D9CFD94A9CDFA00840F74058
10478956741C98BC39D19767E7258E73392F400BBA24E78D5B92F285B1DDF2E6
D9B1E4EDB02C11BD1037CF129E3771B4F1E5145FF34795148305271050247B4A
32E55E0B69BCC7420EBC562FADED392B1E6F3598A5E637AD884F9539A470E347
96777F7768B6FB0467FF89954E05D99988911FF8F68C4F5B55C0C7A8BDFF00C6
71CFD7CFCA7D2671E6C0AA48093981675F7EB4C88993B034FB3C7E0289070EB4
2059173505FA7FE3359920B2500C09B73B323D8D9910598387D32D4A85786CD3
9B103E1AFE0E17E9AD2A77FD46DC0135D58A2181ED0ED783ED40A420B8343FAB
7C9F1DC26F917424D8DC766C5936310F5BD57D3185920C915B47753463B36BB4
2C54AF8C4276AD5D8A9D0A4A2595AD46B33BAB9AB3211921EB2FA7565CD6A0B0
96B56CCE2645DFA04F4D5C7CC54D2D4100B830711A2742EAE3919FCEFC64A6C4
3E0986C05096AAA0A94463D0BCEC4605E8985A358AD6D461BF5D5C258594D2CD
4720DBFAAB79477A3AF54243D76F42C2597D1115066C4CA92E1B5237C84A5649
0EE0C223D15A1BC6C1769C3C65CDBDE5AFD44C546841B1557472718E0BDFA8F9
CD3B5F01BA92DD7DE0C0A7E98B26F093B5151E82AC2354261523BB16DC0F832F
D186D3C3DDF387B892C1530F731FF4E3DB802DC4C027292A68A5BB836CACAF66
6B8F13FBBDC22CB23BE196E3EEED3646A588226F57FE3CFF7D7D2116A77C4C06
D46787E9B0935138C08964F9CEC6285AD2F6C4095275CB3786A2332B83CA9404
CECA847D7365BD4D9284FB912AF9F972437CB0BC542A6785E4A76C2207B627BA
639DFD66FBFF414A0CAC0D569579131053802FF77F931AEFAC4B8EFF17DED438
EF9E5F47ADA00A1FA5693DB9E280F0E0C591CA00946ACD966097819515AF5B18
120EB156E8A56173F734A47F24F6596DC14F1A03CD981A401C349CC764440D84
9A7CCDB0BC8A5986339080A54542F99AD6204C981632902C400239B2BB9C4A0C
72630D25A0A3E77DA73578BDB1F75DC2F74AB5C70C56CD376E1CEEDE7EC48750
A70F56970A30674E8B146944EFC702BB42DEEFD8AE27C0FE3152539ECAF841B8
80086AFCE605DAE958C6D4D49274A1DE5C48E1EEA663D6D37809B58845BFD346
FBEFCBC8A89EA1D744336501C9F25F601AB973F4B50073E089DBB58D988F6BE2
14B30D2C161F902588F88B495294C0952951FE3F4C043301F5F06A66E337EFAB
92CCD12AE9BCEDD563B300F75D80AE1A5BB31B1C254E8826FD1829DB57A5D032
FA02B745CD43E4982FC8109D35F762BC0DE79DAA855FEDA90FADF33C9C74C40B
EEA5F3A0AA10462AAD2821091DD7E57AD14A8AA6093B9139A54538F44D265E47
FC370C188AF8CFF2787D424F0DCD869B00E0A448559E1F7F05F7024D3AA88430
4B9C8EA410F0083348DC91966B79107066C2B6DECCCA811791C022F82B43905E
ACCB3786F015803417A7348B897A781BB7C3575FBBE48DD793E3E4C6C0F818A9
44FAD96D02E95936AA4591B4E154DF8DE188B6B272A18A8BB317C1B84AE75786
1BA6C8E78C965C3A3B554F9FE186C947EB9F90414399E93BADFDD97D31B4F7B0
8FCA8FE5AB051F17904C12AE8CABAC0B7CE8BE2C02AA3A70400EDB5D0DBA8612
E54D39FB49C7C06535E936362623D725C9A81DE69360C3A970C1BD76715E7C9E
863EC3AE22247C1F62B5913741B09B22157DC1C2267DC9FFCF391191F18DFF56
9FF9ECD202216438263FCD28A5EF18FB26E57321416136B4ADFD6AD090CB87D6
0AC66E57074C550EAD325D9921417FDE27F5DA5CF94074EDFF3E63071468EED0
28AD7425B0574ADDCFDA391954F64D3E9C741AD6E82B6F5AF64D4A1922E37781
9512F6F0DE61A1E42B40E9294149BC983DB12FB2CE0A116A6D469C07518F4F8D
CE73106B507D71447EE5A5955120B9B15FA8480372CF71B672571FB2B6051194
D77CDEEBCB09E4E57BE427B9F696> |-
/a <1C60D8A8C9B67E8BCC7FDC7B1F1CCE6CD12DE054A05C65DD69B6EF9C9E18
A6695DB866962CE81D38052208AEE46D986920C19FB36C6FDED48D576492ABDE
229B7D28AD2C4454F315EF3D971CD9FE7AE66B8E49548EE237764E5CDF7A3C38
A69277C60B6ED0250393CD81DF561D5CE42AFFD9802793C9DD58FA0994BFD498
6B1521AC93592C9DFFE091BFA0E1227FBAB124AC0E122631F1578A2B1521197F
DB60E52E681F73EEEA0E89A4624F03BD5AA6B7CA86C68F10E5C328FA906D1B00
F08593C862A43FE84101521297216E6F8ED8B72B979251FAC37FE6A9D0872135
FEB42BFB2DE1EA3E52D32129F86E6A707541C15034C0228B4217F625B0943CF5
42674BE517A1AD7D54A1A78F30878B8F12B927F406B53B1BECF7A84CB1AA15A3
89EF1492DA9AF2124D3572387A961A29112C4A73D8C0BCD1E82830840685D5EC
8592685704C9401CD39081C6CB062106E5625028F823BC4C577BBEB12AAA2087
CC5939CAF287F8AC312A8988949CADFCAC3F59C8146D4CDF73114F7E5B63166F
72C0B80F68FCEA8B7E90646FF2CAB8FC3F4F37EA672478F35CD57D4088EC2E9A
B841DBBFBCADCDA308208232E0F1E0B22A97D7A1E2C6D047F5C30EF7BC9ACF35
904A76DC412376AF95DC4335598770CA728A5A6DF3E334C64351ECDD313940C6
9178EBA99BBE517787BD4728C64F244AE5AB336DC05A2E6221FB1E645F1E49B7
0A6B7F05547F59883CDFEE6CB902151577D0CBEE7945808A63E7AAFF3B7FF752
6708D30ACBF0A36A1AA55D61EE4E47608886F4660FA0DA0DA9240EFB507C91DF
878464FD3F98F11D11CD196CF245852111172221D60605320E6CF3CE30D061E3
691DC78DD512A3505F066B73C106583383FF0FC1BFAB3AF76A293FEF04F019F0
BC2C8212FA7558F7D4471005C302C8DAB6CA0FFC4637F4F491F0045E0A> |-
/d <1C60D8A8C9B7F88C2B327C64E75BC18AACB733A5BFE913349E399BD6BA38
7737224D98C03E396DDDA4C487ACEF1BE2C84889F35D92E1B7CA555F721C63AC
497B0C69169C6198680E9DF5069BD50F39DF0C49E7A8F67F3661B3083058DA1C
B970BE364074B8D447C34EFE0E584E3BBF1C87330733EE5A9FD11E53510D5524
1BC52D1CF8BFD5A0A1C9412C1761E718C3DFDB65056EDB8E11815BBCB4496E13
D25AF999C717772B1D906A86F72B3114B15B6BD481D79D5E02089252A8F6CDE2
D3815C8128317328CBDE82249CFF3E65279E854363E6143171019B07EC8C6F83
5A9CD3A1D4D8753F4DF6543ABD8C28596ED7AC08683EEC1CA0D720D12E0094EC
F34A23FC5F42E591699EA78B205133AF894CFBE90A99E9EC2E7DF72B61D6D4EF
D64BF71855E16BDF7CE8DF860E65B3F3A043F296FF1D820A64511DE71099203D
8D1635C464F3B6F428F7E3BB4996F368856FA477605845018EB3EEBE085C20DF
2F7A053A5B8671D72B5DB14FBFE09ED388E97088F733E5D156EAA07349EB3D64
707569CA49132AC95E13B63C593EBE92D29950ECEC4572A20469EAA6EF673F0E
85DEA0B4A325470456310035B959DA4611E3B58BC28E8E20CB4DD60F90C2D92B
1C02B43CB2F88EFDF82A2D0698B7E00F27DAD6FA118E3319F8854D30F3E96995
19C6183946E5C1DF80C0FA593DF37CDA42D01362052339F81FA45C0360C53FAA
F8A1F359D073EA63AA8E7BAB05EDC8C941900430EF6D1D9FD5FD21FE02FAD7FC
BFA8978F7D37A16459344D1A6244A68D52DF43B88E91E65400A36DFFB59ECDBE
B819DEC8CAEC20FBD289CB3F21CC8F2C47C17FAC15742FB531C9F9BD0D926514
7F44A7206C85505C980C54BC5A2ACA21C721A8FF5D824D88203A4A8C583242FA
C3BEE56DA69A99F5BED1771F789DB60590E88CA7C35B272F90E5F7F87085304B
49E4C3F7495F6BD7E322468DEA39C7E622D4CC536733984BF0744AF1DE3189CE
F74A79CF1CCE302A5497BC6517D53CD833B80CF48FB7BA708EA3DABC7E0D37CB
EB7C320AB28793E263585A30958A9F15141B0F712AD95DEF41F368EF985FEA55
F99001B84929E79742C67E65E651ACF556C2BE660319837BADF3D07F0AE2D974
13F90267DCFBCA38CEF84C63D2BB3AF38822EF1BCFF27C7DA0857C030D142472
DD1A0F36AC1ACF194F35914F74469B6BCD580428AD68C76EA91579516274CE17
6CA8C3F6069A5BBA0A77D36002DE3AD45B1664EFD5205598DCE43EF20E9A1884
6F988A4E0143240C0D8993F5397F1425D3EBA934560E47D2F562697A052EBA82
40FE07007A96D39008482B752AE6BDF62199A6AADD712DE7678AC746D2073E31
C035F58F02491E30F85C0CC34EE518AB16B06C013B0C70A77224024EC55AAB8B
5840FF27168206D8D5C3FDA99C9DACF5EA4CABE2E872B7E90DC638F7BD617FD7
491F412355A463A10ED6F407261DBB06BA987F6167C368E4D106DEB817AC4325
9E96370D985D015A49A7AEF3A0F4B68FF360C02D1ADA5F6AA20C1559631B17B2
4FA1A0550926299DB348DB4B77DD83142CF8BA5CD3D2106FAFA0A8E51E00961F
5C996716D0CDBD32643D0EDD41B3554FC9EB9B6462F6E37CA49D497A36B7CAF2
96F87DC893079D3279224FDD56B41BCFECCFA131ACD56DEE70688F6C43C99445
091D1B03CBBEA52437AE642AEC8256DD1A46D46F1B7A97DDC895161FDCEC0714
442C77258F21108E34E18F2F3BE348486F9B8928241896B2C0C37E8B0F0E6AC8
AF932FF074BF13F6B21D8E71A84C52DD4FBB16588EFD1694F39212CA9DD531EB
A839E77300BAD1176B86F56262> |-
/e <1C60D8A8C9B7931DFD16771D3685488BF3DCEC34270D9146F9CBE553961C
830D6E7B958EA2D5271678FD6C3449F2422F5D13BC7C1FAEDD8E8D8831C27253
179F4C9C8DAF1427967BAD7481CB5FEBA794C4174CD8B1EADAB282A24702E3A0
52523C3E1D034D41EE81F022D7D9DF2ACD55D4DE8CFA3286AB4E896E56D6F5FA
3DFC2F760EF9345621088F4BF80E41B145C02CB3945438DD0363B6C6B348C8C4
866A5D0C2B60EAA8861CEDC39DD05861864E8E6AAC8D5DBBCB5346BD094AA4ED
7721D39683EDD29913371B1E5A3FF0F239C17E706417504E3AF09937E9466DE9
F322389B404AEEE492BF375110EDF5DDB0D36275027C61363B7D61CFDD1366E9
F381C91925E9301D87C53EE299551D0347AD2F55F5F9D8C2E436DFF11D984C4D
126F4719E914FDAA2B0404BB8D88D63040B35806DED353D38A797E84780AA5B7
DF2B14B557F0327AD2C0E0062CF447BAEF256E4344A624D53800D0AE46949512
B3178E445576CB902C73FA1A637FCE5222D5C3E9CA035090C245116B6701B633
E59EEC6E35738BD60FB810646DC23A00A6D3362303AE6CE313AA28E49674E327
219B4538CBCE50BABC597B40CAA7154077BBB523B8A89914B8AF8FEA67B600E4
885DCDD622C7748F540E12AFD2B6DC6432A0D9ECA4E4F927AEBB225B06C8D50E
8B29D87BE499FF20424A7F7F4B17F8DB8CD9BE90BCA9884BE3C4097DF2C86477
35FAE2F813FEA8C10B98257FD16790140BBAF21EF4BE3ADA27E4B128AE6289EB
90BA99C2C72A55ADB43CF018A4A6C04105CE3A6291A44C0C340A3EE10C2075F9
5FAD043CA0863DC7FA4461E714998F6B6D29E542DED5883A425EBA8BA0ABCFFE
7553C0E80E8D1FBD4245FE03D70BACC325327ED6A2CC37D669BA9C47A8065A48
B1943D6FB343640246853D02F3449A7B6446F1366BEAE437F35600E1ACA784E3
D4E7E5B9A9E400029143937E86797C58B98937474E5708841255CED1CEBC25C1
DF5419B9D43079FD79FD60ADF9BF2915EDF39B0B0D2D7B7BE13EBD1AB4723C83
49F1DCDDC9ABD5B348F22628FB1C70FC2E6A71DC7636FE89DC57FA69CC8E42EF
78E1D3BF71BDB4CBAF067B64DB6E3ACBE2159C768BAA9097A75C44FE9A284638
3FCF15F85C8B4FFCC46494A0AFED0DA592054DC99CF7D0B7C316DCEF711E4F5B
C6D4A19425469222A7EE4572D429E8AC63543304A7DDBE39DF2BE44EA869F973
7DE7E91CB7EDD4B19AFFBCF5E096EBB0FF3CA9CCC06CEA06B0D42FFE8229813D
5BAADD474FD2ABE366A535A27A273F384D919568E952F1BD7738D9145A276614
BE090CF342E36F3ECECC27EA4B806C256D3137CA8B0B51141CB2A471FA850F79
F9B861783BABB8EA5F29C6CBE61EA9DF2A1F6E1838CC75CDBE42A0460F4F548F
77B0AB2E527CDFBE43CC6A21CFD3BC835E48CA93F0A668EA63DEDD3D219121A2
73BAE7C92F215A0B268BF36851B41F12FC4A1D51250A65187160BC7AE7E02FD4
053A444627F2F563CFF33E4240794B9A5050921C65CDFC48F31CA3FA1E5CA895
B683EB3624985832BE072E18DB327DF7DCDB26893FBD37F8894A466E147A4D7F
DFBAA1EC94EFEE9FC53E20194A5856F8747FB1B5B28E896A9F0732BF8FB4FBFA
B125A63EC27314D8E5B6822FE14747C3B08E88EE8D6D81EF5D24C5EDB9210766
18F694767BA0BCB5CC1224B2057200A218BF1F21838A934051E05C6AAFD5FD3A
B7AD21C019017E13E35465F7A5AD747E035BD4E8B4F1E1046D61526A9FA92CBD
CB23EBFBB03A755DD4A6938C2D1D55174E42CF452DC63540B5FB09E52FBA6252
63AE46CB43376E839B8E07AED78A4A1431095AD81D54002B7ACA0315CC418C1B
05AF6A4A7ACB72A16CE157E84AA945DAED205BFED2BC9818376DDBBF0F46A631
D689DA0C8911F37598A370B66BD3750BC5ADA0A32F87F4DF9A7BCE3416E876B6
9B402DA6752DE6AACAA13BEDE81C2D3EEE1B903A83888233DEB2D35415BA8189
8BB4B81310F90E4225D7D257CB06E4B496431C429ECF1AB1420A99AAB46397EC
C886A0093E31D612D91F150105250ABBB4B11C8279D3BCD42D2A0F457044B2A8
C96A01655EAB599EB7C3A62DA56527801D6B6CBD241A6291F99674411CC62EFB
18360D76FF7BFB6903F8923D150A3EE23A39BB19BEB11249228AA27F1C745A40
79069C01FCD102A0231CEBED35B845DDDC7F85A33EAEDE9F052179BE9DD2D431
0ED8579AACD144D0742869AA3886D3E285F5C036DF91BEB188E6BA54BF5C80B1
E1A8CF018D7D7CED7C8D19C30138B20FA1ED47E810CF010ADD5C0227D4EB6FF2
4860946377405EEE629ECC76B695CEF6952DF0F6116E8C9A04EC090A2631AC16
D2F7C8A50CA0325B6A6EDA74950C65ED3E98D3CECE8AFD286FF099DBBC55D14C
74C3727B0505312AC1969686835B7267AB30C2B30413605B6F100419062C64AF
D8B92EA432252CADFCBA94F64A7C8B2BE77C4E60C1514BC0689AB231E195765A
D618131139E914BBA58CE3017C58E43BB9E6CE4C2A210B79D8B2F70CC5D12959
51AB6DAFD27049D967FDE982CCC138DD112B9BFB182D6C243344A0AFFC4D05E8
0E3EFDB48E008714E76DB78B78F14399C2E4AEA3C4752A16D893D074ABF0303F
FE64ACF39A80029D4E6028EC3E4704AA5931B23839F5A983CD5E692DF958E10C
C5B976A9DA8E4E8513701E893E6976829768CF91A113E538C0961C9A4693086F
B805CCAF0F4A13860859C596688094083E63FEEEAF79CA310F17DDB68F2C0E60
8C426A5B3D9973B307CAE666078F942438E76E9068E39B70DC5ADE955513207B
AD9F6BA99318A0A2A1E8FF082C24A858274580027CED1A6453E5BC920DF7513D
47BB85C03114859A6B11A6C17A16D9DBA9E343413223ACFC31BB8B96AE5E3BDE
D277CA0BB89D26A43573E55376C80F5F07E1ED47C3EF245A314CF5277B34B28C
51AB72749C4789999F21FA8FC7EE395EA1164A2B2927DFC2E2BAB4536DAE2106
B7E9B7ED0AD805E37E08ADCB3D5F5AE5DC9C152E674296035196C6EC6CB8BB4A
AE825B6407A26A66C1FD2381C3AE9E7E2DA16FE254DE050C8F4A2EC4DDAA25E4
ACE8B9D7A5FE1A4132DBBF74031506E124A50AA4F3F8E598631284D66DEADA71
53BC0F84FB8B6E46D2212A3574266C7458EFBC6DA835106EF5D7D2E5A0016DF0
684DF46C3E9A42D38BDAE308DBB97882BAE0DE75BD924E7077141D76E6B63A6C
2EA2476C436163ACE162940C4CEE7070EB87AA83F302E3F598F424B7F9FD5BEC
E7A438F6372F46730C120EFC60E9E5FEB2FFD175D847ABDE0C99D1167BEC0DB5
47F43F3F7A8F894BED7E1F6582E0024C9458EDB06198ED836DBA4FD073158699
A50B0A6D1D62680C73C616BD0CA3828C5630BFF1A340F1CD9BE96851361A94AF
24BED79B906BEFC162FBA4916709695BDFC6C80B96CB174811A1093B6FD01281
CEA64805FB91F91AD78032083A4F31D312F6D8CAE4F44EAFD314BF6897CA95A9
9051CD25A891AEE6077839B356CD0847B59A459A64EC8C81F5EEDE11C9FB90DA
052EC33F536FC93C135227ECE3456B06D5EC35123380BB29743101579C7ACD2D
409F982346C4B72BD667932A998E686876C467EBF062B49B0D88F8320ED3B82B
086EC28D950B9111898F0DF990FAF99260DEA1CC156F454A923E96935DC51578
E2A900448B04B567B48D79D6AEF5B96BFC28381E59CA55792E522D110AD37C3B
36355EC9F4CE83E0C3EEA52C7E91B8C5F1933851B9CA6CE7C1336574E26B3BEA
9D0491318F4812697B0AB43A2470235EBD1AA01C146E9EAEF70BF0A34DBCBB9F
4A1F77C3EC0694C7C829D6DC5220B9FCFFA20A4ABD0BBDB8FF54D9FD9576AA6F
E94B9A424F7CFC9655404490611BE337507B60CDD81893BDBBC1F1151F0401E7
1301C099BD4CDDAF2107FA8D2F6E7CCBC752D18E52DD3D7A5CDAA0A172A1D005
89ECEE9DBE4C5BCAFC3F8812A498BC3463B24C16FF0B5D76D54F3EA1342522FD
22F0375894C7E7A1D277ED08D5D48EED59A0215D658822F50B9CBA87D8186A28
A635EC770A1F21122AD66B37DA39AC43276E0A4242F01BD4E105748BA78AA069
431008D3302D9B6CF758E09D3293914BE8E55DF7F946FD5F5AFCBF9B6FD91FE7
3B007009364675E004E745BC64426DF36F341B670E041DE4A27DD4237B0430FC
62FFB3E599410688E17EEC8DA6745CC3B78024E4A38D3AA55C0B899827B69FD9
46684081939B4ACE24A3AE8BFDC457E20430F456CE4F077AD1790C1D708332E1
7EA4273BC013025A5070F099EC09BA3F2C4188D317CB772ED6EA6141CBA3368C
0AFFFFEA4EB388F2A070A83D17ED18B4F0D1AB9329F08D95494DF8DCED707E56
CA5366A717ABC2380E26F8C58A0B87D0601295F9778CACBA6A7CF9520ADA0DE5
C682A1509D2861117FA4C93E1E673709C41C30C0E44492D35572C51495A9B988
EB08BBA597319CFAEF0A4F8EF42390CFC725C2A069E855A694664ED3813F5E2F
43DC9253436DE927476C91DEA45B13D6925B2BD2A04E4EE4CC862B05881F4637
1D6831BE3E5FD4FF530FBC449EBAF7C745A1B60F8B4D1D91D240A6F3F8FC1A16
47739131BD9C8CEF5AB960D8A23A828023807FA44040D1D12BBBC9817D1E9AEF
0DAD12EEE3AE6B939A62140D2BDE7C67C021E08E5C00DA24A8A66C4126FBC2D3
BD1F4F142A1B6B7DD4DE85C397E4009BBF98FE86268588937608DB24DD0748A4
FDCCB5C208F574F10F5EDD7256B48AF2EEA11CCFA1CB8B700CCFACBA2BC2BFE1
195E8BEB5908793ED298A9ACA40FF082C19B785956CEF4BA5D8E2F638C0C944A
4350C9025B69613364353CB0419AAA28CEFD75890868B5885CEA7E02C92D49E0
10F161B4E0EA057A4990E7584D35FA446D48ACC82E7D64926C60E28236A2C69C
8F42F768C0B2BBD0928EF96C44A028CDB97F160F05E3BB3AC357D6AFBF193662
B1605B62BB56CC0BDE0B3B0E5B4DCE4DEAE95125485D3D9F86039974C1D39206
079EA98FBB14019D865341624A6E26F2572DF0FD172AEFA906B0B10F000834B6
87082641386ED3BC6FD1FDD59F58B6925955FC188A2F1637189EB538939D1321
610807FDB4D980355A19D83D70F9199BF1A9D608E416329F3FEEA120CC87F54F
91FDCF9989221314A43D46E975907DA1A746D8D7AA2363377D032B2045167871
BBF25CD8A656F4DF9FB99A7BCC537A1E380DA9C2F13C520300D90D6014B8CF64
AF0AA181810386ECCC2735736380D6011FB5C875278941CCD7C82825EAE7F814
4FDA276795CD99B2E9BDF2227570B353D716E2EBDDC5E71189D15893D2E31999
E800ACA18001A134CFE95F4ABA8743A0A8DDE578E8552ABF2A996759E752D992
6DD1A8B86A7D785A5627DE69E146B19D511A26BAF846AA4641803CD563CAA0B5
4DD9B87AF8B4B28BA9AF16368DA0AD96F9C119E988150BE3887ED7766C> |-
/g <1C60D8A8C9B62184874A00F8F6479B8DBF44DF6C48F0260DF57923EFECB7
9F2CE4A141AEC5999173F5922E4A532BB5DDA736797FDD8EB98745BA586D67F1
782A406C82A236ADD1FF0009F2BABFCF2473697D28F75A07F8A603E73BBC358D
2CE3ABA162B45CFEA44EF3248A84962D93ED0320F1E68102DA84B953267E3095
98C63553E866A3CFD43350138D91D1BA82DE6C6A923E9A17A08ABD541B10B5BA
8AF0546529678CB25BA5C493E81E7C36D1D22575BCF1A6A31C78023E427DDA74
89134B2BB2F6BE9C4379F4647C0C8E7169BBBA134D2910FCED3AE124994100F9
13F571864A2735A1BAA01B3074218073264EBA8A93E65D9A2C947D4E3BFF64F7
39B151E0DA7E3A0E7B8D05ED72DE05DCB1F4972E152C54E895631ACE7E015011
13852DF0131689E7A93C3793CBCB12294A53F548C4DA2C331974E93E58E588BF
F266A75ECD2444CCD3A03BCBF4E26D11167C08C041762D9FEF4BD852E4738CE0
A1D564ED4DE5B73119449FC6022440EA29E8F1CBE34F03E4BB8F07315132BB6E
AAB1E4F4CC9C12352FF4A8E9F3024D35FFFC7A41521C4E40A8E276F4BA4A47B8
47936B7FFE477D279C08AC1308F488E077018991837BCFE6F0001A73BE239165
61F4A7F0BD75656F7DF854E38E5B66ADE8F7F3490CB3BE9D121283B4062E5796
6F237634EFAED9EA3B7B461E3761D12CFF75CF8C259F86CFD343382AA9461C9E
62E63289DA3A02A988A0636B7AF0BD3DDF7A675DED92B3B5AC071F001E6D0979
966ED0B12F56FE4CDF05843881A65A0707342D0898BE638795AA42F7DBDEDC17
3D264CCB8160325AF344B98291846EA8239ADC675D71AC707963F5A563965300
934F9539A97C92E2E47AC3DD7A99C237677C5F26689A2D183FE1D603848566F7
FB06041746FC3F6EE0C781D5347C9694EBEA99B11CE7EB97D38A387F35FEA0F0
BB6C4679753BDE9F58597D4F40F193EABE08F56300FCC322DE508D654FFB6A37
C265E1FB8A917CD870C9104EFAC52A09CE79998446DF9CF11FC3706052D7337C
2B7238CD4E05678F5BB42AE3CC07E5E88A32F88AB407CB26A0E2DE4374C5379E
F9D289C48FA2D6290D0C50651D7F81AF06825498EDAD4EE9497E1D8A68649540
AB11435A3075AA28B7A4EB701BF3CBBBCC3C4E8AB4D5931D692D8C314C4BF94C
51FAA298EB6BFA4A74BDA6142FF09DF504F04611C01825F02DC14B9FE150AED9
83DF1B188ABAFB287BB7C2D7933871523BA7CD8A0866B3AD2C3E2363C2082101
77CC95F75885A7AC50131DCE96B633ADA3E6DC1FFB2100A521F3D99049E7DB2B
6C2DB7CCBBE1D2356383ED74B35C4DA848EA67D1885DFACE2646902D9DC7101B
1401A2EE5D610A3BB846C98A387B2184507FE02324FD07B0CFB3AF6C68E7EBA8
E63EA2BEF57FEBF855A21D5A9DA592C08588B8777F277E36BD0DE57B92726D44
6AE7EDEA5B17188235D70FE27B28A9ED749B6F06C5515F2D1F870522C9DF24D8
D6203F8A929B2917497A16D08325A138EDB2DB7BF6C5E9EB18BA4134AD47B471
368B978E1212F92FD1656C28D33F13C4D5BE124A96035BA5E78AA9EBF0DCFA9D
333DFE7A5514973EDA76C3EBDDA0D6F429C060DDC7E1A6E4F4860BBA36E0F012
FB6852C2E28A7959C8A664ACE37E6C43CDB4523BAA4058A9222F1DE5503387C8
D3967E92616A730BDF889571965C4CA6356D7EF87A756F2F0B6638A088313AE2
87D43F3D4153ADEA2AB78F9E658D843CBB02D62CCDAAEACE40372527E319FD9C
0A5208AE857AB73DB1EE47E9C95547BAFBBBA608228318C87FECEB5F02353EBB
80CF7F9D7FFC3ADB980527C6B4B16F72CD69E7559D15D233CA01F19C5811F9CC
DA9145B68066EFD1A05862CC2E10BDCDE6220504366DC4756C02F95ADA990E7F
AE500496A059FDE4FCABEF75AEC9848BCA22AA2B05C10AF68CF6CF6F43C667FB
3697510D5FFEE1F36F0AD84DDBAFBDFA20614C05276CCEED498240FCC5E299BA
FA9C634D3F081CC1FEDB1353789AA1EE343674288B22D71B67FC29625F8E3683
A9675DDDA22BB875D940EF56D439FCC04C2CE1B6F822AFEA25C9B1336067D756
4CDC85CF63C311B83EFA45D1551BE44F5BF855FF1B7A661EFED2E68E92653AD9
8364EA281AFF41F8833FD800CB4FF2E7163DA1DC2C1E23778AA21851C8ABC03B
77D42777B2EE768BB035F76211BAAC0BC9D042AA1CA05AB5C6946B8D7C5367F3
4B291E4B1FABB4022EB56222F2DED09BBB9CE1550C0D6C09837EA18B8CFD0E45
056C549BAD1AAFCB3D1E367C3C25479FE575100AFE3BC2EEB404CA1C7AE27D00
3BFE047CE3D044619287F32B9576140724A7BA1ABCA5523DCD8DFD3020347ACC
E979C53F89E3EF29089834B5746F7E3976966DCB78500F1649957E4C2B479A54
A1F479E0A426278AB00650D2302715E94BDCE650651746DB8B3584D029A1F311
7E8ECF89B9013C4497697A5BD38F14DEE8873A1A127A01CE9F851744A2786EB4
E228636834BB00902C746F1D026C4F5123FAF45FA8C21092869B76DB4C5B75E0
A84AC48F9D8A33EE9233EB8719AEA595A036B300F2C3FBCA53A9F1F037AE4CF0
97297A295EFF1E70F7FB37601882B4A14009D5B449705EBBBDF598565CDD07F2
6BE70FFCDA052B892B8798A323FFFC3624C0163129489A772FDC4FF7728BE55F
2E30C65F5F64EC940C75370076FCD61745C5406D3F118E5C7DA4808BC0D70AC6
88D796EFA7B195539913C0F090E65D5F8A3BDEC5C7758AFD1C216DE1806BC5BA
3CE4F9C18FD03330A9CB82A9D804D4447A44C3F7D85053714F300CDF5DCD3024
FE0578342DF920EA2B0AC33477CCE09982F8CB859708AD05461CC977A70DD2E4
8CAD2181BC60502105B671E209F3F3ACAF45C6856CCE006CDCD9B82E1EADE383
C08EE0AEEA43E266225FC9CE71541CBE657D781A8C706D933283E311EB84A671
125E1D2CEB5433623AB21E390A1288F6220F12FD31C7C54EEB29AACE6DC23F94
7054983F56808F01139FF28DE3BC8BE6720A5326AA6A2D1C6418BE57413762B3
7A38A5542A5CC441223F1C9DA764BA77112BCD5A2C84E138201DEEB46C535249
FB8EFD66E5AAAD286AC7204DB695FB05A8A51AB6E12A4868492AC4D899D74587
AF94425867F0118345FFF6FB6DF46F62E9B4AC386DC93A57A5B1ABF949DC817A
FA18A65A36520583C8B7D76F09A2EF172FA6E19853AC73257BE9CBADCC280CCB
324C26FA9CF803C34092E85B121C953012260C92192DF8F34F357760C2C30379
4EEB100B5C49BE03F7262189D098D4FD7391D1CB737E55853B44055E5B2956C9
80EC8898284BF28A53A3E9B6AB8B8D7C01D8E634C07F5C9A0D0CDE139517A8FF
584751124A7544F6416DD61E51589DF9A270CB99A55FA477B1BE37F8BAEB0683
C8B88C9CC9636E05B463189438A6CFA90F61D0A0FFFF66288F1E92C01CCF0B8E
54DCAAF4BBF9F89D5725C89EE2D1DBB254F4561A7BEA72855A1C4406D0061B3A
EAA17929A9370E3AB845F12DFA1587CCEA8BEE252F1042A21EADBE8DD4591CAE
CDFFF0C9B02C13F2314EDF519105045BD6D17CC34CFEF26C4770C15C2EE1CA39
788DB118F6DD42814CDD00868D6903F68D36C682D1060E80F0EF769B4883F96D
9FA6732FA28EC59ED544E5A6B7CE7012ABC6AEE87EF672> |-
/i <1C60D8A8C9B8AB09FFE10494C0E865C736EDB53972C928D5F568EC67F86B
EA152AA5B9BE052328FEE6ADC006A21B516D8D7898D342BCF172F001245E0D9E
42B98D5C7C9750F436685EC137A97E5377A4BDB1C5AFF4FD35D77BD29F743353
351CE2D6347510785C7E935515E1B8C450706657C06E29CC1A92E660E2A3DAE5
DEF8FB2F3A121A5B038369824AE1D8A26E514BCCBF67D89586793B61E8B26DBA
4211A96EBFCD17079AA2D17F00C6001D7BED60C2DCFAAC924FA1E96C410A2172
436F6FC13A866838CBACA55A06899E73E7E80DAF781462D39155159865936FEE
21D8B45B1ACF2B0C4BF87DA2F85E33C899AF785792247BED8F14B13873497857
621363D86AF46DEB7AAF9E2E1730D6FBEA6733C8E992C911E64AAFB32A8A9BCA
9E468253C5EBD0455392BA157FF0A75E03FC3DC9C31CE8E2B24C8ADC559D4124
0A3A1F3BC48CB631F7C305184CB78E7FDBBDA8D1F8FBEF5374239651048C29B3
3585F4BFC2E0E5829635AF121EC5E9BB4177658D91383172263B725D1306DC58
96DE95B43FCC38976A12BE647D9CEC4564440108CB42CD13C5B8A69278F67B35
FDE868D776AFB86491E014533ACD33B34F5D5DF4B43D8AE67BC34386C1BEC298
B1441EE97DED2DA8B2CAF28CCC1B0F9B181BF255521141FDE3F1538C3AE65B23
B6AE90DBB2BFDBD4B04289DF0A2A4ADE21CCEDFE4F03ED77E3737041FB136A70
B1B1F2730CD6193CFBBA0D3F6636243D7A1BE81F6DDD611AB826C64CF4514463
E22A2DB5301B2ADF9FAE0AE2E368BB0FD040C63A09070E83B1BE9AA6CFB27525
0ED75417DB7448BD683576822EF288F613FAD0FAE80E7796CABC4EA6CB31062C
3B0C0DC89E8D1153E80601D402C46B59D9CD29BD4A8B71A03F2122EC49C35200
9E512EF94D1790CBB22B20F59B9AE59B099DC498AF48EDF714767EF2228B22A2
60D8371992C2041118122FAD32EEDF0A880F109D1B0B444A6AFD4EFE39882AB7
CD1EB2C4C4BACEF8298AB4B49B0FFF34D722245E699B5BB298077B3040ED199B
7746D28FC240F294F6FD98355D038B8B578AA81D6D4E9CCE3D36845A44449989
CF14E8FEB6C359AFEE7CB098847293BBCE6C04F48C0FD9FDA67128E9A63B04E6
CE738B55250C4892F058290C22561EBF0B42835A0299422C3E1194C76C053855
9A0F0615261E2D30641CA005E690B70D49808280071EBD61781AAF4A1FFD8584
C7D4883A942CD5F5F05E535BFC892E2A0C58E22B05993AA6912F83756D3D1AAC
5287379ABA171B14DFB96FE240CFEDF210170EFC00C1EA590776D2AD889E918D
D1C5AFADCF9CE8D826C52A490DDB4B58B6218C24173213D2A49364FCD5DCA5BB
5A7C95E50A54D40985B4C0DE5412157203871A68FD98FAB51F2DD11E5A6AD977
54EFC0D95C27EF4A67AA0DC99B9145833E77319FA20A8BEC849044EAA2261942
A16A4F809692B7296E82219E26665483983F0475A0E9C972> |-
/n <1C60D8A8C9B7DA5D01D402C096D657531B4CFC63CC5D5B19506BA5602A1E
908C5861B7167AB61D9D870ACF06010901ED1EBF0B7DC74E83D96B2EF24EA2FF
6FD7D3717CF23EF9555D7DD3512F22FD48586EC726ACA8FB1655FDBB3D1C75AE
16F63C137926627D3A13763A32D3C7EE505CC550945C26CF4E6A1008AA42DAF4
9CFC09CE094F82EE7B5B4EC92AF45342173944496341642C6C3F632967819D3C
763D93BBE0F7130D004BEC1D4CFFE97087C49105DB6E616EAB120996C54F64DA
7FEA3B0F83B136643D05C1EEBC6FE74980823932F6AF324FAC730D7119D77716
DF9EE1E8075DDC80F330C6F3B535F93631F392DECBE6CBF4308621F5DA15393E
6895246854D76082C35B26481327F6465F5AF1936D9297C031B603CD9A0BC60E
24A294CF463333774BF47ED98C64862137AA5B2723BF6D2407EB8138ABD62393
1C130DF1C81257848AC70495499555DCDB8E4D1FA1C4C5FEB0B8D1E1110EFC0A
A8BC9CB75AC81398B1EFABAEE0882CF1BF0DBCE4E4FA7B745D00501AD8DF52B0
A52625A65EA1CDABA38601FB54913DF571F41A88B2D6F328DFC126C5B6FFFB56
4C50DEF204AA51C9BE7DC34890AA3ACDEC287482772378CF483C803321CB93B2
9963C626370D6EE243947C75A8B2446425D38DBDDF755B36EFDB82F6A267111D
F611DD7B321E46726D737BCF202C7BA80A5441E503EA9A5C18033D596A21948A
E58E934845206C1A0DFEB4045480D26EB315D053D01464A2AB2FB01AA2C3ED73
D7FFFA8D6250F6EE932933AD470745E5D198C279E210DDA0C1395D9B428A6A93
A103539FA57BE2F105A3922BF52080261C93A3635F09962BDC8BFBE42B58BFF9
578A14FAED3D895D453A25CF3023F9DDEE163FE4F7B1ED62AA66F21C75C51033
1BB21E326FA96E70CD71A70B97672F079D13F1883DE72A7FDED15A06F95A0567
4A08856EEC6C98A4FCCA650AC717F43027BD3D3D956B39E8D3EB4527FD00B180
F8AC52EECCC396BB28C739ED0CB18F2ECF95F4450261C0640195B8ED7F337036
09EEEC10572164194C82E1A584933B1D1CEE1093DC8B203D1470A896D094CC78
13C82F904378B44C33F69A3E4C0619D137DA7455E0B8B7A15D2D92CBFDCBC7A4
2990FB5F3505BE09D0AD40DF5EC39F2B8694FD0BBE94E1AD1349851AFEE17C78
409A36C1C9026112907A3F5A8D37E2F3AA4D5C5D2E898636EE3434780343C48D
C128F23B0B7FBA0CD00CC12EB9C2CAF472AFE506DB8326F6471FB535AC0C141F
1F605C3A8E1745ABF7F6367A031A8B0D0C6967AE42CC562D461E8EBB95F8CBD1
55F93520B48B90A70498E769C84782EA7B5B5C5922037BDD6240B4C4E3FBED13
BA939C608AF56718A9083AD72496F60C9957AA95BD02E581B88B2B5D102F0AF1
5C5AAA28CD0F9E05D58D42AC44C3AE9DA61169C2B3700EB64501197600069636
9BBB17AC617146BABAF30DBCFF54D13768D7A322E9CA520CE3150B56E4876A07
6FF4BCAC981F7F894EDEB64E4D11984C1EA1421340D96AA20D94A9BB90739E29
803C72353782CB1A79001744860087C42B043695E31718FB5B1CD2EDC5C94969
DB56E219FD583F9C8CFB586EC6A3F4E1B73B6FF435CDF39B6FE9605FA250EA6B
BEF9E5BC74FF4F763F181A556B1A39021139A93C24B19742B9CB22AE4744AF6F
4D79C4EE0E28D7523C7C5F66333DF81F8D08E6972CABB33CFAE2C7DDC2CA81EF
6FC99D1E0CD7713ECAFE9AFD22D3F0F1CFF94AE75F93C8F1E47AD8A02B64D476
8F79A171824733F4642B132010F6C9C79300> |-
/o <1C60D8A8C9B629F1CEE4334501E617DE37B8A0843A6EF1EC9B1D0FF7D46D
5C6CA365AF4FF7F46E73D8936D32DDD0EFD0DCF60115D2B44B5FD14F952DDECA
12E0B91E2BB663E688791198C9656F6AA1D90FA6B873FBEA24489C0ABFB05545
57E95F8CA1D30588B11BBC2BAFC0C230001F921D9EA6D705AE0B10162C8BA7C3
32FA39070FB6AD65CEA9B642819431A9A9746A8564895F3472CF5EBD78CAD7EA
5F6EF0EBDAAC4F4492599396101195B31911001A6BE5AE49F23A0FD7AFD527A9
36469EE3B8860F135B2FD761E37E75A5B891C3BE38CCCD55C07FE27B9A64F24C
34AE6D981AFA1BFDC55791AC03CB1A4AE51DAC10F15AB72B76C7B5F79F1D007E
E0AA907D642ACEAB9E262AF96C3CA57AE64EA63D2C31DD998C99ADEDF0364230
5F725F768F15A747F05D74848B986DCD653EAE21244DFEE12DFC61BEBA482EE6
8F8FC51F8E2E755C31DF710131DD8E3F672150914A92B70FF994A1AB9E2BCF6E
C43D627F1E453C344DE8C371B1F5F7C1E2B32AAAEF4614688A1CE1E75622E989
4569528F7F6F8EC95832ACAB54CC1BF6601094C79D4335A04583EBBB08661239
A6D762E1ACDB190AD0BED7A6166E4EF60B3AA88CAAEB377DA1616754824A03D8
8F3257885046A11259B7D9387E5770D3C8FAA9F61FC0900BA85C181EE3183171
A8DFB54D44FA1140D98C34838F5A5D79AA529A7D9077E70D0A4C8E149F85C5D7
8C10F1967E39E72CA1E6CCDDBD63CC9C6CC3EDF51C5B6C763D9ED5CB921C6F00
FA1E5273C91D97ABE4E29EC9B3D69BFF164AA1B5C7EAA6C07060E2C1C3134652
F46E800D924D912F71806A8795FD2043EA838D21253A3230F6CC646DB74A6469
EC43138AFB08D9265C59BE8F0F1333913835DB355A6D72BB195B33D28219DC51
5A9EE0A02C994C02463C36124C894BDA73027A25310BEDDB36726091722A4087
D5347F606280DAAE380D88C7666F34272B2FEFC55461663916B5CD8103555CBA
DC16EA64BAD06F92B934B1ABEEB562D5CD93DD57A3CE696F15B6BFE51AC78BB0
34DB6FE52799562C05C2D978422B4A45C5B5CDEAF39927090995F2975F75A8CA
142B6F00DF45F902151579B7C3EBCDE896434B58D0FCFE03B3B36C4C203E0DA4
E7E5206D8DBA639FFE7F7393EDCA61BC80F5F3F0246ABB7F994BCD195E9E053C
285AEFA0C488A71EF9108264AAAC01F03A75AC1E6E69343A9F8B2DDAD2068AF9
90B3E3D98C44A7B653407522665E821D2DB427F910A356DC02EF63312FD2F4D1
13E67BD9F7F11CC259FB2C114AD2D5BEE5B387F37121BC05AC60F00C8BC2A726
8B075B698C8501EB876DCCA72F1971E69E7BBD077586A068131B131D4FD9D619
F64489B075942150670B6CC0818267A49AF91A9C1C966A395F660293915024D8
84D8AC6BDC83BCC47AFC77A31D5B63F877CAAE22B711657B19B2F762CF679941
6A436D517974F1F93C9A4CE1E85789EDC674548A8B1C8E745EFD852B1A0588E8
80EAF4F4E35EE5A493DD8F7C9E282207A6366CF96674CB48F8F33DE72DB914D6
745A8D1162B335B921FF6EBE98F99C579729DA0F94D5DFA517B377EAD04CE285
F943A44A021AB72F981B0948413AF697C07CE42243C96E27F60421DFC8880175
DB718DD842DFDD8E7D5468A9E70336CF0362265261AA02E21FF8F27A7528F5FC
7399585AF714755A4251D43D317282F1E30E3BF997636AA3DA8D69B3F89382BE
898E4CD454BC98EF7CE7245215E309344A65AC232EC252687A12DA7642ADE231
01E2B6227A72A413CBC4BADCB703BB26E26281C9AE86599D70A92F356F64644B
A29F35950EFCB5DEEB4D1861D79A444D72FADD30D3EECA36EE4B85F6547B97DB
6EDC61B1D645E452B7BF765F751E37FDFCB876C138380C2F3FFD9C3FDC1E1DB0
2C4B7D611F7A58D854C5636DB11C225E4E7F57A7CAED3A5768E4AE9D4B5DA9EE
BB46A2A565757F4C63FF17C91E41C5363BF9E1C856D206090DDDB89E532F396E
74A0686450F40434509C15A5B1C44AFA3C14ACF5E101794B694828157847C41D
D8177BA262E1007B7C5D6A5148CB005A2A3054FE2C1623E1CA4FC8AFAC9C63F8
288F9969B57A94B4F15DD151F5D3003CA45C57FDFD208EB347E6D9A2B98F883F
B839C209F7F57DC807942E3F46B2E5ECD235EF51D2AEAE06904CE00ECEACED9C
B3B80374DC73BA107ADD112128D1163D40CB1C50FEB75C9918A84E4569CBD81D
DD3D3F486C9035075761DAC54D4AFF08CD2936593C36F6673E7DEE39757EDAD7
4BFF86533B4F74A6F933F171D6AE90AB3668E0083935282216130337551809E3
C09D0C106E9CCA30F9C66CF7746C1D5D2FAE9F014852D618E1EF7518356F04EB
E70834A751A882CC3C24DB2943AA1648CCF850C5561D91F6CE4C8707C32770BC
B54A3578E73D850FDCBD5726757FB2A2059EFF5FA871E96B332329E3411391C8
E962BEBF6BDB5670930AC4BF41264856E25B5546E4AA1D472B3BC2129515E919
E4B1750BA6752D741C0C6BB069DC8DBB618ADF798D7D0AA12DABD51E62A8223F
D297490680C600559C7AED4D96D68F44E5435A57663F61086B5B671A2D56FF52
D4E6AE09F1FD1D4A9403740674E1F19024FB81D90DA9517F773B429AF413BFD9
1AC2688C5611876945F008A2C02AE5A43E5B1432CADC5FA3DEAC7EB778B89C53
BFD4EED20731133DBE93C3BC2CF41F2AE7C89112D77FA859CB259A52A77C87E9
097B9877043AA7BC6DB08FBAA52EA4A650F91662A71E782E8BFBE36ED6EA668E
AA03BFFE0B2DD9AE340F1E3487DC1E557752F03278675263517A78CAD2F87126
72A2CF1101C305140BB1FF37DD292BDB29408D23E020CD90E92AE9B021E9A0B9
19F91C54C9FC44CD6D5F51EFFEE17EC1CD3BD6ACAF439DEDAB2ECB5FD7D07B7A
B5D272A7BB4F005523FAACADBD4E6F0D1E8B56872150CBAF20C52CA00738F797
F57CF92B308EAB28398EF74E58A186F89CC27D0DDD1ECAF97D6D5F9FC565E5A9
528F114998E2FAC98A068ECB692AD093C6E21D5290EF0D44B176D7CFD951392D
0EF0EB525BEB660877743BD94B3D08E0DA7A32889BFC6E8954BD53296D8476A3
62EC904A64E69FD23965D433E08DAAB372D34EB27E9E6B7FB6DC60054CF33CB0
58F08CF00A836BB884ED9D2AA43E15F4249678CEB7DA006151D8BE90A6C61171
88CF3A340C8A03C412100B39FB4ACFE4E3B2C80215E4D806A15886A4A8875F4B
C03148FF76D7C861EA88993EDC4FDF096D703A8BE416ED9B4FFC022790813566
7580AC42C02DB7F3AAAB344444BA7F21DD5A02718B20223623DAC0DDF4EAD862
CB290F3D8B6F4DA32BC2583360FE790D2DE8142ADDE7A471E747663A3A8A96CE
15B91EC2262B8A3777E2FE41E08962C6C5C4152AA1DF195F2CD8DA7E6FA8AF84
CA08CEC051995E8D515DD89C10748CE21C24F1547A837E6D98EC5181B88CD97E
DCC881371B52B34FB58CA5ACC63D67354077B0E4E348F3572C2ACA73DE31ABDC
0C301CE27BCC1DBB832C00D6EA55796544960B560F6F5FB21673AC29EBC6907A
47F9195E6FC13CA731E25EB4B82E79668F636E8A03EACCD642F1063DD6961AF6
FBE741E8A26BA0F225C926ADD35075E97FB4F15AB3F06F5E294139D7BD5547B0
8BD653F5BCDF7803A895384BB03750296982C86C9F3F0824AE76104AB5F7B041
8DC9082263197C23B21A9E92C888564318EF9D0B467220D5F4C1253115A3E7D1
CCD929E9CA70F3AC00DCC776291A946F313729FD89414B1DA767D2B2B3CEEB50
FBC83142273DBADDFD29C8317FB7DCBC698462CA516C717F7066D3C029EC199B
881227496A7A109481F5E789C08B7AA5EF1B7ECB90D6E7EB0CD65660F24F86F8
826507AA2EADF1E951195E342347550C50B3BB24AAB4> |-
/u <1C60D8A8C9B7ECD9678CAABAC260BB7AA86BBF788D9CF16008CF23B6C4F4
18928B999C3D9507E4FB2D36A3086070ECF85A405D79BDFB92A03FD55C21067C
B252984DD88F8407E5A03EB0C9A3F669DE850F4E5511A73F64A04FC01AB51B2A
23084520A1C4CFE404B5308F148E3180DDD69B6527E35AE50A97FC606F2309CC
FA401D2AE55E5A8C353EB479842DD6A8EF4272DF485403DCAD77CF2323DFB45D
07FC9CDBAA0DB3D2993D47CCC5E52C32C9C9D24928E5E4B7FC49987073D62A51
1A2EF69AB6ADE43F79F4684153445F0FFC80B604E0679288430B70BBC9B45A0F
77250A628E681224433A54970158EF9C04E2DBA0AE74E74C446F80A5056C486F
0F7F866835D9367CCBA09A3061AE71EF14515B947C515DDA527BEEE16C29ED40
262608543DB6797597EEC4D67D487D4001088BD78CE3C5863E4C97637C17FEFD
5D388C6887E06CF1E5DE2B688CC91A3115B59BF7269642F95DEF796F23AA1284
7A10C28094E26C325AAB211276340306C274B6E6916B58180203B5405645ADB0
4D9EB7AFF733976DF210EC4998FABFCE1CEE3915D218DD53C9A445CAD56C87D3
C5D507D68A932443638EA95D5626A1542C4F44F828854519700464F583DCAA74
916CF86ECA192C32FBBDF5D1BE8C79099181798E536A8BC1ED8259226C69761D
136B8943D11A5B2739F538967244F986B0541CAFE32EBECEF9290E14966C890C
D284173C2FC78D986210CEBD6450B803EF41748AFC4ED2FE1DCD708DF55F52EA
4AFE26D4FBCD05B55585D0863E1420533C1527C48E610BD88EF869F7C7DBA943
9B4D15DC06A66F43DB1FF021D8B215E86CFDDA3A852CE08A04BB4487FBC1E3F9
EAB898EEE966430987B4CB50877DE7133D82023AE1307A28C0A27639858B4870
27D9EE4F35DB5F556A5963489A89A0B9DAA2E14BD739125C287D59EDBFD289A6
AF62AA80BBC895547C5CF51740A068D5FE552A5D5975B4CA225786F4FAFCEEF0
C72575AD2B2CD2C61D1116A8531234BFFFCD3BA8C1327F432FF7ED1B0E9E5C5C
5343ADFA9C8E2C24665E2211A14AA20C67963A6E18BDB38CF72275EEAC883941
043C947A5D3D42BF91EEB0C5138229799276AC3E329E178AEE8B798A05A9C4F5
6B303B35AB756DC2624115E81C5D0CCB4ACDF35B6EFD1B1286A366342A0BA2E9
E9A43AC83A16BC3DE940F41057408C141905E57C6025D7F4199B32F764C6B598
0ABFD0DDDFF5D6CDA2C086677092BBD488904D2DB2B7B1113F1479A0FD7AF9A1
95997AD9C200A759188E2165561A0EB1F467297C3028A35BDF2131A7AFECBA9F
11232E112B34431E80CD3884B5DDBB82C612EBA66943CEF369801FCECB8990BF
0708A1027D393B510E54F3F4F77F9697314558CDDA16018466DAF55998C0ECEF
F8B1B54EEFCEC91434EF76E5EEE68DE5B0B34B14C72E19E2933D51867E57FF83
261CE3D317E295EB0762F8939FBA179457C6FE18622D2F85B67A3846FBD1535E
856ED5203760804DE8A8922808DAB7BA75854CD2CD0C588607BE2E7A2A6282F6
51226DF895533730AD48C268A789F4B5DF21FE230A23C889C13D3D995CCA0302
5DA7FEE27622AB9D0C9C6AFF8818BA1A1400BD7E098DD4888F7C44C4C6BA9A7D
9B4BD3AEA6C0D307D2F142C140044DDD7EE6AAF60B6BA8B05CD5FCC29E19707F
50CBAC9D7EBF04D68BC48B5F4B96AF8FE53F7850EEC5EBF53369F40B5CA50274
785E684834110216E1275B70EC75CC45A4B2FF58CD0E81D52ACA70FDC0B3F501
342DF008145B4A0B2CDA96D00291B59288292FC9BF432B4CAD51808A67DC01F6
2E04B9AFDBC3EBDC2D566EDFCAEC75817B0F7175D6D99C2A3D70C07B1B98FA8F
FF8DC6F4557CE1E41383E9EBDCC3C4A99DFECF3575897110373839BB7DF4C597
F646ED1F0C498F5A0C02275AE739164F65A59069975251072D8A6D24A0948FC6
F21C470CB81573DDB26D1210EE6AF2476F361D152CD260CED56FBEB0AF48B057
81FBC6D6BDA02F8B25E9353E2A1B1F049D3A411FDF9771D031D2B100A96D2CFC
36D7F3C34AEB16E50515B546EA041284635821927060E1CB5FF8781C8BDA5474
D3B593F808820BD92B8FBE0647F1FD720E47EDA84272D39F10F1075578CF2818
0DFF20485E7D0BEFDBB4DE422DA47A277B010E471B82104FEC45CA7CA76BD3EF
4EDB2B31D5FB7BA102F418DC6DB611517C40CF6AD843072A21EFC34FEEFAB823
41B6FE1BA4DDA6B0CB215A6343E01B3B9F5718A896D45EC74B3D8D3E8C2257F9
96F677DACA0BA5D0EB4D575AC199B48FDDC52EA7EB2B> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/UDYZUN+Captureit /Captureit findfont ct_VMDictPut
/UDYZUN+Captureit*1 
[67{/.notdef}rp /C 8{/.notdef}rp /L 20{/.notdef}rp /a 2{/.notdef}rp /d 
/e /.notdef /g /.notdef /i 4{/.notdef}rp /n /o 
5{/.notdef}rp /u 138{/.notdef}rp]
UDYZUN+Captureit nf
UDYZUN+Captureit*1 [261.055 0 0 -261.055 0 0 ]msf
723.567 373.907 mo
(Cod)sh
1230.25 373.907 mo
(eLingua)
[144.039 147.099 50.4775 158.953 178.455 145.951 0 ]xsh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 ]]
] del_res
/UDYZUN+Captureit*1 uf
/UDYZUN+Captureit uf
/Captureit uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 24.0
%%AI8_CreatorVersion: 25.1.0
%%For: (Vcana12) ()
%%Title: (new.eps)
%%CreationDate: 12/2/2021 5:56 PM
%%Canvassize: 16383
%AI5_FileFormat 14.0
%AI24_DataStream
%.((`,!*DqO!8?jo.P/r(AnX7Kn5@pOP4Kq1*C1:8=/lr3e:f0FX:Q#QQLKeF2^9L<0T,B(r*H<'T`T07d[&5rC!uc"9c:5^8jd+&
%kfk:J=JEtl?hAJ+,*&L<SLoL64"i/!\f,A^\;Z56+<+K"#sV:sL!Vcqjq%oRY9K(BS57Mki2[5gLpSQ:9:'!*-*YVf$;8glI7MK:
%dZQ!j\:*/Ro"Nm-j8QQH6aDig9><J_&DbaL4Ae0"k3$&NLSZeEc?O(TH?0HCQ:P4og5aH3A=7Bmj"Wh>6VE/iph_j(Zm:N^,m_fl
%6:;a`SJfV9/Au;,2P97YfrH'#H"2D(h;$@Z\p[?a/@-YF!f6uHqGf@qhY_rENS>j0,`:+EI6=qOl)LD<.#J4c[2M"4pA4K#o<Xh.
%]mL@NS89f9s-HDM`F=M2Jjir1)2#p<bT1T=5#>'HPSb]OI),V-'m0!]Ceujr?:FXQ-'nBq>O<5+S+(t,TJ+5l0puL4pl/A[O3)rP
%%!pqtjXja?qJC3KY^!@;>0>tThe4s9Y8D/cO@$5bg,c^Z/VAaeMF$N06f9n!"t\V7cFm\s%q%ihbi7I"h>n=CKSq)CcY!Um:<=2d
%M7+[6:i:^$$gK%hHL,gE+clNY4u))TD'n%6[\22]Y8F&@gccjM-X]2Xgb%t-DHm8Z5bS*bqmY_.kC1[o;A6bn+*.ug\"%OM^5pL_
%T+NE9H>pI[,';/jF>:$76NIKME"mrSd(&hN\./=;Y_\1q2QR$id2"DCM6a!fi"tB-3J]G^RK`Ql9QY9/5UJq?QVSW2*Q9.D]q5Rl
%c&ImjF1qr/g\#F9#"mX+UDP8jo6)DD6CU4'qE?6>;[%kCRI[a&)/J[RO23\"qtLfj@8m191);+!0/7$K$gQc9bU''#!$4Bk+]6fH
%[\2?lVUg]B5t0I50hg4o6fU^5]2;B11f?mmAS=FO8nk+4?1f_KXh+?YXKfo/.oVr&<*F'cl?`G<:OCm7`!+t;NBMFa''4,ZP:\-(
%Hh_QrkLE(po:5X;Mht?jRSA6h%'i9HSj$^ldRE2Jl`DO"U,^gOP>&\qnqf6Pkenf'ECLgUK^hJI>@d9aMCUlp64+ac5R't3@>#1Q
%fH>g'no2GAk\D72jHC+gpY9PF^%EFJ*HdBX*93iQmQ'I!A+&1%C89$f9k0W.Z,-.&CTXk-.'#M41<LTf0SW:K).\dgeehoC(43d0
%o?K;@r-\>1iP0ToT)J]cB@Z+FAhe)(\`?AI!2;q;[8`kGGh#X<I9<Tp+A`JP?Q<4O5W=QHb/-K@lf('FQQh<V+l'VVn;qVG&<DY,
%7UQEuUi1u%SMQfmNc#qP#DGch+kE>`Oe+JlZ#@[H6Lc"/b]%\$+Rf8jpO5pKC#Y,(YQJ?["6XJ@"T$Y,5Nj"i#2Es_,m_`1!HfnY
%_0<ps<LVh%Xbsn7\e'_U#EYKpKWYj")4)OD$.S&p57&Ib-4m*Y%?2OS*u"dATL60h#R;+##;G$U\d,/AYp0H=U25Qj!1>`HTQ+Ja
%%i,f;TPMankj;dJ+H_F@nHTfnW[RA0QATFVAQ`E7(`F;_)q&lVY20X&_gP5,_h*F5l9h:6H=U1lAQksBg<5Ip"HN1^&nQ!p3;UT%
%?80)dU>4j:BXu\tC[GRI.76MW558tGRW$6aOoPUj&0NM6a_&Y'M.?n[H$VG$%LrsY9;4CJ*5*t,YUimQl]NZ=WJe)^Anbr&)2;Re
%,uL%`buYN&>K>9@iO<ki3H4XtUs'JtfgiuihFjTqS8iWoIA(=go%!A7DP&%u06d&BDp0kF$MDqN?#>j,<kkg6d"bXoWC%][:kh^p
%WMGYCqP^0L2Tk7472LBBl;5N@)TJ2*FJ8l.k<-dFc!emZbB]PSW=<^7VJ2E02R81CED:4No?D"kVD=BU(l)fBL7+!2,*OF:H&Q5O
%_jG'Po?98[FCm=uaild,N"aJqh/&;"T5-Wr8h(k784H?'AX$"Tl"":A\[lOMXT.E$g*Dl=;I+o,c6qGDNk.W(gcrfkjuN(9#8`Ut
%-46%1lgp(Ca:^p&5@*:^Kt810I'UKL/bmYCNa-T_X'*_g<aF$tf)#Drp?`Ni^&.QmiQ%!4Il?cFIt"ZASh\f`@u`\V=_*^j`it1T
%N&&O*He<)7[FSNU\FphWZ,nmCe!fDUg1kugEpoB2cFN,2MbZ=Q26LqZUTV2KXiFapm_&iII.GP&4Qk+Y..o1eOMM,AKJ5_!-Y+,d
%@>,4sEQ*ti[cl_/0ZGO$N(e&^'5=Q<M2;j1HS<g42MiV8:Wg/@KCRhn2VXC94Vo!#nBJmL90jodHU"!9NieXg[`EpB?\tVJAFH(Y
%F%Q(B-!$a2bsERN'[8s1Xn?El"k>+-=_uucN!mp<0<nJmO3K!N5IqY4@OX;b>V85'@Z+,>3SS@fZ/uZl8b\m*$dQg1r0LNu=XY]=
%,`:V5q3&iHSU;'m.&EGsOc=H.PuU"gc(Ag\l/nIS`[U)@b\X.4l)aKEMg:%3NCai)49dR'Oj%>QVI:I!16m-PeU59'f!sj"Y_e?U
%B%&S36^udlc#VZL:32rs*9]d\3n%N-`c7M:Th]_OB@3W92X9M$0H<=T1(a4mWL-K^l02U]5hKrSUo/tkC!.U0^A8rHPT.\R4)]_'
%egk4?!r]l?l]5@nUkg2B0k;G32+2t2L5>QKN+h\Xm)VWC9<8k2dWWT=!<XWK@_)4!V1d7XRVDK1f)!R4rWl!KI-("9%p2M46X.8D
%U<=MPbo9/0lirJ,DR`W"B[HME7RQ6/'8(jM_d[AcL8WU\f_clL$2=Os1#k_Adr$hWJH7_tUlX/hbLNY3=A6D0%;R]+(2J/u(2J0f
%1&_5DRob%XKR,rW2gK?)5nNZ""A&lNTSFX\6BHO(/s!dg8!12\j4jXW(=HD_NsUF)mVhj?k):+Y`eB4N$/'@RV99sjQSW[%%/[io
%^0587R[\hQ[g`b5^uVQ;=)7,@,-=#H2X(!$/n?b+_K8(3$PA&GYSfrfQR3^*87UiMJFMC17@]#O=be3YLtf.fBKKnsgS!GZULS1G
%MpQHeb=.6V&O+'c/;$`"DodU3D3sm<,_lL,^@R'pEfNg'd"P#QO$'Z!_?1(p>&U*M]H:BJG;LuUDY"!:La%_NB(mf1(_2m`,;+te
%"S$l^NODrP-EFqm/)fk<gC@B3BMaX\QgNuKQ4R3fB]/34n1UjFP*s8jL.-?=_OBtAGKVXMCTQG\I+epe4-hK$!6*M,5<,<r]C]-5
%73I"+#;1M/A0DeRDM7D=_dh*poK5^3,>\hJ[LjO2FSc2lH1.'TBL>lh=Lcm#G6l[Z66c@t>Bdbg;6MX613Pnl(Xb6<&:Af6&^*2@
%,RON$_0oF6UTG>MZupgk5bK#6o<)1p!X=5qD$LIf+L!*uK3AnAhk'A5huL`B`>4Yojr?kA7"Obhj!;e=\>MLW@1QSgHCju_>%sh`
%WD.4Z;eJgh=_3RM<Z$QlW,l-/N]Dd>N!KCd!&+Ee&n!CQ*#bf6`F;u4Hj:>#^dS@q:ack[L4Q!7'F"^A!&+BQ?iZ-o!!#:rKZH+]
%6qCdh!(s^s%70r4gr3X6/(=%\V'2!6@[d0G^*/q;r>HBpG!]Ehfb_!bfT^Q[KJ#u+_S%FukpJ&<G6#,t16h2dA(Tg'8uVa*1pEi/
%<0[c<0Cu>ZdB'YE"\FGs-`ZU_(ln_R[od"qVeek33Z"?r:nO5;_^&bVC/E$p?hsCC)"ek018&"T6deM(B2G-C@3-KL*;CtLG:*sN
%\:+i07a.dhoH+-(9Ur^f$9VfFD,GH4)B!sA1bjtJ`9"R'DK..d2-ulI#TE[DkTR4_Xk0!i[7>jQeYGj@)Aj5JUgAHVd$9@(D\k!B
%b10i+&KV:3dPtPuIs"Q"[TMYdaGftt>08J7/2(@2$TQR7"12nL0/?N>MiGc%$YlDAn/=&l)"Jmri?e=.#r<_i])`t+Ed5quk516-
%El8Aj">oSk7nb$_)4L9o8YtUXd5;R#OQ98XlelGnLuO3-IRn5b-u95nl3$HJ.E&6WcMhqDoKQ.eO9)G+$8O"\dOV_2l<\:2TS9]t
%QWVs1&eO?'XJR$4:lE6m4mDfrL,0k$PVpP"iXKJ8W:e-J]H>hqZ5/1%isrqJad:Ah*FAS2m[I@(Q]0(^ZC_L`d)h#g4=cjeKoL3_
%G6W;Ea#gh,4]iNe%jK^!qZ5AJUh]0&c9^H#djO9;9^At["%%Z>b9D01BTt?N@qGOf&Fq`5Qh_@D-ihHn*HD@Cc.<\)Wf)-k?Pq%M
%`U3tJ:tu,$0JHHXb0!nj2/%Qi;)qTL'*^^F0LO40.!\Y&]TNL@*Y!P$l>09_"#$<qWS`]?b14IEO+beX+n5'b12#s(G,].JI&Tk#
%5Yp+6HX<M0gStrSoTonKl?s?eb1)F;=koMS=,<gjS?O4#Jqft;.5GsNCmB>=cr:Gl'j5YRie#nj@D+Skrs,Rl@HI&rX5pQiA9$g*
%(7e1m[,k$qLn+lmY8X>_B%VYM]7*:-FCCj+1R-P;mRO_r(9[SNc0F[lkP(k9/^Tlo@r7=XP/L-;k:@Nc3QB`a3sms?,74-'0>>QU
%f,4J+AgS$3,lge>`Dhh+:+B:rJj`%/Z:9]m@&?Y6L?9U+F&ZGB$L)mIgH[&E=7p+aMYi[E;N.i]OFu:3=k9/eqfrR[8ea)/7e;BM
%5`l+TReiO<+^uB>D[IgRTC+J0`6%JA)TEeRW?c$bi>!)6)KlPcJ7r"DV%Cu73FKp3o+FMrVOo'e8q@<=f#Y2/[!$+4,%s`oB?SM6
%2&H+;@s6i-L20aU8UCr,nPe,NDeWe:o$oE?gQKu#ggp'a1.0d(QqPEVog:Gj0r0Bm]=VQ(RSZK7:$VHZD.+GXBUjC?Z55^f1Ape;
%!'aIMbG]TYJl^7QE'1`/H4*oJXNA'odq$m=(;:dG2DfrX#OHD6B5!'k\Cm)s^ns&<IA+_p7Es@EnWe[05V.tZCo>CBHIZ1N0H2SA
%&/i>N*q6B>Ts8RP*)gFucr\U!9#oNX"X30>d8Daa"F38=s'Tsq4^L8/Z'#l@":WABoFK#%!U2m@-?s&<NF;&hfU]m;<(uj:clUT<
%+Z^"1X0d7I1$>>p64B*c#ZaL_,nr)3/CNHs'dcQsGVWL-A768!@OAf,K'$2:iILa[gU]'IHj=`jBb[-o7rP`QO'<Cd#A:rI[Uri+
%2tbGg/+R\Ri8.9n_]G7%f;019\8Vr#SH5q590>US9uA?P^=le@Au*gel3/4&hYM"GR7RjjISb?RA4Bd'n9>4>O[F^I(Xb:/P6q1C
%/6;r`g,8D*UaT'48^J7;J370h$/h,&(>%M7P[@"AZsdU:>AO<6HBG0A*,hL?mt7CS[M`OgjX#_U!;&]@P74-,qMljNVUbQu]2BZi
%PXobTAI"A%`$`=??F/q#)CdWK40cF3'gSXtU.qXZ9X5pmbTe:4+`a&H-`/$3??SD@EERei_!Hnqj@\hZR^qq_/DjlAI-u4b\%YK[
%UGEI]&@%oZX*8Ai)g9?7m9KL]I-iBeJChiA!<"A#Dma7qB&t(tZ?8gF?J3)h%+#"/<XFl0PSl6-h&sgkEcs=%_SnUBb"2OeJ)T:p
%aU$c,I3aXREQ&oD>T0(/9>)WF5Hmq7R2]ah^QC)Kh2KoJa$?ZYBIIV$&nW^M#D0bFqd>)1=UXs[/Jfdc>O4$+4!P,P5(k?hrU5W^
%%l$Ar!B+U$/MeP%EUa/!'pQ0-k)]ngc@T?o.tlC!m/*iKNhV<l21^+sZdWM"6M1Tn#.<Z);Q$q)-r,%f_ui/aW$4^p.M(>!mFoS_
%+&ES/,Dnl*VPQ[N^a[R"7sMuImS1M9cAm>\/h4e*A#)VfT=-2U(FCEu!1I;"$`T?ZT0co>@C6dm)8,__cm@7Q<![&Q5+.2>aA*/s
%>2k,2+hka*&5ZNt\)ONJ34Y5q6T+R\l2Ee,6V]QjoMT@->^A`7."sVo.[LspVB'3V&3mts<8TMGlkD@DlT:8:L4gHMjX4nVFnUTc
%gEQVfL_&l%`8[8E]@,IMcSs0hd$dn]69)qtWV'Lm7Ha;`Fu&fRP76P^,ALUcZ-J^CmUFUJ_$Jp-(s]Q]MTWVDI"8\I1eAfFGt'*0
%JOt*F7^SF"'J5[9PW`#GmEn;^LD<6:57B7$C^D<()9@RM&"d!46e#NOg1H1g&)'Dh2/YVD2CFUjLLl<WQ=NGe3&UVm^`uMDCknUZ
%lhkg#dG7sg:a\VsT5-548[!7spCWFKFOf"4\?.RSjQA3F-`DZ_N[QVRD#%gs[su-9cO0E-*'e_%WLmQ\[Iq.eEPQsnrHW:4I@cP/
%>'Ypr,=p#"lc.9d2P-gBZfB96pT,C#U_Hr@X-FZ;s!AJ3%5i]uL0Ea7Ac?(0X\bC+cYT8<jCT&K&R#4agrnp#G6eX8/eM>g?NuV3
%2,TZb=Kf.mTojK5*^^Rg>'lUiOH8SHSR&&64(fTf_NWbkf`k&FLu5H'!6d.W?UgXYn2(UCIk`i\8l1Rq]\@.:bJng'M9h0;6'ij5
%dfjG_Jq8+sp:C<9[(RV,1%cO6km)@BiO/F!6u\V+XT)Nd(T8Y@Q!!M$(72s)F)^YOSj_Q'kuuprZmfPcI-XEf20]8YD>k]+UJF1P
%M\h+%A?hCg^]A9`<lM:u2<8"nDUS\Kg_H"(E@P60CTm)<FBb]-2N%UF5^P[PoL:gB8brdUZKN&b`$;Va,==sH(ka;qTLt/e!12(=
%&dP6[\+W(l5=$FOH'\]!DrdNp2FNmd+)=Pk/(#N@.sZ!_q*9Y.hMr`>:hHgLFSn2>!A[9uTUgd8(*RdC<G7aem*mflOlW_)"m0AT
%PV%fs8Q=lbSr7M#.6[bd?(@"1%?JT>NNcHFfSp0RBk3K'crE$2&gN/G@S!OR'T0YSpg8#Gq'nFo^-MXLPBiWCeMs9oUN09RW-VG/
%MkF8DYP:s`O$O8\"ed[$#!)o4+b??)N`jLrE!7S1,C!BiA5k[O;[SXK('pmJoDui8:o-DtO=*t[/![KP6`psbL'oZr5)_0!`-L!E
%9,3Rd)AIa)Ag3Hkg@W#6f3V-`E-ii)I?d:><8XYd:6,uIghY8m'UXVmY'1QP&qR$$,B"X*OG0f&+mi\TBqKiNAu/k!&TUCB6pNDr
%]2r0\4\]JMVid]CLC/\PENE<S//?bCBdC_JMgm1=DgH1IdTQ<G`:-,mj:k539-C@T2a4q78ieV4W?b#CEaGS@f%&=2DI@+]Zn@%^
%?[;d+3pf1ER02ni?L'bUD`\JCYquRu&V:F%22-C)YpfVX@Y\G=BWRXup]V@J2d@2Z9$!YH;C*4!R?JSq1U.)I20/r=6EB)7&8"@n
%AOjZ<)EiSWRc].:4s)oGAL5S%SjbbOl$qSc?-s$'ek(GZ\L:N=,ib3]CUkAG3$)I:5"ZlX<nb4n6@\rn3u(>1@W8ep2%_P3"T;,/
%pAoMXTl8"%@SGH!mH8^]X!ghNOC\!q$A]Q5<GXK:%KQj0Ef9(MW+E@Kh1\Fph'WSApSA'S*KFDXWdr^aa5Xncqm8ud*3#'(+ie'r
%a5A4RL[Z#lNf7YjfA/14ZdEsBH<$d[Un<ESB%mS(DL#R&A`d=1&P!Tn[i$OUMN'`jI0qBppDlqJ)/Fpp9u/:@M=7!o@sB>hP7k22
%K%c`_Tl6*">Jdkj4;BJ(RG>Y2cp!'XIpO7SMK&5Ig]<\L7s$[K_e7h0#ef^jFEb]*j>(.a4A7S(hr8[:Bt:sr5bO<&RKs8:4sN*6
%NjmVoaq=1i9`6WiMp"KQcsC\4':QTVK<m]Qishl?W7jhZTrk^fX%6H:pV\"aEZ*fH-6sc'Ljj)\-#uuj!%]d>d`F>.WJ,eX305`K
%6GXA/-a]HHg.sT-2[*AtSM)R1:KA&-!91rT_i>-`^diB+YE]043L,Zm#BE;cMG5&=R6%/I:Gs6S?UHY:84ike"4.TE-c8/k?/];"
%bo5<c"]D7S`/N0L?Jaq/4U$*g5nep44gaVO#MnaX64L\7h&SV;Hf='(gPE\]1X^%-.YK3_N!RK*$FEo%bDq8%HZNZi8eZLXKN@_b
%l^?MIo*uWSLjgk7GE1UC.]j'7KW[^ZV*cE?BLDi3VkHiEeeW-b6,+#iT]@`p)$&lMjSF"GUtYE;"Au;Pg*4Pdm7qufG/FXHY#g-;
%6UNt7[;p-9"8DlIa[%_>ZkQ-D;1d7EMFUM<R_O`nN[9BsKZ+W%pKDe6\od$L?=,'LQ);%PG6\l[Eh/n+!;I%::$Pg#Y:"sNE$1F2
%Ag"gS?>uca,D1Jpm=kM<oC;aN?6,Yf)a1lI$s!<ELRDKjs*;o$c^jh_J_A,[<["o#j*QO-\YpRc'l\"6GGHI0L#;I=/[?LR-S0W6
%[K(jhbfB`)[/:E;a"5&18fc%qmos=7)['2Z>"7$TR'pP2:A9TcgrZ;LbPH73;5lEo4ghG8<ZIC2W[a8YpY"'NXIkR'.F4:Z/c%=#
%(nZDY624'5a5qOjPmJe<27W!U_-6W<q9X%kM8llLRsnM-EbB'-*2>@eQ`-3\c/-a0&l-D^2*@o=&gRE]hE#NuD$LlkTU$3Ym)mbQ
%'U$A53Z/7bET$%,^f&W1&"$0j^c`YR4(@H-(F!N]1LG5T?_UDdScO]b%555Y:a,#S:m6&"?55aq7mIc"U"6b<0KCnbN4P\oH0k.>
%ONl-/IR<o#1j@o3;5X&oK2+SFDQoPmKBN%]O_8A)!N;`,=k4]Cc-#0=/ps@Ub(5$*DE&L=OGJXZ[,7\INuBgFr:iu,$;plV.>?*d
%TPjiq(^&m`H)Fum'C#m8NLtcM`J/%h3/Vqn&+=uQCKH]*EN^R,_2J@rC0u>mIS-,3#A.8raBg@a\VNGbjZmmuW3l1Hpe48i\=ET2
%!j7]?@QhY08L0%0J:#C;7Y#aB_(s(ZqnNnfl%]DK:UG3Cb<S),8d^kRnX]oKo*='fk:`-R784MfTY[]dJ'o^FFsrG3T%-m06PAZO
%!q:@9MC%'mR+nkHOM@Icd;jCNCc>?mW\S*CWuW)p^*9'pL2ob*f[^:hQ$_g_caAL6aK`&1*mH8rp&#-D_Qs:aE7O<4:p,_5BrUtS
%kR),/"HFLV;%P%8!!7Bd!9!n7(N!H;^<3T6$c.e,7S:lu=@R[U7O/%cOoPK4V@_8hL_*u![S<-2m[+XRjth2`Fe2-kPgKBOJsA]>
%]gP,T$;3S70Vu.U)bVb/,&6Ci+B+AZBOE%7bC$7fY<h2b.Mr_YEp,kgMi9u:LP-F&7R@mfUi'f]F(dEF>An874Ct.k9LG&OG5BQp
%A\iniA<BPfR4=c3KLuS0H=UEYN$Vp=Ki1k\2%;5^5U]SJAStjr^l"9^6_>''+L"sE_%8ACVpRqYLiPl"!XjhiC(8-_pl0-]JLP8P
%/=D=)7S0TcZ8Ip`0TM4AYuR=I<9;=l/dU%'6*^)-XS0k0UtYXW/1^!SH^%o'J;T:4Rn6i\Omdm<6R$:g[#%K'8OB%KZ^+,s<I-rI
%*_o'hdk/'f$)UGQmM\]5s.-BLe#?Eg8`t]A)@G,,QD`I!bW-pq:':Hmg86$Ml'kCYCd&bL\0^1hM%`@_$sb#eJcS.C2Hl%h>En5S
%B"C'c*o[!RkTlco'2!1(Pj<>O@'QG*W_=-FP[tjYUdpf'NPL'061QNF1KUr<CA`2%h8tI!L^2u$20C4eK[S7[Pfplldj?qK[WTI<
%Gu7D;`2>[+]V'cU6#7"L<Y\B9."t3._M0hS;2H3)6C=%1FDN7b)8a^=Epr9Ql.Gj$rJQ9SQ#Bhg^js4CZDE:Dk,Q?>1``P=0m//d
%8&7ZUfN3_?q%Id>:4:/[aUQD'WB@Us:csC6=^/&jMWbj[X*6J9#Do34Xu'7I@q8uB$'$&(:b?)(O>(&aESXna)M/"+N0R6r$C(o,
%q8ohA_q%D`?pK7*JR6d4)UcrS&+(4Xg.j=E?rT<.G"ISA[Kbj0RTr]<%I!.fNe,GrnK;jC>W^!#a<Ap-\uXWa8!MAAmc7Lr"9X7C
%+]M<G^-b02:F+mRK^rLQ?nEegI'Z,A*LJMj8K#seUIaS\EuRI5`5-u^jB\+Xg$M4DgC;`\+,&7q<<T\.NE?Dp$_aGp@`1L#Laj1@
%7Dm-3RSCSJJ5A>tS-tP.*S7GpC'+l;XR$5"nYDgla#>qUJp/I\O*\p\8eX&t((W)A5af(pjK0G__@dQ_'jK5tO4?6V/2dZti%+,>
%FW63IX/At^:f<.rUENjE3@.O$A#6/1:R'C=6^T3b:,$VR"9X7<XjTKER7$$Y+nUhMPn"WBY[SrTe/Am_2GQs)Ci\HI6>6hpSk+GV
%>>`?E!s4_s`.3pj+Un74AIJHM\.u7T.g']Ea7oaM',E$)AN=J(#)^3H!&`\?:NVhZ<`'mk#a.?U(%\FnAI0MC64lP1KOTi0@+Cn.
%`%OVuCS1qA#YlER-FKd%4tYua,/1.N9<(ZMU6hW+kZ^QJE)KsIAQ_A+kn,7+3Ui9;2T1sh.6#EY8jslX-[f,IWJb.b1:CRe8pu7b
%0H^WSKj%:*bfN_V''FjepaTl5[*B][/g2nk-nm-I&LI?9g*'=HAet7D4hHdE([YV<?jd/A[Cmk;%PnHg3D;H&?t?N<MG)8:5^J)<
%EV.Eb-aCqr5uB<Y?mQg`>5/LHPtWA2#T++le5(g35_$*q49Pfi!k*f5!<N#s3Fk)\,U//J4<dt>[KE>)FNT@(eW7qMF\E@)*R[nJ
%ARpBpUmXfd_182r1SF2%-(C1Y96JLM=<%_T*goU3.Cg+MIo_:W=iM]RWbCMJ'6L]"%2#^IgVYh?5ESB8Y-&*<%L*&LA:dqM8Ak+8
%aDNXL>nmuWP*r\(Z77+ZV=5@K.U'CV7oSZ:UMD+u'srd"U/6g$.dDpd"XTTK:*E8Tb(F8)0UO`Y.;e>TJQZ$@LIRck,R[GKJ<1g\
%rt%"<P\-VRj=+pqj:tipi3q]-'K)D1;7u3m?CZLBAm^//ZCfYjNNEE(%d>_^NhHkQ=C=CE".:jBW0i!*o'fE,MX+.#CnL>"JQ^RJ
%!G-4e#$pUb3Hpfd>&&Eeb;\pBP"SYop](DJP/jB&XsGofaC%^jrKTa/76kPHH>.rY)iQY`M@=/sDa!ZQUh#h@"VPQHSl(pNPW&2H
%BY9@_Kok45'][YQg*?mG(<;/OK]hS<jP"l&^Zu7S2.F/O,W>>SOl,g8C[K8i9;Dn!";!nuU7NKqq3)rYVRE?@Cr4%oR'"V+Cr0r:
%'dpuUF<K$a""^L/q.L&?/]M:-=D=7E5WZ)T`::Gh*nj%CIK"&Ga;GQUH[^,e:"5;55S0rOIc62XX5/.0V1UehOMJ#[dWBi`C;XDc
%\nrsUfKhh/(_E?JUW;YQeSq3A(R-#j]GVl,)Ph$^`tJ)D,1TQ#=VNP435PTNj<1+(_W@I*7KLJ/fMm\rRort_,-;L>"T,)m0WE2/
%$j_$ILJlBtcq3EP/<lm1[IWgC>[K'&>aM2&N3P5K=@;='i1E1NOl)G3Wh1Zrd3J9*#\'he.d7OkQ%OgZeKt:YGX+e2=_-V%$AsSL
%[#64GDW85r=\LL`dc80<+__h(1`-d7@&$6%JrLi1YD@WN5(t(oGdue6+fMip^da9TW2Z^D2^CB/-[c[9ThPfMO+sb?LdP/F(N5sS
%UIVhG-RDC[.*Dr%"L:6.'GBA5R7P,Pl..;#lFUFH+I\:P-13ad2.4"Zb4e_ilY@bQf%4fh_JOS;BogAG=jeFl><+`$ORRF<iDPMI
%jS3+Jct=/M,QT&O6Ce.A8U%-fAfN"f9nckRZpq)]MbA9DH^9Lc65nf<6>Q#Tjd6W4,?1pp-`lMcObBjU7L]eI9HO`[3L_-Rr^D*d
%Lk$-I#^.o2KHi09Bd(9&W1O6*=`oI[L@@gDR`L/COq*V07$lT1e^3$JE]0=uC91:<8Si-5;T73-LXfkMJ05&3&aU!4XPlm<)\Nli
%HUq+qOZ3ZD.?nIE`m1mJ]'.cR"pC`S/O1TsaHbQn4rV^YO<p/Jn1@p":8Fls=QfBW2F)F;)h`-]ARl$C>[Jn42?CMP6^$t=AEnQ!
%^PkM]"p?0ka:^MBGXrP.arr4tKkq3#AZZ7a\Ns03.;\h6`=gE=Q"`WW%GH[b%Do#B7)'k&/o>Vo/3`duiFIr$Xc4VVK4F,37EKZl
%+J_M`12nE_#_QLQl:m1J!_PtdiMkk<Gm/.QPF5]<#gYf[\J*-B451-Ul+f8\6eZ4Y)/%n0i8,CmcX&:8f"eH\Q+8g]kHl(C`k=(L
%m(2-MQ-T9Y@Mf)dSDN1kNF<b9V?t%tgCM3<'-#38\Sf#^kagQ)`P$+?FuAfZ&\oBaYDj;1J/buTo1b_1cRZVNTM:nt*P4"q4+hd<
%(;E6W!+9%@\+=-6%/+"QkLj+qMR.Q5lci`tfmD+_\X`!14'2Kcc#[Tj#L=IXI<"*R(-i:T$^ujG\M>%_2Uc';LP%a[CWgub=9,NU
%M`d,-4#kiU?152K@NNhfA2p"XY3b-()#uePoA80e]s6n:niI4&BG_]hi)Kbph!SA4C1QdG>@*`Pf`682,M,SWAN-t`Y:TP2Ec)lV
%[*2Qb2Rl,Djd0mYb$rs4\Lf80(;$"S/Io&<[Bm=gojW/YZWU+\=f,cC)U>(8A+<4C3e_g8ZYZ]$BV(08Blf<p\_tY6Q8k!'!mP=9
%a-,Cp!l,]S\FKFLBJWQ3`IVXSc$24:kJ9.Hr(OaCbr1.3>T>>jHK3k]2reS3fo2]F0&%r;A2O+9!C2Tb3Vg)9i0W`:d9NnfKO5R5
%1qI"VB7"(V%@53!Ejf-%YKX]-EpdeA\O75R+@$pY0)adC[b(uJi_5hIE53I2d9`61Mr@d.bIP(V'd35(i1(eA?=I_t^#8RKG@E*-
%ca]=]b5l'sQD<,B+tS2"Yo#U<Z7+nup_<c6^Vj@WA-09Si`OD.^ufZWmqd`tS,C::)uL?13&cKMQ^5Up#`E%GRdDE`![*$gg>"91
%QS%CSal88;\[!#!b./=+(Set-3%*Qh!dKQ$LI2+d;BG1q?$PA>?BQ[f6kKLpHH@?^Ib@+L(V;Yq99aM,f/r#+ipGjiDX_Gr6ok"]
%0?g!/U7?jmEA"`8(u&BfMjn!V9U'V/!:[</j';!eJ/5>[!*gT3`R//`MV,a]Zrr($YF>tJcFDMUAb_OC`EWCLRnKj=A1nFaEUZVc
%F#][?atYF_j';!ujoPPJ:cp^lZaeqO2reT@/'"gnDu@a_S'=C[>am66X3'+.K3t>\%N%^hV:eb-2WI]]P'UJj3$,"c!HC4plLE8C
%bb/&<g?dO"cgWb$I_DC[Q8ppHQ8=O:kMfPC37l7m4L*SrM<u&9c$0;WBf:1unROW5Bh;U!c1Pa+cMcL\b&B0;]X/8RrfVJpm@D2P
%bhq7K[QdEQ,Y^:rYlT)X3(mu*0Pk7Rbs/\jhFVp.Y0.K/&XTa]"4Le!lil=Tj_jS2bL(.0!5.p9K4CM0Q;iU6c"%a<*M(sWG59B#
%KS*uZr/PU%*G\5^>1=b,&N1LZI:"Tga5.4b#Cp9(e2d57bgZ2!*'=3QL+E2@aR^q*Baj/+5T/`$D+/[Z28h_#m*0eT?aTL6\_PPY
%F#Q#O"_ZoH'#-6Jnq,KHXk6qk_K4(CU7$u6ah].Qqq>$&[`c?+S*PZCX_32-(5s$<gN273c,&qGS,GEj=dInkcd0eeeHeFKC`H-<
%BenI0GUtNkpqS'-qr+SE,VmU]lnr/4l&'0Z=hZ6#h'L1!^&DQPB+3qnmip1Ug6p'd`c%8(n)2n-`ms3WDVfBGduruKHSAVSF)s+^
%NG%^eUtk#VpTMj']sDL,AX_fLmII^K]D"P!bJ>4fQ+8socHYR@Atuol3<4!=HNf5=q3BjIj2E\>S\;]gWQMj?BWtQj6I96rIWKDP
%4"[E:Md=sma0'VidK+%O43R'4KBHP*=]0q9OD-W)c2Ct4h4$sY_9*Y@afu;(OeXr1Amk(C;tUHIR*=aGS%6B,%(lAhq_*08aXqha
%\H"PN-MJeMHb%,%oK3+3p\g%(RLK6OH.-$i$]83jhV&@Gm2J12],,\4Yq#fI`Yf=mJ;0#hh#cN[meYXX2cjl&Yj`V`O9MpTH%&&_
%c/mA_<rdGf@IF'M=<NQQ@"Ac*A:Xc441jfMEg"a(/YdIjJla<B#RCV_\N91A^G`P'_bkS\qJ:*)E]4n-2;<:lls3Jl2ZT's+OE1m
%E(c[=;1!_TVtXDbUb9jYahGmGjC\3\P9e9Kq)8'"qYX^M?HLC:cgSP"9<Cia#6Z$9NQ/gp\5r[Q.uOt1%>NE\gGU"1SS:/&%\E/M
%FuuH8&3)euJa`^B0-GcK"J:jT"Y``Q:nG\UgB2u8]`:iT(Jb8=![r?JCVX7Y%):ZF$u\Tgk1KH5KB!jAU<0QAHatrRk+]u)d?sEB
%1j:j/iHA`-hV?B>,p6a;Ph?4JJ0!D'*Y-2dLk)/Wi;`l<0Om?j^GZ,:TK,bC^.YX\\*opgN.$$KoU_[\)sb,fq^+u)F,tZQCVN##
%5QJ]!=Jk:.`n>,4LHN>bdMlW)*W50.CL]LO+CKGNdH1eOn\dHNEGtI^nI(78?MqrNS?)0R"p9UTYk5B"TGN-&@i5]08W7a"H5*%D
%&hkH4&CuR=%2TgtOgUZUf83d;,CaMB2W2@D-9ajn`\If5ACOkZ)'9\,X<l-N"#Y8\-cT>HDap3J^@S^'I#f0aI\4O!p`Pinph'O.
%$+ZuIM'So;)tqPP8am'VX\%MM],:p_Q"q0gF4r@\eg?efE@?$^KYQWrn9"Q*Dg#(HBT!NI2):N?KF'F!*G^2i(F4^='[!VT.lJ#L
%;7!l=F.:;6&)%Z.7AZE=HjVi-MQ)Q-EE?`]aVmIY[dBf8a_k(bRtW4!#n;M&\kI\VJL<2J4K_?mgC7@8b%e8]-6U2XTo.um3+e<G
%[%<_HWpu1mUZD$H,RU=V[EaYr8$TLK1lP[C'b)@T471Bo*Q_t-'O65dBgtO*A*E,h=ZI<13$si4F$,5<"SJ2"*dJJSj3%_1;3R$B
%0'#BueCl^eWcKT:*M2-W4@lU]8)<?2,TJ]#W(5Gf&sb,1L&o+1J2ajE-$?FWRk:bU?lMj?HbgTEak^rSm^/d./:P:q@"A=Z3e0!j
%-KMU7Yi:d;Pf0cX^Ne[?832g?9H=r]>eUcp[90(sNkj%)pHW"?R+*W&GS\I+%+4)CQeDZOmVj?[\-pJ][i=NS\Y6L\i:cT0a_#iI
%&"B$rODAF=NbU8;iN,<rZ<Y0s9S!6rYKdXY"+imPK;5+Y+qMq\8<L8=Y1[E^gXqoSE1T8j@(@Uo)*f10V=Q>*P#s<E/!2frQ`ebH
%+32=nW[C@#p%h"h$.S/CMtP6q$]lr(bdCj:(M_-d(Dm^Bk)K35\.l3K1P1TkS^,:7noQEE(Y"S;>gc.UEDnJ__0sS,<NEQJPLe#G
%-<fB0oO=()@:<#$,*=0LPdFHWoPmobmuja"(4oO(O@Q*e2)YpZ(_@NPeYb`TY#O[S""1):"\GLdf*[79aZ9X&OCK5p8Pj:P\?Q=1
%,+2To'Vi4ralFk8aX'ieVR"PU9eT48<cT<L:+8G.q'?@dMb+#t4HW#d=\8_t!YV:U8-'DlCns@0RaHkkr2A```?L?GF:pGb-riYP
%]bDYlCmKc7LdicaLkNuKQl:@G>_99`\NXL2&fKO<F:iA-T?(]+5%R!?Hus!hHkJZ&H,+q17%>7C!+nsO/uJJ-o4hl[G,^:o6Z?\N
%F/VrXSAfAric)S73=](7En8b#[b23SBnN/XF>K,GiT>3[!?+]HKesI.L2'38:1s]*UKL'K*^CSs+Ab'+Otjp&+u@[T1X,*t+3\D@
%Jm`+'#D#1udHmTrKg:udn=l6Yh^'mpHNmS!09jNjO@Z/_'GFYPA2_E/Jl63W8hKJ4PmQU&PrKB@>0RFS[9u62DA&7YAMSW@8Mn.^
%SiJE(<-pRj3?'!?*'cQhVON0,8\^LGP#.MqKn^L8$:rXgXm(e?>"+Qp=lg*j>[b6B@3)bYf]4g6TF%(Gl(fgfiWKYq_H37+$*Cd:
%A"CN9\"2\]")<mL3cbf4BoF;^V(r^CP1!0E:MZu\Qf`$AR,e>]+N^=DWFTg*UZ?N<EF`@ZDPWK<E?_E-K19Sh"s[Tud;gWP&<rUs
%$ahB:)cYp&+_ZgK(MNQ0*!B1WYop6<]7D58$5>6M72V-;.AhG;;Ps>q]Om]>/RTcJGQL2r8D9UTLC4FNaJd[O6U%TPK5E!3"1DVF
%%PT#-+X(#62g\8Y2DVd!^&cu%GYBq_A+;6oVlK6pcGtn'3HHEtH?Ltq5IlG73!1ECR^mF2-^.LW(c,6m4A6AX__>"*9J.'!$nH*5
%*L.qpW\)&;J;#;pnrkLkBeZ*hDaW/^T*>(E5%mpK?YOBK7oY3%Q\pLBCDl0o':_q\_9&MGK9C?Q=]#R?>j*pl(JHJB(DJ09&=P5I
%TmT,HE&*J"(_C?jBgA,m9L+pY:0#'-AZ(GiIaVF,nol'e:%SN2UZ3ZaL%/2CPdkEb_/L=s7X96/E1YL"+<P_U\.)6BC\&/SD2i]j
%H^4Xtp6aM!%0cqQKE^-gL'FQ(pUE%oQ&RVo1LE!)qM;9d6sW#T"@B_$*SooiL"NoHLe_HP)k:nJfhFq3J=31uo3mT=IMn)&gr1U@
%6l8uV4>J.DKG\,c0H_cb1Podd)8<%8WM-7dZ5mHK&Shda.Fho"PTMX<QjpqUkr't8AMd"KLk6%)/VG&s82]"960YN'U3BS6"[RTW
%(,T'h/5S%\Z.N/\^/,+e_u^>Qb0OH*78jj2K(?\dj-#-2g=F4iN9Sn3\crm>aF[,-WaprSLgn3,!i;XA'IhYr;QO3WUi9ap8+@@@
%78Y9[&VY+&I0BX_&/CmV"Von$kn7Ah&.,&;"Qk>@$.@m49#,1N-R#\)2Bg5D8-7%Hb![VIN/?/e*YJR63[;@>D2:mR!^jWU<!m%6
%iBdfl%5is)K;B]&1B<#?r:;.*B1t^@&G1JQ"+l?)2BQ%ebj>t1IdE_qm8eu^JjqdhcrB0."*#js'#pl*Pf)N@LoM&4.#fn?^`^aR
%""D(=)+;o11SFXr1QXH\)I0E-A:Q3>+TnlJdMO[5h\s:\!0P\T#1W&t%$!VF)KIchB^ifP#6X5-5/Zb&bCQ3".ffLS!#VZ8fiDKp
%*gf3L=G"<k"JZ!1SllGQ@Tiq4_r^uSl23i;]@gTWYRA:kVIT\CJ,llrI%]-;\\_*ZeI"*k-<<AD)K)6))H2?u+d*0DH1<>.;Q)#u
%dU"@Bp,XXM3=K*<Yu55n-Mi*5!9;F[=h>"KZH;*&Lda:UJh/e#K\>F=,Cfe\!/:^iDBRV*Lu"(a)!"F,iK,1L#Rj6hLd68a*<N$+
%aq.YaWXq.Vbt9r!HmFB4U\,bNm`d#1h;AU:WGb,bK,=`SMj>L0,,BcdLd;-[(EMW=(_Bfn:2Z`I&T.]A8OOM:M^(-Yn=+4/qEV-u
%^m:i%%Tf,(U!YD0i&nHoJCM@o"&:/-);$JibCIO4fE(1lRgaD9=>G-2#BZ'E2&l_:@:Kd"N;u0C"+m"SpOU64kWoT@)$:nIKEG(c
%L):a5WaVPtF+hBT[=!T6?d,.&o[8/iaFQRHWH%ebg/.ZY(S6$m'GgQQ\J"62I7CAXiBs_#Ab3";;H-8:?pHDuYYH9O!LLMd^i&e$
%8m:kL)@Pc(V(U),q1d1]#U>h""hL*Th(^T*+igj8W>o%9,e=K_'k.:,@hDP$DcJXD0AJP/-\I@%+6S6M?V*"<4tn+H?SBI/qF$=H
%6F,e+2%oM==hFT4KZ3sD%tjnrB\1#99^(A<b5:dPDYf"4AE0"a\AU%NP%&g6eS+KP"&J]K%ZKD"6'T<CZ:,=3WuHg)$j\s#@edZ?
%$%B%=(V\/*+FFW`@IP/Kn,#AipO*.2Z@jb8D%+i75asHZ-%+VEW=[qeKC;a/%E54qD%b_kV+;$/n,)6?jSL8YjnhTsqL&AZf\jBT
%7`*3u$,SX:!$QYU2&^W).G%uP#oW8.gDHieiU#<M;E1u_V&.J9qZ[m&Fh0hV;nGbEYeVe?b&]>f0L-FH@g!Glh(?!l_PtTlLISXJ
%[uq/0Qr.F)-V>8=hc3'C[h9)TAseN8BjAf*7`,aXWJpugnCeWRhlmtj=M>t?aj+QJ@A<mt9h$e[ru;FD@!=C$QKi2h(`3g'"rL_J
%Q"JH9(9g8&D>f^Q.S?pr!i_l/\C/Je";h[Y0E=Z].B4NmqkTjJ8StrH8Tcfjnu1ZjEqhg6kPIG5@mI)Chm^HB^+[27^2F!*+CKo\
%pMgCjn*=uP<)^_'M=2BkJ,oik!"9-"oHoD&3Pth!I.jM8)lUWr2;PS/fgeTN>c-nh^;I%N7_qMj+ZKo;=/ZfKP]`\,_\gq,Lh+)a
%ma_V)clj3:QM[RE!(7QkYW)SL&q@p()-?e4I@lGETe-U=Ul4+:9A,9mqdd]:>^\_hAD2_-IG_M:I,EO726d#f^@05o^@,:%ih6MX
%Je03tI:"OuA#>='pO*.^pO0U?1"04aFUC]"&Vo%>a2RUa;%ABMq[ts?8E.DQqdtTOqnR`TI3iWD%_hE'JD^+SA?%BoIGae<L%"oI
%`=ko>pO1p!*(n5??pHEU+MMc5:jh0S8poLr!t6m<R5j=/.1Jp3B*kIZq,Bo&Vb-FQD&b]+d)81!,R.Q*EE5'Zg/6AlZ.)G0gekfS
%UK%9ocXa5LK3`GHLfi%*oF9)_%;];o'<)IZUJSN:PL&8+"hj2-MN@lD":*FHRr%c*WJClc_8[bR=`@fZfr-Yi$9spqTeE0HrZ@\c
%:H[\nXb!=-nq/iGXftQH[RQ)_Ulq_.*O=Tq<MXY+*%@VgD[NBp@uRMo(s9.ib"4#;0iecUWVYi=UgkpU`?8:#i"k8sfY[<U'P<g^
%KU5[iO@![K<aii<^hQ2MpO#prE\@lRM5FH:Y<jTWAK@;L5A.j%:jQM^Z:PG$KGpThMfi8?r=&?+a'9's0?W7I>nf)7_PF6&\8+Is
%KThj>W.JM0:3JCs?pLq`GdqXU)3@R&]$]Cq*W%JTioA^?).J6b6M(lA&_7QmLMK2[1W%%0*<rhg,)=ehWHdDu?l9KsLQG\"QDq!Z
%!<MKK/\0Gj6AL"D+J>QSMoUg,2#L>'Js(C!e651or`07&U`r,r[PhM-0H_4cKNAC"=D.q3D%[`HiM``4&-fIU;B3;(%QKsC$2CDo
%8Tu[H<a)3fe7hd=fK'Q]B'RZF_Qk:bMZls/YnQ5qoLJ]qBo9=\:1!8Lgq*M/Udk^ZA5+9rl(kEKJXT;2Z@D^Y5X;"\]PJmj+VuF>
%1/Dc!^jT+%`fNGP6g'6]K7mg7AenUMA2ri,qIjR#\/KijiBCs.Q;1Pfp!LV@nZFq'"g\\2$!C/H/I7XS?o$57DU!:AOS/u&%V4jf
%E^S8pM68Y.VmNFrE7H?Onet,3M\W?KMDc4XR5+:\j:&:.;'KFH<)%unonAn[4VF6g2nj%344e5r#eaWM#3sU1/:-/Y+CSm>?5*%O
%;L$Un)0nb\KK.!P"+o@jZP[;sc*aA`elm@'#fL;F4YY&/kl_-f2Mu0H@2!WB+/-G_XmSaQc0YpUkn")9/<gC?;cI_8N>84jTsV1`
%F:@,&*EZJt77Atb(_t[lH&_<-&i)/c":PQ"Ns=bM2(eOVC+m_(I4)*i]33_;F3tJ^FuUO5krq/-7-S_,8Urh2WNsA'Z()2dg0+o:
%-)<Y9Ma=R%=RI.[*%[/,/q<LS?\_?bC0-LU4=#E=:pBHKUQ69_>W%[_PM"B:UpR*N2D]j4XsUEQVQ'gS<"!_J^/02.b,4+@i"Q:1
%I8\_ZYX>Yu=#1s4_[nS!$X)rGA2@)nA->>s,07,\kS2$(P!U>!8S\<kks8iB,aAZ:PYMLW1<mU(j@S_Ofh6'N@UosZ6(6*A&iQ`B
%RGKJ#ec?pW6HQ59PmN,<CGQ$c9j/PO>PY7.lUR`kP.a\>X:#i%XfPYu=ArkAG^oh2A736Ti^q2AO/fRdM2mR2Rql/T%f@fFZB.;*
%9&kdOI5DpkdKYVcD$nGdH2.0M@+Ngefe`mm>KT.h<osO!$J0%)S?XpOhLp@/Jf1j4a0cfsUr@V3Xfr6='"#=uT:"OP(?B1abN*<a
%BiT7M+mFr3pPC)B[6O&WAXKRYn$qn$3&YgEhKUkfLat>;q>>V%$f*a(&(3k%g2.a9]$,,]e?h1I1=9dcgaLTZBrs7lN(PqVR($<P
%2N&O,e='$2EPr!f%,;DGN]L%3UQ3Mu7>kQ0*/`F.,5jiJ'`*D.c6_1XH0eLX+\lKMogoW52PFQX42c68imBH-"5ZCVApH3I&Mo%*
%]K.rr1h>h**(Z3h-jUJs4N1CsV*$`WLY?Eu0,-u/^.JhD5;45D1j7i%3K/n-ES;\P&kTG).&DIIinL^f4\.^K*WKSp1g4U-!%[+V
%EksHa&Vqsm"j7/i%fpM!G8^:R.[Yj]Vr)I,g>D$iRj/ArAJ8[cJcW^+1hs9:P*B\U<d?MiOA'>d<?;T,-Xl55b+jZQG">YjF$Tgm
%2Qk:kih(T`X\`5+gg[8T'5b]m>b=+sNi*]ZjO*JS*#,]B4;u'^^I]IU'.Oe:C6D(WP"3E0i`S9ooI;(9-USpaqoU0em8Ua[d85$p
%-OQu["/RdEUh\dRBD*f#irK76#?sc=FTVCjQo,P(F]*oe[&G.&,f0h41h;],">@]pM@KrpMC(FkB\5bFQcGkpBo0Lrc-SbodGrVn
%6Q!#/C)1KX/A*kX&1fpb%E20+np!"XT1EP^NCUn31+HL$$C,J_Z"PP'@&.VDnS%,QL_LehL'jL*mQJZD2QM<XO[Vd"Ag.JoOJ"'9
%$.D-Y#R!i%80eTFj3^[M=iE3%Q!gl!a.putYH6^gM''.n"$,iQTbTK`W*r8TZ4j#Uomq')Zmo6!La$+MZmqM!P?#9"^9`rqF%<oo
%<EPbg.ujDTeQrsFb8Kso?/"Ae=BR0i"JJiC#Z?RY6BfPJKSsRHq\2d`!qBp5C&LZ8$&N,SMaf!i,Sa'O7i-H*X(!+r,FqH$O;p/8
%%V6oG_15qaZ;([!R3!]I"P91*AfR46@F)ImN8;RV&H&8,pSKbQ2ahHOE^n;'7j!X02/6Vf6Ac7qKX:]0gbp-++=JPW31`>]CDVbb
%9cPN]O-\AaoLP/T:TH9.R+85B_s.FNJ>1SKbn6*cQ18DeArBHNpF]@@#I@m'HlJ@/!A2;[HQJKtBMa\l*FZ`aY+fIo(1Rk[3arZG
%9G\^g8rgpl$:PKN:niS_H.hjl"PH*sjVW!GiqR$YXhMGWXB%&*X!NQ##Y-ons!4XAr'm?@#]74'Qp_Nu]7e.TMLiN2oYMcW+aoi@
%PJj,sAEe&ha:"=U[RL_t#n6r:16I_,Yno.Cq99kIOhM#&Mhl*i[7.MAs2?0O/?p,b7>fr$e+o&bUG5^fV?\ELSW;'*DX.,a:.Ii6
%ZAM\*l61.W+;?$GWNr5aAJTJFLO+q%%\Z<!W[SW?W:7FKd.!OH4Fnt]G,;P^qp7SS3(6h_P')Ir`Z<#Pg[K#ekd"1T8.t=T,pH7l
%')i[%nS!MK;7;A1UBVq$ATu8!QrSbYpk1>R*'P2":l8DX#]ejeK-m+M$LbbNm$Jj\R,2,8C*s8#clHRYB55iA-tc_&;$e:t3)GOI
%!UgusC;_(\C/AW!aGj4h:WQR*:I:BEC/>3N7Jc1]oZu!B?kAo!UgnE^Ju91]7?KcX)NbEJlcqiS?2!A2o\Cp;b`;>=D9s^'Gst-`
%'bNHZZ\n'Z't79H(nO`*H.XV^)69S(at@gMj">JgaLjlQ*BKr$hC0reVbN;AR+<e1OXdeKE;2Jn@N.@U7E'uk3k6+hLt`*7Z$,XB
%i='#o#I`BSN%J6"6-Q>G/F6d74[bp(q?Rn**&i!*\jg0=XJf7'AaDZ?RE1nM,Z2e`7V$Rn+,S$;I?09=9l\qaY?_`(kGt[rXOofg
%6.S4'(LlNJE8_q#*E,FTNuAEmb?AW0SqUU#*>iS^rA:>F687!M"0G%NO7ZQkhf`BAheY#9Y%U<GM.t4;pno'R&hkI',_MFn.#3fc
%B)jmNmT!^XLQnrh4;cSn@'M`FAJ-@FmDVXjSA\)I77e^BYu6F@d%th5?)lDG.)@c[pZ+-_0hj,D[WmVi9KCS#UcZN%6?e6"*nKCL
%>W>VM9nl/Tn"Wo/E\PmH\'D+.q4K.a3sHBfHH5(T%8ipJ)Ng'%Kq_+>5;#FOTh)q[]!JWQm*"dJ_!HtFC_R5DIC\.O[m`Xl8*:5?
%bWE0s_]>buGXYZA/VmoSG2W)L_N\8l:s+[4=AtHT>F84o_h<3UMR"qp(+(m!YbACDQlA*URRn7Kd$[-GV*is5[.L0c&YdpsKham9
%&VW!WCs:4^i+[\7AXUV!DQOij,^e!N#H@o@6U_QCRHM;Jp`;3<AN>QAKXU'rJID_c.95A+(3ZI\Mb=?iC=5?t-5[;A+rg,=BN6mJ
%9pIbV(g2@@Jfu:6(g4\*!-EJm/*SghP?hB[&/Jdk;_mW#8jFWp[$EFGXK6Z:kXta6]Wq6,<-rbb"a;4*fa>Q8"J'-UN!fu2;5dVI
%J`U.+Toi@1+hM8d4&9T<0HcH_nuAL+L8h!>6g;Xm(6)HK)RD>r0aTp5QdV^6F>Oo$%^AApCY^/2F/I_<78]^,b!'K/Wn7uIW+=gD
%q:3)(^Ubc,n>M$[WF@6&Wn7PN39lVF@%gJse=L?PPRnM1MI%\BM,m&@gfNAomB+j3TFrSa^iW7fe:dd@]Caoj7kQ_'fdQKA\QoPu
%7\PG8_<%QH?$9b5n9MEDk1)^_6nA?S)-/<i1-&YQ&X$-l3NJrr0H_4G!O&ZI%$;Edb\0GR.huBQ/Mpo!,KPFs`"D(GcPg_1/_>Y/
%jM2KlenWSTb\!u2[2m>>CBj3=#HWKgGMK%<%,;;5Q[uI9gqlH^&Q1(#VQ;21<Gl5s`Ke?2Y]:ak;$[tk2St1YM@1`=*W%X`6mb@B
%Z/^0f^;ls6n<d=<N[n)Q(:Bj#4<*lLOg*N.0n_kIX8._qa=%^ig3jumn38kP,8<(Gn8MoM-*h"&@7-&N7b_r@1_*(O*]:n$&]P=A
%P)4k,#H4#8Gn`-+QQtiR4=9??<(n6u"*l^30r$dt]L6nZl?SVM&'ASqRFou'.O-*[EgT?'V1XNTQ)&B)PT>^eZJ:SE"Ts>o#E@b?
%$^=6'<N#>FQ;mRnKPj7XC,5Ftji,\KpD3d<kU[1r81bljl7bun;%<d5-<<_"P;7c1'Y<XG;;'LB/o_MVPuKpZ-S`jW-S[1s)DOC,
%*4Uf<`(Hk(WRRMQW"G#V'si!2`aHh(K,rF;171ccO\26s]-i4OdpPEP%X(P/9KCS#1]^)qb+=+a_9>JJp-dCN@_1_r/a<Z$;*,uO
%"V5Bh=Hd)$O$k9k8L-kBHQp@B=HaCUq:1?]i70#1_"7cr+ECqAkm>9.dhB[:!7Q^p@(C2oAJM$h=ROp^SJDBo5UB55(0_M:@C`RB
%5OO*a@QZ&roZu!B?ucHF_UH:?8l;C2)OSk"M!QBoG8C&CZ6Q6_Np4`h4]/@D$bc!]4/27%,2i^30=M=$7kQQuNjZ4?qb1%1OFjpH
%MR)C[&L#]c='Ga['2;RWY#KB@B,(XR!eQ,XLetf$%5";I<q4K=,u.p\,0QCiJ=n*]ZXI7a@!3fs'QbXD&=L:98`^\/7RKsV[W4)Q
%B>T3$Jm5-A_\NJ;nA8=D@3<c@1;fOaDddLZ]?mdQ;31m`Xg2)F@I8o+UM,+a7!>tOaL:]Uh&['l[O8YP>RUcJ$!Gan/bWY3(7VNY
%%:%Ialo!0rO:\"C\oK4/41?mh=s_uJVC=$?e=n,*+Eh'#Jj*F($H=>J?s69<'^9!j?qO95V?LPY.BE/14eMD<NJ?)KU29M_<]XfW
%\==q3_^@hsVG"<*#90<c2@LO.,*r+@0Ha1'"s>TBp^Sta;G`=`;fR_U*;Di&3UjqHAN=O>\B;$JE^=@`#l9I^XWEO4`rZ^PMXH;S
%'5\U61gE'!qT_Pf#>#XLegs&nMM<0H3-P#rdjqF];+.$h+W)DY/fFlH-ik4F*K,ZD)krUp;T2ZQjNM[;Pa.9uEOXch#!5Nlk8Rm/
%,Tdj7I&KSr%iOm>"+j[4GRpS#U*XAoTJEYEm8G/*NBULi+^dQC9%[=sXe8$3B)fM"JkRj8?m'T%(-j/3`O]jfBG4l5(_H$6Fs*DN
%,g)Dd&IAE`$)gA6+!F!fm:+3\<U>AH65p6"7kE+X_r)-I]+SZ(#Fqb2cNYJQ'iQ0mgZ?cgBFJc=Aoo.#5)<@Met[pTdm_\t?$qj^
%](jnr)Lc/2D"32\ArFuW?7%Ndr!G5%>s_jQGUR%te2c2-22Ed<SC=b]#D;TT*L=u>YHZ0lEspVh-U%qar%7U%i\V\cF,r^!2/#/r
%En$]bRCfSiJ$Q,0C'n=lnrqGiZ/D.GiFqF7)t)pE,YqDS'-Z+AN6%!QWFEUmfr@Fa<gnZ>WDNT$c74Y"06@Psh*a0LV0&PIPVZV?
%@ZEJ<-_sXP+?_d3&La<\j+mk:,I;fe<t!"TI52]^[A\s."'WJ]'HJ,RBP<#ABZREjHH^F#n()2?8fYn/`;nAEa'&fM"+jJoRBd$Z
%UOLH$ro%I\abV/>'=ri$'aA8?8;n,nJcUG%7(e9cD!b\o'i?C5@j3Rc=iF[JJd*`6A-N,;S_HtOM#jJ<)B&i#6Q:)4RGgWf8Q68b
%J]G6_V'CB,=[U(=DXV%?_Z8/hLH,VdS7@;]%NEIGpD=Vqdf<81/Oqd!j9?c?+=kNT[F10OGraLq29iq567?/I^h_VR!Po,K3,';I
%JOi@e&VCeNI#-2/bRD:;!'RDQg+jU+Dhp=;&Ju(DW&=aHG6s?WUe)8W+ko]D2'<>4">MHbR*u'<in-5:j]YM<jr:pD1`904;HKnI
%qJ"&boYf<YPl1X5FIr!`;$6t&"N/_lm6T$_#+,US`YtdIRhNWelISFU!C?U'1klAIB!l:-OPkCo#Fu*SeL2(Ka'_//Sp!-riNjWH
%,?1?\L]k4l]/V^5#8o7@^a9ah<k9cGq`j$<Meu0+$j]=q@26EGJ7J3;@g/&#QjtJ^#`00u&39%#Kr\Yr`K_o2bVhQZiR%C<5Uls?
%Js,?'*$gJDF<\*'AKoS;e,]l*-&#I78US[tLTpr@6F476+uNo,TE#(GR=C;O7sI<o)X%4]l'OpC)>--fUWZ-*FA@=^EseIV5sR5l
%.L$!,'b9keaju\HdI=PW\2,pHPUIlYGkO?5c8NHp!o]:6'%iXd$Ug!nA(jiN89VqVS68PjR'sCD%9F92KXYPYTlQmn!'TiET_d`k
%bGsb:KnT?O`Rk)_Y)D_\"jdMZ"K9g#m'*?s1n7Hh$&a%jP)>c6CtF!ND.H`XH,K4r8J>Xa\]!S#2R$3/'@[&[-ORj=oG"l@d?fWa
%Z@?+H_o]rVBb`O?2u=?F?%X;6pmmg*RUE59[u`+r&&e%XLOucH+"4k?Y7`NnI(E/Bn?KVc!M2)0;tH4.g7*MKqu:^2mS2NNaLc/L
%V&.8EHa5cCfsUjXG]&#&I@Ig;?JO]#kMBgm:X@#;]@YeaP&'S5pHQ(;i[2@\]d?OYceVCg,erSjq=XKZB`@W#^<<hJbscZ>g>&Og
%Fh'Ho4!<1H?Idc1SDfl?o@#h0WQhc!d?g^ha_psX]@Z%$[E7q98Ug)Qm`Vdql*V;9-5d6<pXAjm+:tONT4U[co'^L;Dj%iaAncGE
%qtHY.Zi%Kfc*QL/DmOZE2u.mRrTh4JkG?elWVugf<:UY-n&nZO&@b[Tla3Ihf*0'00cUR(dYXuM3Zs7O;j4%LSu&rB\]s!WY">`i
%s2B&#7R6H@5O$?i1d-,I^\?/5]f*?%p9J33"LjOcT"K!J1q>!Q9qL)i[7Tr7G;m46486m9QJ0jbmk13&A-<#je_AmVD0E1Vrbl`@
%cZpn_;`oL&gY3.V%L?>)Mt^+fs3L($YPm]KWDE*OU3W3^,L??`napD7q>^Ab>1DAuSEDfRe!GBQi\u:"QN$fps3gP.S#:L[?0\Tm
%pSZY8P+V\0FXKtITAAT.4AYO?T)Z*crVWMUpZDsgm(/Bbs*s`lRX10he>2=*WOMjPa[n.K4juF5].VE.m,%JTP%FZcls/?Fqm(FP
%S#."6pR="cF8o,pbJ-]r`R=DUT;UTCPMMS%s14-fr;.a`\\%*os79OqI@=O0rqjsPhYr]d00fK6pZM?Hh`49nho5S;H(LOUZ?t@h
%bOUjdG>mkbTAK1G,^Un79p-m]B,CO@hs>]Z^QYMnqrE5';uEKTB.pa)qtHgVSm6X1J+$Y7qNq+BFa7m(]kHt4SgW4+ffL"XkI#Su
%gbcRuRW$[)^45RqP+PtUcHGg':S,7dRd?dBaD[B?8XcIl-b\T<072A@9pXsfp<t::(NhYq2c$X'09R^G$u^XEP?n&lP+m5JX`m!*
%P4[`dr@Z3!RcPm0q"qTbF8+.Ih_[u),YQQJ46N'u/Xkb24\p*^qeh_\hYf9(n%EE.Zg4siVs/CSP+DLrf=RZFMgh;Q4&;%kInBL_
%`D?J^RV+jq5/hr=gG@%%eA)%09C[4)G><U.J$FKeo7)(hs4PB*akf\]o<1UNc0]N>43=rY\_6fHr$5"agudJS\^+';V7:sJTB)O/
%k826GlE8C7]D#dlIs\j"]lc8ZhkKS11VE/#]hd+HVA;gs+gjn5h#"DGhmr!\aN`Rkn,)uhMOXM1ol$!sMu*(7mrFnq2FYCZpAX4.
%jLsokMrr\aDOR29ZAX$UIeI&nDj#L+V'c'l:!^HGU=Xj@^YI]lG=e*sGj9]tYKs>s]g_L]qW-c+g5C@UmEJSjqPLrSG#HiH5IWgJ
%n,)OBoR<FdgR`,.o-F4irUYJe;<q/VJ3UO!l]nJb5Q)q<fGTKI5k$Q/H'Vf"rSLdshF1.^cM4!\g6^Xi/sb8dm^FRS\]HFD?#G_l
%hT`6Rk?mR\Qb@0/QK8oI0DVTTn%Nl7Ms'9"a[pDg;>YB\BD5\Mhu0NCbrKE]ABFN$qX"7SqK\Z9J$!o2]C&so]^%2Aga%=*jt9:Z
%qTVU8F_Uih7BSks^%\%4Z/#9,g*H\N`P#"F8X')+/4FWDRe5[?9iH7UCL?Mdaj]%@(H!R5^NmpY5=J:a?0Y/\hS!TGdcB66k<HB=
%PpS^iP'>@8@d2"`/ALnThd$*5F0>3!\h$GCJ!)V#cb&n"oBs*?\c1K)D4[Y-Q@GC%s!QEo8<SFKhDG$ec-Q2$2;b;,:XeY#'Qn\e
%jXs2)1eEo&^-,V60637-H$PQW,WEg_hVOjmZg9!Kc[M2;TD`i72_RfWo!A4WTA#L,8"/Q.?LQ4NBQ@"?hu'3$8Ud,).Jf4g%+"6G
%p9Nc@s5NIErh&gps'doYcL=GDSn*-?dsKn5^FmKRP%@4"I[[(`>1B/9qs/9lA/@u-]A?e.ZBHJHQJ:0JjIU9cIT$*US,W:lP,-aT
%d[-Jj]BoN<OlWESEcZ1!q\Q_EDNESd1dD#P1rWbgZg=RXH[enZV+I,R5<UYq;_34)"+lkPOsW+Js10Jp;P.MJ[k:<,QMka*m&'3^
%r;8B?Du0$gI/ErU\Folk1f';l^Ye&EhE9-?9Ca>sDYiagHZRKW:@;%C3U-5"jge%!]sF2@WDA[&[E//HP$4'I0$Q#3Ut=MR?@1,m
%@dfiB-J<[t\(J7K*rfm9VT;@#o5e]]`NT76r7@H[:R\j/p\13:Q(Bfohk0L</5NR@B6fYPH'Y:OQD`oWoO\'#W3tO>50HZL?#mZu
%rVPFuC$PYB8Ucgba\R@`jQ:0J,tViWH?!`8"+lkPT&5`D\[=?7DL0Ut[b#ki]\KD6DU$A.qcRsS`IE?^n@nm5l2*.2(JX>,BD2>L
%Eg,QB`Nq*U_`RbHs5\\$/tW"0J7.AbdVna,ga#HgF*!fuhr^n2nKc<FFhLHHFic]ordL022gI@(/q.,Ehtu)"II?Y?[k;kiE:_<R
%rFq]Hhc_SS^O>9LeDBV`Mq[3_1qVp]aj6/-8Psi(s0Io"8Y4bnk1AeaguOtN:K#]6pRh@1H1KDEr-r_ZG!I1JT"+rTSRNBH]W%g<
%D"?taV5H*M!<>``%L?0E5iA$iPbl'J[ou1@S5N6\#6_PqQ[n%<E%J''>SeS,E+M0!C%#d)/A8C^]]\&(0H>cMU'!s&J06IM,SDHs
%1=rI/X46*@\6'=j0l=d0Mm"*r`HS%t:?S'c0"L+J`A<kKFe)PnQO>Vh*PRc^$%ru')XP1_KeoEDbp:V/VcEY\F=pMV>NJta?*0?[
%B:VufJk`c&B.Kh@(C)^l9^'ZqWT]gc&9gei%-o7&JqAqkq(8j4X'D[2S$cq..]#fg?4t))@&5)PiX0jt,[<K%.88WE6PrQB6H=n-
%e2kqX%5g2(BSs+5aoW"iBSs+kAq>\n",O#q.YJi*ET&9sbXE3L98(U/7EV>T*Y`mQn`U4]%N$AIb/H0OZLnF^np8Ne$+:!>!`$el
%Xc],98hQ0MPWVKTW51"P);RL@i&*4\)bm+GB@H)k"P/BpcC==/MQjTQW+](ebVP_LG=9[`O!)j"=Ri+6:)8c(<n-1H;=TU^qK`h9
%OLc1^Ppr-Y"1U+FN3C]/`oj:oiHH0L$j:3^j6.=Wi@3E24H2q9a9RP)/\SLsRe.P`TMb5FSKsPA>t".MYu]j_*DYR[Z@)2Q4?1?)
%P:`CQ_%Rs3-3_NK-3XJQSIX[+.k=KGZuC$4!HDO(Sj9,Id_XEX+_<JRAZ*Q:8l2l9>1tQ3P2Q8n\.+CoaKQT>/fkH>Y;!77+qdQU
%igZ6kRY?k=D"pV+na'u?;-Z$:Gs"Vhko4G:NbI"+jN<QreDXA5nsR$n^PI7;UU-1PpcP['FFN,7Kjcs',9U*5UUSS<!s3QERq5P#
%9I5rO6qa#:[%kqEapo`bW'_8/jl4K^@+]4,TkjFC=i#VrKZFoJj3`r#AemJHGVfilF0R<_$HAk"3'/\b,UHU4:^p:g;9#@7)P5#D
%9IF'Vg;oB>&<.M5)S#Z@qGAKG:WY&HL'UJ2L>p&Me*<Es(dOO`,<ROrHBgufJhCJ0Z4qRT68BB^D3`l?GM*sB;Nrc1WFCd=<Wt?F
%4JbCF8U7P7"&@ETS1:TgdTui?as*RDb$Ef)5pcbZ1Ce#sfXi06>85U)KN:NgREG_#jNpL`W<s3t^_`bs],,7?Z54ULRrPi^LfSgJ
%pe$*8q3g1s8]%<t[,iutdRaNbqH>_)9V^aSIl<-0<j+mOQpQ][+Vk\1(Q.i_B@PZ^X18.N7P0tF9P;j:L8D6GWFCXHc8iKOXWXu#
%RZ#lSoVl;8:-4K(G18#T$'TrA!S`W\'h[0_TiKJXFG@jP>D-k@_?E[MQkiFMG0/aDBU-%$;9o[`R:.c\N>`46\Z[&CK[tiCD:FP-
%.[)H-%KpuX/Cq'RMNAchLW(%N9MDMRDR\1;@]?3qC.*`*L'bfl#LS$eqeAm,Q$-.[0_V7bMY,+YkM#<+^@p4k`O'C%\@,3&8=2_)
%(O`SiR^@\J_9*C(j$oj^\uAdd\h%XU-G:W:=op#f*J$(Wg4[N_qqMS5fPWT!mNs@;i8B`:4'EBd=Rd.K&70$03a*8(EY=*jfU6KN
%h56(SISeaSQ5VKkpbWaJSa=<R`%6bV[F2!njb7hU3@pe?Yo.Nj%4RE6g)H[(@Lj^t!c92gO98Q]XqRMWN-mKQ*t?J\DWK3l,PkBE
%F.cE`Q2Ns&<dp(aEm)!OW_aPD"VPf6AYl$G_X%";T<Xe,UX&7Zk^A3/Uk_rJ3HnOl8&a+se?f\e`kHhpp`qhMVXb?0kf*7<[9@AV
%%@s=FKWl=Y?cj]=i-%f[7LF$`Bm$+j0dgf!WI>[F+(X)rfQ]6c%,:uD]j3[9,t"G'R4`OHb:R+r,I*'Ybm84/CY)Tb]61NIVa;EG
%pbaia`+ButA6liAask`K7@GX+S"Cmp(Y'e[]">Ag$6q(sqA:Pgqba78cYH05Q&$aWg>h8/6jVh\).hd7F($J<.DV57+VJFnZ:?b6
%T1EP^bce70ap%s";,X?KN>sB_pHi,m?pG8I7-u,GmL^XILui@`Ael<o#SK+VQlWPE-'F[L:2P,:7O\UMXgA1U>7-<@DEZ)n[^g7R
%^3R4r5S/O2`U4AXHnP-F&:jku!n#X0;8>Fr<A4_:2P=UOqfY)^k>)Ibi+e7m8@H5;VuQpO0$0NhP=NVo\_V#BJ\+i/P8_K+&cPCT
%QS[p?j#'TbiJpF]0LaYILU;7&F)sHAQk7<3NNl&665p;i#c3M>d/_Y-/[9Y%%Bm14JmUI-#gR\50arp!'aMVJ/Zk+DWusJZ@fA(D
%b95!`Y:-eYo`nd7f@""_p`Q6'L7qgf<.]#-'rEIhlR"%X*5lG6#P0Wk04u3!ld]l<H_Qmf-gZcJR-i4[9fq<4@QW\EBK%EXRScuf
%R7aE";g$JiY2hjj)8qV'1dX#-'!i2N!#Q[qO\,hqq65Ts'EA8467>Mu9J/4K'FCP.3%U"50bhMZ$A0IT+C[kb.iSZm+L*5Qs88MV
%Nt.D(q=scRelG"0]=orN(EeB)O$e4nU.QE>Z.=`[/n2)10ct_QQMV_SbB_joL8LC-oIN#\F<%^1eM$YG&?uAO.1=9E"p&o0Tj&Y:
%^EG#Y9M*Bekp8#B@r80uYA[Z3-Ek-)R&le66HafBs$bb00fX?(0#o;EP^U.2=>Q(IL,3,s<06;<q5O'_i;G1#Ek&gLhAKGBnZ$(H
%r:\Ja'3A#nNcqeD'=(I9@pA]tdF_%6_]@8&G:.0#m=DOsJ&n1Om`V#hI\Yga[4gDVc`b]9l.^3bR3<.c[+n$<it6t@&4\3PR>"s`
%]k)`s#hqcMbB/p&MF)?fqW0*U/(1@+Af79TFLgrP$E47NR9I0QS2-u`]VCKG(,5rW%>B7?nbd:_NIHB65%1c2AEA)f&i;])*\@Yn
%2))4kB&jg*&7&_q9e)TT&0;(a<t^kWZ1CUcp^-l/pt8KQ2hbOh"T.)m@tPEX;HL4]T-c3mVB;h/r!3K4Ac9P70O.A2YG.Tb<l;,4
%`.urq1rb,&WqTm8jdVXREF;#4UdZnXLXsJRCA:m<04:Nd9bb=2Vd]$/Da"8Prk:51W0VgqBF8@5dJ"K*Z?p6phh0<0[&]S,@GC:d
%A]mqCIUur=l5BQ%iUsh^N%K!H.!R9(6n8Ht?bj&DeqJ9Y(Atd0Z/>3Xil#$Fh+#.@G&,?[KlehS%b!4'1,U,^+?ut<U9i@tEGJAK
%&hTF<0.2doP6T+tCrk<=!]2)a@7AN<Cls'XHFk5E1Wi&ah%u%ELVTF%.[Xr;MdP!LRDfsXB>)qRcEL\KB';)bA9\hBBnUIU[LbPI
%*'6f*88mN0`N)S+V+G]1r*a;2_&C0IHo%#\@V$Q-WNDOM1A-Vhb;E,JGI5g0s/`+A-I)a+mCrt$Uqfss?"8WC4+Smqj63MVr7fG>
%>f/1PS12q6?$p5u%3cGZ#,6"Z#Ds#m,Ml3&fEWI5GMa^AC;^\=Iuh-9BUdBeL;eLm+=rd[-V)8Vj/"Jpo<WOipe"1rTPW9Um8Nn>
%=TJW]U*!JM6S7osK,HD\G).]u,W76$/0X%`gtQ_K;DOY<)800AhEYZ./gUFFf7@(7]?M5KE9O\*p*Sg*YhVe*A,VnohicP@T&-Wg
%?^[a19$_f`fj@<01Q@A#8tZj"(9oBNf-TXsqk=5^97np"#Sljs\mb9D44At5GLndt>aId3/jOd<4[__e$aL+-9ffZabf<rq[u*hU
%WX^qr-sr\[-r>$+#;/Hp";\115HmiIl`'1&,!H77",+/I8T[TE@9[..`oWW5YE-2=4Yc"5cX<SG;i'l#9RJjcjlkFNK]#$['=oYe
%mnY$p&E8@jRGOT>LPQW'BKW%B*n/o4:.Xj2Mu'8I>-s;"3gS7$-*UQ4BoFPdihZQ(]lS.#ioC?5hF4/[EI)l,pPBF8JZ*BIjlAr)
%.o,S:3Di&/E+Oq@Pc1*kkQ=qW1q&p+]<;Fd/b,eud#9+<VMh-p0tYND<9-,C+YMWI6#'4$ntqkCHC^urCJ"IP!/0jpY!AO>&RGpr
%a7mn4L'%[f%@8UB081+=U!B_9@u?qja1rthP>rY#)H27QY(R:_.FH!SQlnK[>2ECV@W9,?;7<TiMVess2^#bg;Hm9&#jGmW+q)dG
%`-!k<1d941e(*Ao#Q@CgaFSm6=eO95Fk%!OQD]tfYKYml/P[.Y/nZLc=pd+@'WR>XV'qVjF?UBq_ecRS:CKjOA!q?Sjt]!IHS(c:
%V\tM66=)4+]/Qh6\.;AOi2oFDO3,OY,[+`GQ.A;^PW6qDMi8Z"oN`YO&L$PXR@PLDpa2)dE9NO%:BdV-Vj%tP2OR!,+ACd(Y7bJF
%PZ!K&+6<+adg,M\CCk(i'Ua_3jUFGWgYut5r2f'nAbkW'=/r&7oLFm2PT!tpJ>Z)(=$Mgs1(!XM&kY^Ea?>_8Ss51>K-k:X$dhj]
%2GmioJ82;erf/@fXWcO_ofl;5!ZT@KVu1djSr;LBkQRKKLkMA=On-+/_?.]Ji)t$MR0Q/hG6;QBA7jJ>5K_8b,gIUN&-]SJLhB_Y
%K!FR&d!I2UeliBE8;tpB\OekiJA+R7)Ie8c67]qi.3hG3>o50`J1N17icHb$;i9B/82lO7_l*<L<[<VKaZDa0%[E?"jIb8G#mVBh
%<C2^rmRl5$/+p`^,YfjIB2N2?6cWn2?Gt5q33=oQ^T:Ng)/NSu3.A^>+Sa4u+d4=gdY!eI>3!^RgkFSqS)-H$dor\B?On?!ZnUh^
%hRt@o$MY`-TcDI?j4t@T4%Q.EnBlT=<B2njUNaD,"UQTW(5iD@\f_$!`"N4uO<FjRmIEE.k0rF%W;mZU&GAcFDAb/48>oNH&M:[K
%,%Xg7-XUc<<US;%]6R;X%Z@,NhKa4ScSIK*$]HdH)^:Z(oH+pZ@^n5_*]UKpi*?I<d\$Qa;<6BMI>In_dGDRU@c9F8(l[HA'F^<B
%FbbD[SrEp.Zi@eL0\>c\C4NBVeI35e-<gg[Lg:r?rF'n,3a-NqiB>]5cGN_C9en&S+?3*#VPWM6R)W@T8)[Bf2,D]eV#5tB8`c'n
%!:+tJ3[,6]5WP\Ks.ErS,gtRqemQ8K0O;J`5i<8q2f1&]AT+[8`<Q<B\l5+kkr3DRd6<h8VtZgP>%rYFXMe?K50gr71l@/Ed>EZ<
%`rQuO!s%,$A\bkF)_%:[n=FL'+@Pbm1ZZNq!*Tdf>@DQ66J!T2TqBuSl^A!r$r"P%#Dl((ZJ_0/1[,<:%CV'tarP;]4t7tQN(qn'
%$;%4bAmEAE#4r2ej;iHU=Tktr6@8/)"JIaZ:)dUt,2aVY(fC`>7OI3kDc@A&%9!Q?Q4f]j[GmT(UX5YjRO>')j'`-Oi"9/WY1;((
%hHb"2hd9Q56jQMp>l5o?`77I%'S#LRSf)f&7$'&9r+ZG/Ms`,kgf$&:@4:0>(i2&mfZR\4WLeTPqj83S6Tf"?I$]gYi?50/OXZMW
%$3=H\j2g+cmX.=FbtsA,=B)o(D(&;+%s3f$,RpI%hYb$%oe*C*,LLqac7j4r9gK0&m.n-r"sdj\?.#sAK#F>a2T.)+1`11&@9Hu.
%j$m0B=e%KYoO?:M.Y;Pl1RJLW,VRjDGQ!nd0]TE\ENnKCmt(Y'1gn^:&F8%7c5e\#F);e9_!pe'b^/;amZ1RP2A;:AS^R[cii3Ga
%#-cqAcF-=3[9Zs`K$sh?=;1e97,`(!>EpdG;qS`1Turj#&\aNS][DiTWDF#$=NSXt'qP42,H<`3qEDhu&OD(3$*oHg,ZW99'46.C
%N+*,VU(#>]8BBZMIXnQt6p8GPeInVFSs@X(@.C,A51*,/7bs3+TN\5M*WuigHr!ZSW4(q#ZJ4J08)<3T%H"Ku*4d8H3kN:e#f9nA
%%-i58QOkoL!t2?4>im;M4o0>__4=9,Il!H#+H'`V'j75pP3S'8R'+s=hJ6Uu;G*0Hr?B'cP.`%_Hp^_?$<Z1hm9g<QJ0d^&]teJe
%EL]Dtf:/h&c)HN<cBV(T0bu.60lLhp$qj8[GJC+,-O^4:d3a^[Ra/s@4:"?mENkg+lS\557C?49(>?DPU_;l47+#b3.ke>_+/Pq<
%'^NM0GR[/-]g43FS$#$<+r-6\.YUQ3V$)$_q<qnPbZ%F`KCGLd=9)9h?-'*F%"_-;a&,h*-$nRW9/e9$C^q]>RF>;mUaZ`YeL"rE
%giB)RJ:5Ho[sqSd+K0!P%WHF!Dm6uq;jqd&=;7H4;0*N^n0!P3l/:@003""X&EnHdoWF\2[>Vl=d-cM'MtHTaTuh(P_kl>gLBCoX
%;mTk2ZOMbtc&Xr^#ut[QU+;#;@+\O4SulEU<9(Yc][^.K]sZK16m#+0R76C%%6hN7X!/KbM(m-8W6N"%'Vu/*Rg\*KY574N%>dW%
%1QtbPNE+nj]#IqkKW@7t&FM5GSV,E0frZ7=oHH+4ore0W9c\U#&IctgN>r;a[_3#B<X6_XD,#J:[fH#@AM4+W?_-O=Fb6u[_KjBm
%#h4CDJdN:GkCrb]]D;a_05b01,8ccS\!^t\Z*3JXr"\iP#\UArn%#QfIO=%jHCup.!S'f]TSVSijR=>0@7:L8)?A:+jro9h\!=?X
%.S*Sai<s>N5t7N,3g+Y+TWhd!f=M!UCP'id.gt9lXCk=jDCs]6i_c8H^SJ"V!bR9Sl%kGH]n,;sUFZV[.TtWi>kjIIpYd;'N'UuI
%!,0;RVj=8VR:HgM!s/:')NNto"&?DbiNb^B32eObHUR`B4uV1^;L6Be:Am^kCB28rEmKB8o(m7YdW"\/9Q6fI(LJ]/Kl4\P?bd5m
%qDM5>OWafAPr;9(4P:E;'AN[L6Csrg:"oe?*$=$4bXhek/u1IOOa"gRMhMU`ZoeDfZJ0P!g%1rbE+M#,5EoE'EAcuIq>gpJU'kKk
%Jcb;:gM@*L#lX'ula,;"-RQ?!D'VsTDPAk[LA&_NHUOJdQ?A=%)&g)tDt,4=)[u$C`2t>,:(mh9iuJ"rW'cm+jn:43\ej?,St4fD
%'d^cZG&dV"&B9mgaDg"CF_uDn+ge!KZf/bn/\63ie76qO-jLUj&o%i&5sM]cj$o1O)X^)iQY,I4%G-?oCRpN4o0h,-reZJg"gmg<
%,]=/8JoNZT,)3Bd:,lB1"WoMSaBu?`V8g-tfo=>=ht+5F:E&ekV@:+ZJ2%#749A'S0UZG%8O93Z.aIboB`Q]*:?<5h_/OSFY[':=
%24O_rMAiP[e6nKapS$S298]6^BmbSj;Ao"flJ_892L-_C"lq=lo0F"@i+Q&T<6`?o:iP??IGVq^dn;0kW%&3lb?7^i^cET;JSPA1
%*:c`RWGFk:&oXC]M"+K_/r2CMn@2<tZrB7,$85:sR4rQPJV=-Nm)-d'2rf$rrBU<oMl=l[?lOeZg:l$@6ZeE\XP*Ahd2djd<31o0
%14UZP0XtcZY<7?hS:#qKV/cBjj1$k#'cq/)SI5+HqI"!MO7nT+'T"%\h\0G:Z47`;GV[>:Ul5E@1?DPDLT93MatkcDZk[3RYFQ%1
%^`)`hO[UqEZ:6ed'&kfK*?=0sgo0QC)+>fT:M(uH[N"g46+k4%Ymp)O>'5:2G^sa_F#5np\c[6#R_-@U'=T)k;c:Z3(jCqqgdIGY
%,tS)f#lX0.;S`cgUSqE-&@eK.k?i#Ma4oNWe7d'"e@!-2&]:^;]-TVmocWpd6j`9d1"-c*6jn"?O+7MJP*;R,K%bY%`Dgp\f0/%M
%=6l;?_'\Br4*m-`ClXj%[m1)mP`SU/ge\[Va.tu'@j]f\30)rLC;cn^"eBFo^C<o!?aH$I6sh_Z-;qA=c[*qmWB>if)ZtkP8a3<b
%G9ou+8Z<,$QdC<4U]b2eROLBH24WjrFKtchbj3`Rd\>=p$3f0$P8`>ccPR!'@t!)O8Q!qHO1ln,_BW8$j'+]YO!oY7!9MRFj*/af
%5!g@BK`epg^==SU63K6NRrCf-M^.4AUDAAm'RnB%'['0qbuEFm5E:Q'"[Gqr.=B*hC+tePg9F?eF6?K;?&$_M86E+7"r8hX94EL.
%a-5\$?gDZKI,fRU2Jt+mal3IKXOuO]N<@dH\jS^2L/2ZVD+JZc9k''3V\6,O%Qu0o#W=mfZ1RgSKMhn/=.7i5.>oDA/S9SDF=EI0
%Jl=-Y)H#Ma"[gmL%2u4>k^P5;(!VJLWjoCIlL1^;E*Si2I='c@VF$%<p'#55dO@"FK89`/qRC$cl4f+a5f)5n\*baLY'X!iCPN'S
%Na?]D$cgXSl4[,f51*"C+&JFp`=GJBB\K7h*4S&i,rY#g.hRB\j8ee=758#XZ_qDfh<sag+r.4@or5*=.fk'CffV/^'ags9Q3aRX
%45L0+'W3;$8Ff%H-h`dB]EtJ6ggAb5*,5fA]/GJ\SPYpo\,:nXPoY!3>Y^1?b^U&*l#q"P.#/P%Eac9N3+@pg*^D2:^DNG3lV(UG
%Bb!eBrXf5<<Jr6alO?_+90YMW4,naJ]fV,<h[]/iqu!d51FG)#H1n>*^e@53!t&fA7u@5M$]LOiDCV+jScuMK1[GfGK1ltqA7.u9
%2\W@r.gNEl+g$!TnsI7Yi"d.U)kl,1&_BYa&3V>m)^qGI!6\@`FIg@o?-aorJs.+"l5GUDZ$e?!%]Q$I3`VWSBKc<h2STme]2<@V
%S>.MjCOio.j[85MZ->-'T2_^mW,l^)RZ>g)Tg?/'4np%QYDKDlf?,M8'@;.q".2*l.GB"\dDGWd`[c)[jtuKm\@G+7O(qQD9!^H?
%$_Ya1bR]NhZ6Lk.'ia2>&l1o,+%XcrB=;:e5K&0jLpV7&oZ;rgD,aAU*@-01,U&b<a3aSmLRoW$:+C<qp_f'e]KFV`;BOm*%3S8L
%7Yp.77;VlL!7dM*HE7kg0cLVmfaLn2?N:i9Veqa;!kt-im98T`ii:P_'Kg^J^Ck!A%:u)j-nbQnc!CnMM-#KEGE8&Y6,F>1Pst)`
%+oZN8"WQun.J6:W$=jIjF]m@Js&FVncd8)`WWF=b@gN/,/"T,0LK\7%l<iFl:TtA7NmA[l+X%nB_Dkb^S50b.fuUKen_%U%OdOOn
%7u3/g,I$06E1Nj4Z+A?ic.bUU"V/<7%k;/>^.RCJWUe@i[3rocZDN$>&1dXjN(V)W+-:N!_j.foJgpL[3$gb"]:JIb]PGO+5u$?0
%#ejssrdPLk"MpQ#L;E\Y/CC;:Z``0(+srJ)]iB<R)*LV4s7kBA?hqLeL02!&JYqN8jd\N)6ad#OO5>M*/ca!tb_;`Se6IltjCU>)
%BT@n$fhb`1?8B_j5Ne@cI1O_OT]m&UTf_/5S`4hmI[f?gqHCb9Nc:.Q,&0sH3:e/2OQ@X;45f7/Ai:#)>F#9uKEd4?3XgDTA5c:!
%/0H`]o]pu2durBe3$fQ"?dg2H.40@h@4Um+Ns&Q8>U[&e-iohF9`kI.lR?XRl-*s^FUUkl^TW)2a)XrlES[V;I4h#Y#cZq(ga\i1
%obofX=kcP/pEl8^G7?pqo0/Y;9:_OV,S4N-b&@JI"&j(e8P")$B,TA*NV<i\K6gYMFUaiRd*Hf2ZeIj,d(it-,]?U(%UKV-!'[ED
%js%l+8/Ygq1]]/d!tI-rnO^<#\4!d5_.OS*&]p9%Y>m>S^ii>.\P@!b!3Q\3k8)'ZJ7KiSj.F%BmhASPTGqXQ\1NqiUWtp&YWs2s
%*eZ]&@%,&GE<Za/'b,0j_VH*2^)Fhh+`%D,eR5gN$-;HAVUD*Y4t#+&2AjC.>_8]XB`kT=D4mahr/&^!K@*D7:2L`,1Y=%QCX<W/
%5'q8R,<>i`EZd[5!G7bcFN]r]1\ns9\sRt*JNS%9.YPC!D;11(+l,\4"k`+'Qn-@ci^%BPOo+sBorQ'i#Ph];F?hU:"&WMB(pX#&
%rQIeL'aU\B1ZqJeDJK-0bc/_^+EbfQSj7*PRCUEOK7Ug[9qR"_7Ns8`N]"N9.1%!DpT7#!BrB+;(X?91`8!q'f_g)(RQDMA=cj#E
%,PM'S^_ilDh6-&pk2t77G2M)\h&q+5X_hJb><_[K\,Z_>ra,CuViO,)%pi"_Rgd&I3nK+uVu5VOJ]o+Q(5Z.ZgWUlih\u9I7@-p_
%AFmeF3s*E3]E[kE_S*P)/-0&];DT'kX(,$-%Ta4c9O(:iDl!k$P5dAC3ra"]a_QJ2YjS7;(.Zg6jA>:ENmB&j"0OFN\bn@OWgZK\
%&h(tIKSf;AjMA3s1FIDW\qYMp;t%=iMadJ/l%!2B43aEXYERWBBUGCh$q]5e\<m^8!NP`6?nnoPlR*n/?l99udtHb9_gn,PS3gY`
%j%/4n+[onpIgjR@ggi%?Ph'$D_,@sfU,P&SpSLG1S"cpREJIIB5uc./Zmje(c3CW+OAf8d2gE&=c3DJ"Y1I:ffO4:kNc2->[`K5"
%E!4\go>(Q'LW(o)=@i%9:E6pn2u&:j8^Yb.itU\d0!r(7butX78iWa(:NRu,B(u`.U4Ab.Yk`2#pEN'1)Wj`mpfh[7532K2jY)_U
%I'LkU@?+JW'%rBj53o&+D+`?:@rdf.PG++rXOT#*UA4's+GEM;Di?8Z\,Y0%ODN8dT_I<EX;*FhV(^m+H(4%$6.>^-@aU8Ce)F4=
%.[J2bn)Z59\S!6)_eS<uTk(Kg`1uo1+3;?"jt<\B@J#CW)Hno5FWgOR'pM>YltSit_>7CY'mE<OD\!mc.*\RN=88>7]CaTCD&//1
%MipBF6tbl)3rCBn>uKRlqbDuj`OY[Vi8UaZ=dYXpputisTF4hkj]'TL/ifVPe8^aB'`^E%_9GrG&tql7d[lTd>U+>u(<*nWEEkEm
%A"T^gq2_["S@2GV1u^/ZS%)XU01FB%l9pA+F8qS4]VZ5Nd\S@B'l9%1?#Y'rb:.t*i]-+SC:ffn<Y:0e`s$7G#55N(FCJ][jP;(=
%5S72!jm3usVEuOcA\dpQ\TrnPP0"`jYmVU6`]Pd[i8fVdn?8\1N^%p_!=f9PjFPWSa;6NQ^k@.J#e0l3&l9+G.[=0;'/jrSZa'^4
%>_dE?8f*h*DEr^[Yd/VOH=@6>Ngb5C!aMbr+U82SLBQ+a+AA^8R&H1/2(B\_lg,6+j&M2PFHu$D!/h?P!<+nEEunEii9$J_5Hp]A
%=)FYs'Yp!.'B>[KHU?g9?`;TYY1AG4A4_[!JT8>l_=nCl,f7JVhIl9!iVZO'20N[8.Y<4"R;cZ6rkuTl`jArUQr.iRBa`%1$YHGD
%BmPdE]MI$e-tKuCJKn+'2=R4TN;P+ZXJQQl8D%KaQBT=Gpd;_=N?a`YAW`V&NYHb;hJTg[TY=jLMV@eiI]NVg+Q:W9bq?>*7Ldl?
%!&%b-IMPk=UR*'Q7;*,md]Tn=d),Q9^L4Pj3h#\b)%HB;>\j>@8]^Q$0R2ImfM9p1DVI7G%.6sSPQb5qAh^6sL@Zj!\VD/LPAP^k
%$KC8`ggLVcG1+5,4,W@kr`+V:HfSZX*j$PoFsMk9nQ7ceaY^a)/:X5'Ue(h]l!T7-_+\a>>Fr6E,M>*/SF`VV[DQ'i!^(UQ'E5au
%(^i]BVoVlkp<qhIr(W/mCAg?@5bEtJ1']:t4":E.rVlOh"*s?0[oCbQ?O^meMiX)VQiuccT"AX7MOk[bJgAAW\!*jq6),.Kqj#O1
%hf?D/fl(Am,,LHr@")6#._KH@d%1G2'614_Q"NPumR;.*s!g^+d;_Q(s".F]3?Yom"Y)ib>19,cVB^D+5_K%&.8BK]82"o)$kVV-
%^uZ2J3[>d#A`@u>VWnc[m"3g^)K&2q);)nb4L@C!+.Zg^:[S9mP_:g"$jP;@kfG($cY>;cb\hd1EAX^q)os?-YlJ$To.itV=Oo0$
%j!!Cq)hi]*ejP576:4_fSULa4QZ+'YFGS"FSEF4\$\.\cOuoSB!$m*UkPj>U@&OIJ/l<(-_aP)@\s'RbSaO_A!Jrs)STYCYemu'6
%mDCon:4ea<l"f8=n>o2T@@3uNg7Y6[OUD@9).#X&E/kh&q3LeYj?E,Q`Jj,FO[&P)i4k$M42hgcWOAH<`hKYn9!%k/@&7erCURC-
%U4BVGoQ?AH61mE$L:,M;@70W*+UUVSr/?#S6d@K*DXoPlVHH4r>0Y-b5<H?#?&OnZ>smkR0T+Q*.nP\gq`Fs6+Rbh^$D-U3"W2Lj
%)KuL,J==S?Ig))^QlP!&a!?&Wb/@[V,cjDfiabFC6[h;)7^f(jV_?]EhH!`dJ.LqPN*>SY4rLMI6=QnaE!k7(ce%;nT9E5Nn25as
%eK.P=ptMpfhSIQO8o!H0)+h&s<"Qs9RDUl$fj+sJ_-FNp@0*2;9g]eShb-5QbEc]bi+(:@og_QWJipmB$\j4[]fXLB!G`ZZU#)A@
%omY?EPEVsEP)M7=RK]@g]j"G6,Y1lD,1sb'LcGHJcGsf!H"eO0/+o+>F_MaSO3IZE>:a3*&(O&^@7BtbM;,X;RO+2rnWBM\e'HdT
%D-6H_+T[N1BujsTHPJ#0F\HZWbM4$r,mX6r@+Q:92`:`lo@ppX^kD,hbpmNE6DKW]bS`hjo9t:f*M3nWSmXu9E'@n%Hr827.[:.*
%TY;S!IAa$[];KJ@9C/MXf67n)ZH*'iR;(9^X%KCI]\3]_O8=%h^0LR38nkc@r*IBY+k+E6DmH=h%7DrZoqfJ;&9N=dKKA`"qC:Ic
%G'tM:m]#19h1O^!.'(r9fG1jiQEl?Dd#aIpMKae>SM@6!atPCdo+t1lcnsAfS1kj0Ac>@68DnD,3P&/"i$]n=8p\I+6U7l.<$]HZ
%*ul)iQ,Fdm/#5=ON+),NTEpS;2t2Pd-e`_\/ZfE,*qJ5>*@_c.;MO+-BR23X#KL1p[qW:`Cg_3a8AbML.DSsao1*Xi+b/\!d[oP-
%885).7ml]$.TdT+F<DE@>`(>om@6b:3h$AJ!9;4(7MaPV4;dBM(+B+'Fc+&8a8bc:R<k3#>O&2Z%q?X`5n<,1(rQCZ4!`)o`TdkC
%9R@o5[o8uB?d[L)pC[VWW:dk">rodW(=hMF/Gk:N5KFg#)oT+J80XQ."'SWc<$EdYN,i^m&le>bBjDV?=!@7/^VL223rDeh?)=&R
%oe"]YIWMl9'QB1WgkmS=U.h]*!%XK."bsc%PTZQ?3ZiG9Vkp`8,o3:tONQRo,MdZB_:TA'+j>f3F!7Uil0gT0T(:K?Z2DUU-!@^j
%:XItsl"A81WTaeVV\qZqM(K3MFm_'L8Bo_h>iCdh'ah5@):l6fB2R>&<tCP),-5Gnm!-eb't=IWY*$,B_u`QL2]r-\b).-MelW+W
%.H*]lT\^ar#C0aGJ5eZsUmK`Bi?g&=jl?>H1'ecPN3c?dlBF,3<CQ^cU0Yeg0(h%kKS'5?S=p8]4[uQ6P0E1:DX!gB/S&\Z+)M/Y
%p%o#;$fIBUe.<h2_=e^s25JM&.VCu^b6[k2Z"?DnFfi9e">j*mE(]`9IUj61U1J`"^JbW%*)Rtg@\-NY4]j%[o_Gk[WDrqj+'EVc
%*StZd\095[!pV,sA2NLb`+9rMq57]uG&p$pGgAr]mu2ZHEaY%CbF8Ln^i_t#=GiLLN?>7R1+gZi1m\;K@$Y![5AsHE0TER\7eVtA
%p5#Zk%r]qe-#pG&EffTQk0@Hef]h:g/Q"B=<&j"Hq(DP=&kB%V)Xjt#T1@GZ-9qV"0Em$ueLcSG+"+iT#$)V(\&eRW;%#;0;f>0t
%Q:L@Q?`ShB2A\$7LsN$Yj^Pc0(ioQR!.,8b7<l$;B#-]F(V0Pi!j#M[+CVd+?fd,hJP4'Ff!n(97-H?Y[48dEQmEC4[)9o0cR/D:
%$$i-!.1W[9FYIeH7,m@j`=+nFVs=(4jPj2h0L$#e=QMD!/u<]7]^+]_i6T@C>A3JJS-CX3?;UfiQa(E^`^YR(]Gh\/bq0V>,gRk"
%q)K:)!;O.<fm/M#5LSX&j?mK6RmS73jg(b2>APo`lg?C5MJlERqTM)#&=t"H8*1Lo357d&/1AVYR2;*VXE]20I+`)#=a(Nf"qM0F
%$<n`L4hiG_fd$NYp]-j$9`5.3e/^tH@u8m=ZCJ5?dnm;+<5"5Z:k,#^,Dor.)r@%qq6KLq&@DF&C4%#ps2Sk%!jS0&"Z4i/f);51
%epD+BQMQ+Bo@j>p)%!&NU+"'4K^Kf;m(]46M(fC(76p4-%/6T`;gDd`oFPoDZq?s$LFnB&X=:k?"I-,nP=gTjc@UmA8gme(XDNYX
%VKgU%6<=X\06,3i2qM\7iqN,_9L!e?K`!A.qAoBrd=LW<\.5=440^Y8FLnuhi=S]m>sZ?*G'[:gNE3Q"N#lrJO,V*:I]PVml1W1/
%(6&[/+irT5cu^LFKjG""[0l8d_"G,I*l-+GE/]i]ZjJ/:QajmW-QCtUPEeuiIjqneaVORNS6r,/SubB/iEQWV)NNZ!5EIB&^,#0N
%A7P_:@gnE*kl>SSgN],I@RLQ6DZZ<r[ZeV'r(gn@C1Dg)%Z]Gf)ut^t;2k>H>eN?V_[;J%.UZM*JQ<q+Q7+6Ya2U#:!<dJ4U==PO
%E^tA@-AR?:Aut9H9EeE%<uU23Uq6C9P(WF4L(!`Tf/UZ5^qDRK.a<+bW\.PKA5jOo_fFj/k(m?./cA<hYoZBt,RQQ&@h#SfiY_=#
%./LO^SY.4!%d*lZ8FH1pCM9/`0-bEEi,F8mJOUn)rIDDK+\'*[iNP0%:!qpYaS>Jk<jrPGa5Q.o.1Z8_"-igW39H&5&*Fq1@QR"Y
%!ud,2rc,D2WXuOt\#R!0\SKF+*MjJUJ5R(><lUV)<Fp<1QNos?:rnH)A,QX/B,GC)N(^HE@M:6ZS8%3NPO^aNJJhR&h,4PJFd^(a
%qk+,UqDCG+FiT.lC7>g*;Sf("1:=NZ6Q\fZ7W;]d7VPSXE0M!54LJjCk,`5^$RW)22*`5p"W)hC>rVRn"^24a!n/4QrG(Q8c\doS
%EX6Vr8T=($kS8p(PtAl7?8\64n3NEl#94(LPdcbC!!GL@WbcnAr8n-iTR!80T8:Cu-jL[Ur_E1oS=Kh0r$3GmCNrQ?BAV[.$LC1R
%"S-(H6UQ[c!-<"hr?0W_W'WcoWF=NqA4#[!<.+q>h3[-uh]O:B&OM50AheW+;BP42nmk1UK#aItX-8+_DAI"uD1+KVF&t.#f&qtB
%e#^[l6eK0W]1ZB4PJO]43E1e>s+SRnAoQ0QW;(eD]8PeRA0am-\_L]W`.Dm>S*M2D<rV]$hj?o:s6KL+>A-6@;fMNic+G4`OI]89
%&(,Urf],K%c5@c?Uctj*I%MX_KIQaYloiWK^\QabMO^[$[8Lnrj9ju4DY"4'^qaG>6n$M]a58`W/JH=PDLeVp1om.ACM)u\o'*FP
%%,nS@gDY7tmik!;4<hitUM8_4!dEY55U^Kkn:IR%-n7qi<1K*rQ.bmLF[eAI^VAnb3NR06bC$ji"QXIE!Ej%LdRAAOCc8hp#,J>T
%`@&/8L_9ut=A(`b$k\Y!,73P+MHa.!"IE6/BK)-&4'!,=ZK>XGqEmiF55dkUX6@qc(60!gkqG)VbI\ahn^'-VMQqI&([I$._3#^7
%U=p4t[4r[+qg:b.)%fWVR\PFjpnVRKNk+2okDP<n`ZI\_T^`=`k=>0;#RA8gq.J<_^l#4k;dQfsUP(ZoHn#th\N*i-V#sqpJR1C\
%9o]P#?QNP^hh.'@o0YZu%:-4-4`+:=7l'-FD\=q-`X:r(p/Ap9d6[_O@\0MM5=7`IoFpD.cr'Xn(>enF9LK=scuNL4&@rCIQ6)dX
%[\9[#haR,;ca`!$c\7q.^=&`XLue)!FY4`._n`kT#OfI>h!UD3g,D3HqfJ&[&IRJ;LYOupp*?rA[1SJR6o/#Q<QKI;c3FNl6d\+1
%*+iHL%R79aPJ_K%[&>\qN\t.8Z<!lu7q\]Ll>F4jeY&r_ga&\^^pI_V/QDDIM'LP-(roAsklG+\ki[FN`snk:kul@.#fdB6Jr.(7
%p3+(]+frO(,G_k*4U_UmB@Klp#u]WPMSdcEa2*>8Wd8U?1?OQfERje1#ke2RMco#?)9AoI0V$@d`)r(Ar%j:%Z])P_rB)Fc\V=6\
%fi9%PbnB,g&jj]Q'Sg(K4:BA5#^F6*-I!+3Z7\thIh*.dmJ4i7!?j9#34eUiVDaSf_&7R&nXY[diERRI+(J$7E5>3VIj)Q9YaDbW
%E0`$>6KJi7_0&LGka.,n9`,eLID-cAjO<0JQbuW*%c[NU5UeS.8B#_a<'UTLiIMBa&+ngEV^3[`*,<dl2*'`#7_Ma]_kG;6P-Fk5
%MNh'o60aS'\QO2ODjq?P-o`UWkS`u*b6Ei.<_FT1E:QW)?kKI+I#6t.VS%"r4]AuJT0T$LI;8@pB&;&=S%H`n0]riUc>^u98OA_%
%T0YD!=pQ:Pl%@/6XFN_$ZBRBoe0odS2EQ0SC#ANFF6Er6jbBPr:Jghhj9%Ek9M/_g!R;%enG/O-'Lsa)oG>&lT+OscNaY0Bn:%@o
%a8d24rM"GKh2a:'oDm28ObD>fW[Z$?#5jZD%I!ZNHb$),K?=S.\-n*3ZsZXBCZbq-QlA/oGc)7XM.7jGS";qE-tArZTprs"^N7\g
%AA8qRWs?X8XcXaZo25Q&P_:A;m22%jQh$-U:hJ9:;VFG1Ha5fC$PI2m]R&g+\=*CZQ]@EWZ5/MBg`R[U-/fsT;$f=N7kIuMQIh.;
%UO:L>$RFhS@JEXF7T#l?0O!\d80J!J-+7cPb0dLEe/Kt-!mZ[drm9#PIQW4mH:T6hgL(FJM$!DuR/&4qBA+Mq:o.,6IQM8e%#[N0
%b<3Qd1qZ7cp7-/Jm3FMH*)q%fmP]Qe%5(_$l?LEUS:o#O$A,0Q%,$,r<#ErL?`k-Q=WUi#X!dkS9K@KWeL9+<<Ma<?CPI"n1;b.?
%;QE0`IgETngPfU'W6p*pY.&DIkoHr(^G@8-&pj8Y%;I:(*+N"rY3jGJ"L)(!?4JSg+L-B8a?H__K@1s[dC^_A!/uEkF$HFMeis/=
%U;<PW&HbrZ*sD$8Hh&"-ceAa/neP7_h=F9YnOTRoYC[M%F;!nRDms[h;@!8VJ-q,-KrJ(k129gj(Tld&NqVhPl(1O)AZb1?U>QO=
%5&tQ"pn%DR:k&68qr,<lhKrMU3eCsReYP'l1N.EpRr1kra<&.LSS3QrMYM`IepoAT0eiLmgLq>2m'DZR(8S45F[GE9!'u[;-0$2o
%NlYd$U`opG#%jloF5Y?bGYq8J8+H>g<6QJ9"-!%\#62ZtZD=\//mK[>Qdfe(^?WrZ^%DT1!3,h.6SI^NOT6En]-1@8mum6g<3WX1
%\VFB9/%k\iB:G1)6kR+l.rX$M@4B@I[D16b,r8)W*(V;1fRk?\Oueam^2C@#:C."X_1T>f5hW+s-u[M+jM2-RIih!RaY#ZA:X7FW
%<7-T/9+>^c?OX\p:b5qX8Z!]=$snQ!@tM`T3bDLE!p9aJ&[,oK3"R\$nJmu)btJ6ILniN1r@giW5dWD>**mq9KB5#/,(pf@!\:=0
%84kbt(3?$T\>HH=jfb>Dr2Bu+Do944mI4Ko,m'P2ggRR/.*\Q<=1ptf\\P*)b8r)T`V0R9g0ATW)SfJT]=0aq7=au>)]Y26f5O9p
%p'a"]$*I4!B$Rhaj!bYnA7oDE>)9`qmY`0e('=/bbe?RIK&T=g-uh?c$Qro/U!8=AHc1040,s?C^#*HF]('A8r?)b2JW";JfHs$$
%j'8o;[]n<L.-GOB2N$H3SmUG((,5FC?.69Q@KQ6_>,(<-[D]!I5-H>S4\Lk`n-'4r!qM1bCuIENN]W?&QKu9g7)[:p^TY\&!12)J
%>N=oK"$aY#XZ7U[4j<Ge:DOVE$g`!A]a#,a\GnMd?6+M80VFX\E/W:EYV.k.U,ir-eWXB;s2]\uja:cOA-i?+eJ"i03(PJFY`_SV
%WWar<cURA_I"2U$!saBmXbu'm7q_'L2-QQKYjH$.OuZ+d;SF.5VYkScbL$[CVFqFaVYaF4,U#&cS[Y"K?L=QR`5Sq.SCpbsmgf^O
%*1-H]!67YD\433i779!l!.I\]U@d%RWqX>,8)=o,GXFl0)c7k^;C?IVo&8KF>8\gp?8\6#,t%tP2XqZVE,m@gC!]5hMj[p$/+lSZ
%RXp!=l,PWm%'E4lE:n6jno]uKK(p9RIq'+41TQ./mVFZt!NO=okU`-u5\B_LI"mn^h>GfZ<*tmQ7(XLlc=DTnY8nM:iN2@QQ^+e0
%-t@q-EZ?8s4+ON:h\Ho?+E4O*/J9@0WdUW%&a>dE5b\91CcOlaHqPot90qNXI0/'7&C_[qKB;fi)q<N/5\?8Sg&V?V*"u'dl?l:\
%KPm$c*.4uMMGVhi6&j\4Qj1Du/04chaq-oUGA>@,\<;G::k5lfbF:fA"+[W:,BZCfFN%1]!2jsKNYkR;MNT\_`MI+O>=rB$P]t8J
%05bqEO"IrS?8S0=?AS@Bf`hjS$!_?k`cuDP1`>iB114Ou)h&u7IrNHEcij1OlF%7&Z:]BLo)R87P/>#r_T%*HIbe22<7PkKPqs*b
%7Cn)b(.,bZQ.$.o]G4:SZ0cHN/G2m\lt,H)!Hj!_hs"b)7ZBqlpl?).RBplAM"j]TL0/X+4O@cqcX/!Dk0pKXfrlh+JN<:EEC:XB
%mEVK2WB#`IEIIg%VWu')<(:^d:MEAQT5+/'X=dB^#,od6]L-d)>F9t&qGOMi)%=FO_?WRF0tZ1f-W2`C!=`^q30\);O*9$g'uL]_
%hA3aaOUrlOWk-1YTM&;pGT+CS"0^"3aBpoAUtd)^)2G'SI^-A<<e28oN?_O42j+J<W*9M9b`#s/TH].N*Ae9bV,[]QYu-/)aK*,\
%M^='^dEQkiE2,\k'#HIF2=rKJ)6-@#Q#eF&qLDT^,,)6tf(n$^Y#lQFGNg17%IkE,IHhhp&0gs7`s2MPrB)]D3@7%'iGE9R2^<8b
%D]OnNTWiMGbAWcE&bcVjoEhRpEh83N$i*3ME3\sMd2JN%U<[I>N'PN$_605qOSt/3+PcGH8ZYp:f[d"[joVL?I[6bf7a5f"9emgL
%KC?GIn3bZC.3?HVJ&SBja,4*\>#D(Tehil2",IZLjVG2$8(M-O&?8/N.#Kq4K)+GXn4]\Il;n,$-BaN,8O;.C+l;^Uj@3X%rm%R2
%g9$jlX\jd&2$4)!=I`WcFVn8nQ^?l&Rl(,)+8E3JEcrI:^l:=gV-bB00b]9`@drc0RI5d%P9*QkZ_H]XqQ?I1U,\==3`\-n3ZjH0
%JI#'#9uDjtI@g*YE&u0#<hXq?#>+"u.7;GWMT@"'KmheJT(]DMXPpM%D1o^hp0<K"Ij9nJ+U$!B:9-R>qLi"MPMc(on?0;A5c<W(
%Gq%7)?>nYH.,mi*'DN0IFUJ3?jjQu"U61@ifI^t`2,[qgN*AuL/-C1Ge9q!f>>3*mO'ZIgGuL[<6?B">Mb6C!8.*,)Olj+)CUo5D
%5JGK)7d?1O;6=lDAuR?Le`28@L1K;Dgf:24aAX/e]o7f()f2I"&::RO6:q.m&uKg^Mp/b7Lf/%s,jj9>C31P65cI$EeN>dp\0TI2
%5t3US^3oBJc<W>_j-YCXX<*&SJZ<n+0ZX-F8HoV+'cG]*HH`cB;6f<Pn]h?sQag"^O.55t<@8<QMEY$u[*#rgQD^uRTa"c<,Ik,+
%Olsu8GXG05r?Rtp6Es>gc`p1*%j&a?`5UX3_.BKqbOhNh`bJ->aF/LAM;7q9,o!*-W1Z+,%pbr,H'IP(DDHBUi^_#b=h@\#.0g^+
%p(A=o64>%+3\[49>Y^6.?<KTL:Tq@Jcep8sG<(J_Q9Q48f2lRMhr@.p2'GN3M`_Z72MbpZ()&s<D?[CY[FUX)r2q2M=<<g*2gEdr
%%F[VVI@Ymo4D^c29\S#9IEsQX3G%:*3_j+7(gYgO1c%lRrDTuJMt/4m`67JtGJ]q#PjL/deCVpT.t01m/A7p'r2>R>at#G.[k'\C
%!,gj*_s&,#19dK-k/VEGK>l3.HDACg^t(lj#H.WrpHZhI5p)*G2_POR'Z1k>9,^L]/KWqX%JP&fmgE1S%b<AsNp:E_rr_Ip!9KWm
%$@ta2D]=.(jl$'IgN4K:OQ0KhO8p]7dYi+0AASrXgZf+7LBct&mie#rEe&p9b%2*,7)=o)\IfP$ca/b^oV;Tl(f1CGBEFm8J/j]T
%LQ#*4SXiW*&>[9HAd#G$OX^?m1807VWE\l[icIeD[7,DXXP,S.VT56W:G(K?J9>/$eZCL!IKJPH(JICGBMA1`h"ub:.:t_PoF`Ce
%5iSBcVA_JXBk`1oLQ.<3$\K1-1:P($0>BTK-2P9pRckAQ&suLh@-a+2TfQsqlGgZpg'[TqCS_";,OP+h`5WoLIk`.')b2t%(;]_6
%aHC5\b=(RPM@LooCfb(7@cu5d\]fkD+I_X-L7jn?YA](<!eRCeIB)1658&XoQUhp%!hCWIY.RkMKh^\)Ulr_ub=nnZQVRZIX0O'p
%m4tTaYcJp&Uo4>f8tiV$4.EmE5nnC=^5q'(!!4o!l]sW9B`TXPd=COVJ9"NY:dSn%`RT7/BqC1si,+sGGWdk`,QUmGB&.0&3-N!J
%iV4te05<&![.1hq&Y'#JD@bRiG*:DaJ-__<FYIpW+?I>\N0HB;$%!cE%;*5NR3+,C0l4*U1#;OZl.V67OH8"7jJ9V2c5`GmcA(>5
%OT_Tbo"bJ#j;6oHEOO]l+:cO=)KY@q#>0tK^&`4oGEs_,a3`EJcg*q$LBb^fJ]ar0("u[-p699J:e;dhYgScFe`gcKs8UaS^^)V1
%GLig(KZg.Ff)HZ-"d23lLt>EaVDm2f]I@`cdSn=)<&<>=RuRMt\bB;slsdpS!sUNgcDJ5XqGbbIZsluMj5(;6ij;/p,0N+o`7t4L
%dIrhUN(VDCdLI`/(3X]5E!(5Z,E/>32SftKjL<,,.TeJ`H.9t%\8XfEJN'QBQ4OQZ,Xc;&@*u5W"tAgig8__aePiLsF=t42Ge!$'
%4nm;=/2B-Y=jH`!75b0j\KQgt>_BcV-,e$K-EmZ]>Q'4B$/`9reJoWZ2.)nF*cMu\3(KP">q`)@KTh0R*e@u3"aqL9I<2@fpZL)]
%?mEUt\2);q&a.,N,(PcV$M+;rFJtsscr2h7a;Q5B"2ih.`qUtD/Cqka[\?n%gr+0Z=Sk2c)6Ke/hW]FCi%6Y%?mdA_PpL&*WI0Yd
%\P;#*Nk"_)SJ+T"M8ir_*+@"']^q-T@3SRr)=5!eZEIZ.'&6oAL*REtA@MY7,:N)?m6<>LpZ"t""-R9a*d,]I`J,!NiK(!KCKX4Z
%V(8G5=+fFoP9@DFd\IK8s0'1+[GX`\(hFRLn$Sfr`.5DcB^fRiWo1M#**/1=;Ou>K)Aq:ufDD*m@P;^8fMDU95V><@_U/hp9LK2a
%E<cT7-1BBn,r%9qGPrr1jF@Z8%9>OJR'b1(l)4psUS)5fY=BEF/RXXt%m<rW)uL3p^QKaE*4*[S&"\*g\./fqllB4K9@NO$q]^@1
%@:<])"HGu[NgQj5nT?>5:D&PP&^I4TC2LB4]"_Z<M8KD#pgNe[1'AUkn!"`B/AQql??<%n)el:0mF9lIOF_uNn1md1O`H'Qec#91
%IaBQoW4#1]T$b7UK?F^2/WNhg2IaM\Ll8Ti#R1]bb#]59$kBLs4V:e]!!/c>3Ut3(,?j9JTKNsVO&33BdItg0W2q(FG#2<T'SGI?
%YV<*pFV!mMCMp0&+'?563/cNG0s*qgj<!0t]nP;W#2]a1<hnogThR$pOBr(N:jgcQ<0:s.jbJ))7c_OeZQ[@O"AAC'>YX\U&uXEr
%:/b8]d:c!+LgU>A^ClO@$GIT;WSK*5ElS'[2P&qS=k5W_(?a$iHRQ\u-B11:f5VWeTqiQ?8731(*fn^P,]jGM0!:4E<]3$li$]8>
%pbQ:Ycl(&n6nG:/(+_,)(UBIJnWE[%!nkDY(MhdVG"d%#ilS*+d?m39dD>pPBd?SXdhDu$-irf.:Kc^*5cr1S4B\jsfTkCDS0UpK
%&s<.DW@7]5l1YuUd@1od3pZJ5-D?c%00)?`LED(J#,V3%Rj^gJOf.a0)=4hBH2?MfYV?KYK=i7ZhAVa(56>-.28k8BHcB2h1c%(Q
%!""#kcptYC+LH+b0W':nW%IQ5?,PjD)i?6KIq"oOgMga42Xep4eHZ;Yoeak4?QY`r-PR,".PV(T/lo@&%Q;k:B>KC^Uo'2Y?06(P
%"DTh/IKhM?b_R0kGUX?!Equ(+060f6^t/"kUh!g3j!d209JZno42_ERAHX/_l9s_L[l3$KA[C@$pTEP3l.bT[!=CFK=q$#]SJ?D=
%*(.Kpg,Gl^r.qS2r%.=]VtP=I%.R3jAGW_EBNKgSRER4@]F!5[HG39B/e+h-1E7^h7'_W</`rfc+dGV7W(ujur!s?B'8LHWCKsT=
%*2]oqO(n/PN<[N*.Oio$&_fB^VjMl:^P?N0?!>"hQ<+D%F<"",3eGt9YE$584"0(sU3+\O6.=Lq>o>aIq1`.-:QB._l^Cti>GmHC
%R0=4E+2Q"E9jb_97ua1F`nA#l0$onPeK=k$aom&(DLnuTGQTMsVZ\HJ1t#;F=dhe$U,Jq"(iLfRGOWAj\@aiW#/.:g=k<W]D<LZ?
%b[[$*h:^3E`%iYgi65ahj;QZ]QDkg'1>O]=l?]aMe_#NZdUb]8BiV#_,J`'Fp@;mS[%58l&^`uiiQ-EY;m:og,=O8sr9;h45(f`]
%1N2'i5q?;1c+trQqL$*[+,C4H%@!7"JaQ4*j$@VA6Ns\b:_dc_`j*GNCW9t2f+(WH#)%s6^G%WE:!Eo/7c,4"T68S+CD%.qQOBRn
%,A8\$mVl*?!;@0ke*W4pDZQ4dW$r6uRf2FT.@+eWi%cI3:Q>T>3@T>jFo3H;s,:/i<LabR+G%%3JKS@HfeSfG9$YO%U&kAlBn7A/
%lqMRO`3'qBG?FIM%B7e_>,gt0A:4Zg;?bIY'A!0k?UI([$kf3HJ)H:@J!!n?FEiC&`t&(h%ndmR=lP@dreN=X!Ihsm-`0BQ2'BVj
%A6XPIO?U8$NC49#2"aa1qP8>FqIX+_fpOt98;KQ]\9_$`1g3'`+FST#*P+K+5%Z(QIsC)*Pe@uQ!@ahcMEK&I%[h&p7TNQaG*r3r
%J.DKFSS\kE1T6fgqT$*ZKM70p$[W1YVfVu$jt@fIU);]=!.%7V$RP:_KE8jb8k>=7Z"]79d4cb2d0Ht]4%Y?d-ptjToeE.mW/$.i
%!20D&!6<tE*ubkb?\rksokK6G+#B?#X3g@+M-P>9GK?^OH?[ikF=jD'Pdl0O-@3r%2#?(2A#%9bP)h'kMGS<=ad?gb>OS7!hTb[V
%=_k`ud@NGb01h-uP&%&&I%=U3nI]JR7!iP<T-"M/p[$<lAld?\2,kYCfCH"-=0K@88igUnrpJjFZ1K<Q(=O>m.=4t7Q6aq/^!Z,j
%PDmnN/67I,Vn9Jfg6IOPofU]0X@U&o\iWsk):cM#U?XJHa@2A+kK`ld=5H-M=0#IET"eU?8>Jdu>[!)@Usu^8LrZEhp:[.?_Rtq$
%lTKT*N(/PXV&50t&set7J2eY]L]cXe3$8]e"60*IPo`ntXt@8\6]6':4F>W,hNI<;@cHfuENuW.SgC6_TkZUV&-KCF\QX7EaHgJ-
%2naF\Fa>.$r`#"3?7S0qr,\\Zl0]uEi??A(m[;bVC&WT0s.V?5M@"n8"%-K84<=reLk5Yi%MpNu8-kI1d_ns3QjjNN9V`;h,bVH,
%TSTi+]q8>I9-6;<9nj/l$jOknJpTU*.*[EcJOcZi>qJ*`&o+buC+=fuf5pK/7^uDk4OsfA*fid"0juOG)MuKZ_VirT]b]U81`"kG
%UL!@RXCHZqau%iA\H.Z/!<r`J%Yo\aBIoMZ*A/mV=;o=N770GI=;hPo6W7EZL'+3eK$g5JOpFFC?n+j$%ZEfp6Sl!?-&ALM>DU7c
%iXA6&0b>'l&Y^G'!^`;R?re^--BUi1&lJ2G9F+be"6H9J^dD$T8^LjQ!\>-&'*q<"3?V]Q7cUa)Wi"=8d,1QQT!D*=$(?%E/$dZo
%cfs%)=":<g(D!,5$3=P>W%8``jUk)aZph:C9=d9XH0o@Bl4YJ0QETYY@d2U4'e>>8%Y51i@3J"\$iu1*9EG3F"@)r,`>"K4(;^@j
%@'Fnjj>[]L8f9koJ,pbm+9;TF5Y/Zl2URe^=&TJm!O#9GqOeB90M"/fQ=pbXo!o_WP>=OOPT^k]F2c_uh;02G7e5RmSf-g1"]2\"
%R,,6Wk$$>fcK+"J#;#B?:.*PrZj%GYHJb*5+qcO11cj)`jNM+:?!"p<a_YpG,RKic2Y.;9k@7;7ki3MElq_(^Jg]e*Ql9hs#YjVX
%E,0OZ3:V[sB2\,9E`n7.epaL<U&/R>"@2s^*+5Fon&FgQE1=.n?-4b;qds3$]H/7!U)*0;/t1G9`>=bAHf]l!OY,$5E$Bt@ocu*E
%%]FjnIV.5!6*.>S&QDI0a8N\:/LqAu0D]_SFX7$O$;JAje)G,1R+%M'@p;@\S$U'8r3Ug:8dhL:di<B>e4j1LoUT=Q[uR+]K,XNb
%6"3#Gb=fY?@)-?n',J(1;8dAh]LT^>5-q`T)ZeDTXQE-;GdEjg6phr!VXe<mEK;cM@T%\aY-gidot.tq&1tVriEjo_CRQ,JOFBRQ
%Gp%XL<*L`XGsUENq;J4'^6?&ETqqX&p=JbW!<6ZC,^faE4/,u3(DE5G,78Ltd6\F1NF`k[B(*aPYoSd0/@(J_9="8M]7tIj9`=s[
%b&so,(9R^4pmB]W^Ts%1lk%Pm]]pi4e%al9K9(>4rV,)7aWn1KQkPCI'N'.\\?%soIH'n]eIag&^.O3+ms"T/.D_uW_V2Ua5t(L=
%i3ruF*f:2F0g;1]^+H,9-OkAM@F.q)k`-A,*7H3q>S/grYNip49)69]N*j'Sc'Bsf$dDl:^R-8'+Y]pm,bu`M@<]3OZ@#<F;=+9M
%0o6u?%&Th8pe2I&'VtCVg?9ta8,?@g>pVqXXu'n21*'Eh=i*^u!'*"Vjm-6:gt+/9NB<]$pdeqaWljC`ULq<.qUF*!8uQH_d-u&-
%OnkA1(d?X/&`l_.$u=#f~>
%AI9_PrivateDataEnd
